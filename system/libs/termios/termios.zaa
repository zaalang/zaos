//
// termios
//

import os.zaos.fcntl;

pub enum tio
{
  pub const getptn = 0x80035430;
  pub const grantpt = 0x80035431;
  pub const gettermios = 0x80035401;
  pub const settermios = 0x80035402;
  pub const getwinsize = 0x80035413;
  pub const setwinsize = 0x80035414;
}

pub enum IFLAG
{
  pub const IGNBRK = 0o00001;  // ignore break condition
  pub const BRKINT = 0o00002;  // signal interrupt on break
  pub const ISTRIP = 0o00040;  // strip 8th bit off characters
  pub const INLCR  = 0o00100;  // map NL to CR on input
  pub const IGNCR  = 0o00200;  // ignore CR
  pub const ICRNL  = 0o00400;  // map CR to NL on input
  pub const IUTF8  = 0o40000;  // input is UTF8
}

pub enum OFLAG
{
  pub const OPOST = 0o00001;   // post-process output
  pub const ONLCR = 0o00004;   // map NL to CR-NL on output
  pub const OCRNL = 0o00010;   // map CR to NL on output
  pub const OFILL = 0o00100;   // use fill characters for delay
  pub const OFDEL = 0o00200;   // fill is DEL
}

pub enum CFLAG
{
  pub const CSIZE  = 0o00060;  // character size mask
  pub const   CS5  = 0o00000;
  pub const   CS6  = 0o00020;
  pub const   CS7  = 0o00040;
  pub const   CS8  = 0o00060;
  pub const CSTOPB = 0o00100;  // set two stop bits, rather than one
  pub const CREAD  = 0o00200;  // enable receiver
}

pub enum LFLAG
{
  pub const ISIG   = 0o000001; // enable signals
  pub const ICANON = 0o000002; // canonical input
  pub const ECHO   = 0o000010; // enable echo
  pub const ECHOE  = 0o000020; // echo ERASE
  pub const ECHOK  = 0o000040; // echo KILL
  pub const ECHONL = 0o000100; // echo NL
  pub const NOFLSH = 0o000200; // disable flush after interrupt or quit
  pub const IEXTEN = 0o100000; // enable implementation-defined input
}

pub enum CC
{
  pub const VINTR = 0;
  pub const VQUIT = 1;
  pub const VERASE = 2;
  pub const VKILL = 3;
  pub const VEOF = 4;
  pub const VTIME = 5;
  pub const VMIN = 6;
  pub const VSWTC = 7;
  pub const VSTART = 8;
  pub const VSTOP = 9;
  pub const VSUSP = 10;
  pub const VEOL = 11;
  pub const VREPRINT = 12;
  pub const VDISCARD = 13;
  pub const VWERASE  = 14;
  pub const VLNEXT = 15;
  pub const VEOL2 = 16;
}

pub struct termios
{
  pub u32 c_iflag;
  pub u32 c_oflag;
  pub u32 c_cflag;
  pub u32 c_lflag;
  pub u8 c_line;
  pub u8[32] c_cc;
  pub u32 __c_ispeed;
  pub u32 __c_ospeed;

  pub termios() = default;
  pub termios(termios&) = default;
  pub fn =(termios mut &, termios &) -> termios mut & = default;
  pub ~termios() = default;
}

pub struct winsize
{
  pub u16 ws_row;
  pub u16 ws_col;
  pub u16 ws_xpixel;
  pub u16 ws_ypixel;

  pub winsize() = default;
  pub winsize(winsize&) = default;
  pub fn =(winsize mut &, winsize &) -> winsize mut & = default;
  pub ~winsize() = default;
}

extern fn thread_ring() -> os::ioring mut &;

pub fn enable_raw_mode(i32 fd, termios mut &oldstate) -> i32
{
  if (var result = os::ioctl(&mut thread_ring, fd, tio::gettermios, &oldstate, sizeof<termios>); result < 0)
    return result;

  var raw = oldstate;
  raw.c_iflag &= ~(IFLAG::BRKINT | IFLAG::ICRNL | IFLAG::ISTRIP);
  raw.c_oflag &= ~(OFLAG::OPOST);
  raw.c_cflag |= (CFLAG::CS8);
  raw.c_lflag &= ~(LFLAG::ECHO | LFLAG::ICANON | LFLAG::IEXTEN | LFLAG::ISIG);

  if (var result = os::ioctl(&mut thread_ring, fd, tio::settermios, &raw, sizeof<termios>); result < 0)
    return result;

  return 0;
}

pub fn enable_raw_mode(termios mut &oldstate) -> i32
{
  return enable_raw_mode(os::STDIN_FILENO, &mut oldstate);
}

pub fn restore_cooked_mode(i32 fd, termios mut &oldstate) -> i32
{
  if (var result = os::ioctl(&mut thread_ring, fd, tio::settermios, &oldstate, sizeof<termios>); result < 0)
    return result;

  return 0;
}

pub fn restore_cooked_mode(termios mut &oldstate) -> i32
{
  return restore_cooked_mode(os::STDIN_FILENO, &mut oldstate);
}

pub fn get_window_size(i32 fd, int mut &cols, int mut &rows) -> i32
{
  var ws = winsize(void);
  if (var result = os::ioctl(&mut thread_ring, fd, tio::getwinsize, &ws, sizeof(ws)); result < 0)
    return result;

  cols = cast(ws.ws_col);
  rows = cast(ws.ws_row);

  return 0;
}

pub fn get_window_size(int mut &cols, int mut &rows) -> i32
{
  return get_window_size(os::STDIN_FILENO, &mut cols, &mut rows);
}

//
// gfx transform
//

import std.math;
import gfx.point;
pub import lml.matrix : Matrix;

pub struct transform : pub f64[3][3]
{
  pub fn identity() -> transform
  {
    return [ [<f64>: 1.0, 0.0, 0.0 ], [<f64>: 0.0, 1.0, 0.0 ], [<f64>: 0.0, 0.0, 1.0 ] ];
  }

  pub fn scale(f64 sx, f64 sy) -> transform
  {
    return [ [<f64>: sx, 0.0, 0.0 ], [<f64>: 0.0, sy, 0.0 ], [<f64>: 0.0, 0.0, 1.0 ] ];
  }

  pub fn translation(f64 dx, f64 dy) -> transform
  {
    return [ [<f64>: 1.0, 0.0, dx ], [<f64>: 0.0, 1.0, dy ], [<f64>: 0.0, 0.0, 1.0 ] ];
  }

  pub fn rotation(f64 cos, f64 sin) -> transform
  {
    return [ [<f64>: cos, -sin, 0.0 ], [<f64>: sin, cos, 0.0 ], [<f64>: 0.0, 0.0, 1.0 ] ];
  }

  pub fn shear(f64 hx, f64 hy) -> transform
  {
    return [ [<f64>: 1.0, -hx, 0.0 ], [<f64>: hy, 1.0, 0.0 ], [<f64>: 0.0, 0.0, 1.0 ] ];
  }

  pub transform(f64[3][3] &mat)
    : super(mat)
  {
  }

  pub fn [](this &&, usize i, usize j)
  {
    return &this.super[i][j];
  }

  pub fn translation(this&) -> gfx::point
  {
    return gfx::point(this[0][2], this[1][2]);
  }

  pub transform() = default;
  pub transform(transform &) = default;
  pub fn =(transform mut &, transform &) -> transform mut & = default;
  pub ~transform() = default;
}

pub fn *(transform &lhs, transform &rhs) -> gfx::transform
{
  var result = transform();

  result[0, 0] = lhs[0, 0]*rhs[0, 0] + lhs[0, 1]*rhs[1, 0] + lhs[0, 2]*rhs[2, 0];
  result[0, 1] = lhs[0, 0]*rhs[0, 1] + lhs[0, 1]*rhs[1, 1] + lhs[0, 2]*rhs[2, 1];
  result[0, 2] = lhs[0, 0]*rhs[0, 2] + lhs[0, 1]*rhs[1, 2] + lhs[0, 2]*rhs[2, 2];
  result[1, 0] = lhs[1, 0]*rhs[0, 0] + lhs[1, 1]*rhs[1, 0] + lhs[1, 2]*rhs[2, 0];
  result[1, 1] = lhs[1, 0]*rhs[0, 1] + lhs[1, 1]*rhs[1, 1] + lhs[1, 2]*rhs[2, 1];
  result[1, 2] = lhs[1, 0]*rhs[0, 2] + lhs[1, 1]*rhs[1, 2] + lhs[1, 2]*rhs[2, 2];
  result[2, 0] = lhs[2, 0]*rhs[0, 0] + lhs[2, 1]*rhs[1, 0] + lhs[2, 2]*rhs[2, 0];
  result[2, 1] = lhs[2, 0]*rhs[0, 1] + lhs[2, 1]*rhs[1, 1] + lhs[2, 2]*rhs[2, 1];
  result[2, 2] = lhs[2, 0]*rhs[0, 2] + lhs[2, 1]*rhs[1, 2] + lhs[2, 2]*rhs[2, 2];

  return result;
}

pub fn *(transform &transform, gfx::point &pt) -> gfx::point
{
  var x = transform[0, 0]*pt.x + transform[0, 1]*pt.y + transform[0, 2];
  var y = transform[1, 0]*pt.x + transform[1, 1]*pt.y + transform[1, 2];

  return gfx::point(x, y);
}

//
// gfx color
//

import std.math;
pub import lml.vector : Vector;

pub struct color
{
  pub f32 r;
  pub f32 g;
  pub f32 b;
  pub f32 a;

  pub using vector_t = Vector<color, f32, 4>;

  pub color(f32 r, f32 g, f32 b, f32 a = 1.0)
    : r(r), g(g), b(b), a(a)
  {
  }

  pub fn get<i>(this &) -> f32
  {
    return this.#i;
  }

  pub color() = default;
  pub color(color &) = default;
  pub fn =(color mut &, color &) -> color mut & = default;
  pub ~color() = default;
}

pub fn *(color &lhs, color &rhs) -> color
{
  return hadamard(lhs, rhs);
}

#[nodiscard]
pub const fn gamma(color &color) -> color
{
  using std;

  return color(pow(color.r, 1.0/2.2), pow(color.g, 1.0/2.2), pow(color.b, 1.0/2.2), color.a);
}

#[nodiscard]
pub const fn ungamma(color &color) -> color
{
  using std;

  return color(pow(color.r, 2.2), pow(color.g, 2.2), pow(color.b, 2.2), color.a);
}

#[nodiscard]
pub fn premultiply(u32 color, u32 alpha) -> u32
{
  // https://arxiv.org/pdf/2202.02864.pdf

  var agrb = cast<u64>(alpha) * ((cast<u64>(color) | (cast<u64>(color) << 24)) & 0x00ff00ff00ff00ff);

  agrb += 0x80008000800080;
  agrb += (agrb >> 8) & 0x00ff00ff00ff00ff;
  agrb >>= 8;

  return cast<u32>((agrb & 0x00ff00ff) | ((agrb >> 24) & 0xff00ff00));
}

#[nodiscard]
pub fn premultiply(u32 color, u8 alpha) -> u32
{
  return premultiply(color, cast<u32>(alpha));
}

#[nodiscard]
pub fn premultiply(u32 color) -> u32
{
  return premultiply(color | 0xff000000, color >> 24);
}

#[nodiscard]
pub fn premultiply(color &color) -> color
{
  return color(color.a * color.r, color.a * color.g, color.a * color.b, color.a);
}

#[nodiscard]
pub fn unpremultiply(color &color) -> color
{
  if (color.a == 0.0)
    return color(0.0, 0.0, 0.0, 0.0);

  var inva = 1.0 / color.a;

  return color(color.r * inva, color.g * inva, color.b * inva, color.a);
}

#[nodiscard]
pub const fn rgba(u8 r, u8 g, u8 b, u8 a) -> u32
{
  return cast<u32>(b) << 0 | cast<u32>(g) << 8 | cast<u32>(r) << 16 | cast<u32>(a) << 24;
}

#[nodiscard]
pub const fn rgba(color &color) -> u32
{
  var rgba = clamp(color.map(|x| x * 255.0 + 0.5), 0.0, 255.0);

  return cast<u32>(rgba.b) << 0 | cast<u32>(rgba.g) << 8 | cast<u32>(rgba.r) << 16 | cast<u32>(rgba.a) << 24;
}

#[nodiscard]
pub const fn rgba(u32 color) -> color
{
  return color(cast<f32>(color >> 16 & 0xff) / 255.0, cast<f32>(color >> 8 & 0xff) / 255.0, cast<f32>(color >> 0 & 0xff) / 255.0, cast<f32>(color >> 24 & 0xff) / 255.0);
}

#[nodiscard]
pub const fn srgba(color &color) -> u32
{
  return rgba(gamma(color));
}

#[nodiscard]
pub const fn srgba(u32 color) -> color
{
  return ungamma(rgba(color));
}

#[nodiscard]
pub const fn rgbm(color &color) -> u32
{
  using std;

  var r = color.r * (1.0 / 8.0);
  var g = color.g * (1.0 / 8.0);
  var b = color.b * (1.0 / 8.0);
  var m = ceil(clamp(max(r, g, b), 1e-6, 1.0) * 255.0) / 255.0;

  return (cast<u32>(b/m * 255.0) & 0xff) << 0 | (cast<u32>(g/m * 255.0) & 0xff) << 8 | (cast<u32>(r/m * 255.0) & 0xff) << 16 | (cast<u32>(m * 255.0) & 0xff) << 24;
}

#[nodiscard]
pub const fn rgbm(u32 color) -> color
{
  var r = cast<f32>((color >> 16) & 0xff) * (1.0 / 255.0);
  var g = cast<f32>((color >> 8) & 0xff) * (1.0 / 255.0);
  var b = cast<f32>((color >> 0) & 0xff) * (1.0 / 255.0);
  var m = cast<f32>((color >> 24) & 0xff) * (1.0 / 255.0);

  return color(8.0 * r * m, 8.0 * g * m, 8.0 * b * m, 1.0);
}

#[nodiscard]
pub const fn rgbe(color &color) -> u32
{
  using std;

  var r = clamp(color.r, 0.0, 65408.0);
  var g = clamp(color.g, 0.0, 65408.0);
  var b = clamp(color.b, 0.0, 65408.0);
  var e = max(-16.0f, floor(log2(max(r, g, b)))) + 1.0;

  return (cast<u32>(e + 15.0) & 0x1f) << 27 | (cast<u32>(round(r / pow(2.0, e) * 511.0)) & 0x1ff) << 0 | (cast<u32>(round(g / pow(2.0, e) * 511.0)) & 0x1ff) << 9 | (cast<u32>(round(b / pow(2.0, e) * 511.0)) & 0x1ff) << 18;
}

#[nodiscard]
pub const fn rgbe(u32 color) -> color
{
  using std;

  var r = cast<f32>((color >> 0) & 0x1ff) * (1.0 / 511.0);
  var g = cast<f32>((color >> 9) & 0x1ff) * (1.0 / 511.0);
  var b = cast<f32>((color >> 18) & 0x1ff) * (1.0 / 511.0);
  var e = cast<f32>((color >> 27) & 0x1f) - 15.0;

  return color(r * pow(2.0, e), g * pow(2.0, e), b * pow(2.0, e), 1.0);
}

#[nodiscard]
pub const fn hsv(f32 h, f32 s, f32 v) -> color
{
  using std;

  if (v <= 0.0)
    return color(0.0, 0.0, 0.0);

  if (s <= 0.0)
    return color(v, v, v);

  var hf = clamp(h, 0.0, 360.0) / 60.0;

  var i = floor(hf);

  var p = v * (1.0 - s);
  var q = v * (1.0 - (s * (hf - i)));
  var t = v * (1.0 - (s * (1.0 - (hf - i))));

  switch (cast<int>(i))
  {
    case 0:
      return color(v, t, p);

    case 1:
      return color(q, v, p);

    case 2:
      return color(p, v, t);

    case 3:
      return color(p, q, v);

    case 4:
      return color(t, p, v);

    case 5:
      return color(v, p, q);

    case 6:
      return color(v, t, p);
  }

  return color(0.0, 0.0, 0.0);
}

#[nodiscard]
pub const fn oklab(f32 l, f32 a, f32 b) -> color
{
  using std;

  var l_ = l + 0.3963377774 * a + 0.2158037573 * b;
  var m_ = l - 0.1055613458 * a - 0.0638541728 * b;
  var s_ = l - 0.0894841775 * a - 1.2914855480 * b;

  var l = l_ * l_ * l_;
  var m = m_ * m_ * m_;
  var s = s_ * s_ * s_;

  var r = 4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s;
  var g = -1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s;
  var b = -0.0041960863 * l - 0.7034186147 * m + 1.7076147010 * s;

  var r = clamp(r, 0.0, 1.0);
  var g = clamp(g, 0.0, 1.0);
  var b = clamp(b, 0.0, 1.0);

  return color(r, g , b);
}

pub const fn kelvin_rgb(f32 kelvin) -> color
{
  const lut = [
    [  1000.0f, 1.000f, 0.007f, 0.000f ],
    [  1500.0f, 1.000f, 0.126f, 0.000f ],
    [  2000.0f, 1.000f, 0.234f, 0.010f ],
    [  2500.0f, 1.000f, 0.349f, 0.067f ],
    [  3000.0f, 1.000f, 0.454f, 0.151f ],
    [  3500.0f, 1.000f, 0.549f, 0.254f ],
    [  4000.0f, 1.000f, 0.635f, 0.370f ],
    [  4500.0f, 1.000f, 0.710f, 0.493f ],
    [  5000.0f, 1.000f, 0.778f, 0.620f ],
    [  5500.0f, 1.000f, 0.837f, 0.746f ],
    [  6000.0f, 1.000f, 0.890f, 0.869f ],
    [  6500.0f, 1.000f, 0.937f, 0.988f ],
    [  7000.0f, 0.907f, 0.888f, 1.000f ],
    [  7500.0f, 0.827f, 0.839f, 1.000f ],
    [  8000.0f, 0.762f, 0.800f, 1.000f ],
    [  8500.0f, 0.711f, 0.766f, 1.000f ],
    [  9000.0f, 0.668f, 0.738f, 1.000f ],
    [  9500.0f, 0.632f, 0.714f, 1.000f ],
    [ 10000.0f, 0.602f, 0.693f, 1.000f ],
  ];

  using std;

  var i = 0;
  while (i + 1 < lut.len && lut[i + 1][0] < kelvin)
    ++i;

  var mu = (kelvin - lut[i][0])/(lut[i+1][0] - lut[i][0]);

  return lerp(color(lut[i][1], lut[i][2], lut[i][3]), color(lut[i+1][1], lut[i+1][2], lut[i+1][3]), mu);
}

//
// gfx stroke
//

import std.math;
import gfx.path;
import gfx.color;
import gfx.blend;
import gfx.point;
import gfx.transform;
import gfx.raster;
import lml.fixed;
import lml.geometry;

pub enum cap
{
  flat = 0,
  square,
  round,
}

pub enum join
{
  bevel = 0,
  miter,
  round,
}

pub struct pen
{
  pub float width;
  pub gfx::color brush;

  pub join join;
  pub float miter_limit;

  pub cap cap;

  pub pen(gfx::color &brush = gfx::color(0.0, 0.0, 0.0), float width = 2.0, cap cap = cap::flat, join join = join::bevel, float miter_limit = 16.0)
    : width(width),
      brush(brush),
      cap(cap),
      join(join),
      miter_limit(miter_limit)
  {
  }

  pub pen(pen&) = default;
  pub fn =(pen mut &, pen &) -> pen mut & = default;
  pub ~pen() = default;
}

struct state
{
  gfx::point start;
  gfx::point cursor;
  gfx::raster_t raster;

  enum status
  {
    move_to = 0,
    draw_to,
    closed,
  }

  status status;
  gfx::point first_left;
  gfx::point first_right;
  lml::vector<f64, 2> first_forward;
  gfx::point left;
  gfx::point right;
  lml::vector<f64, 2> forward;

  cap cap;
  join join;
  float miter_limit;

  state() = default;
  ~state() = default;
}

fn stroke_line(state mut &state, gfx::transform &Q, gfx::point &v1, gfx::point &v2, float width) -> void
{
  using lml;
  using std;

  if (coincident(v1, v2))
    return;

  var halfwidth = 0.5 * width;

  var a1 = state.left;
  var a2 = state.right;

  var oab = normalise(perp(vec(v1, v2)));

  var b1 = Q * (v2 + halfwidth * oab);
  var b2 = Q * (v2 - halfwidth * oab);

  state.raster.move_to(a1.x, a1.y);
  state.raster.line_to(b1.x, b1.y);
  state.raster.move_to(b2.x, b2.y);
  state.raster.line_to(a2.x, a2.y);

  state.left = b1;
  state.right = b2;
  state.forward = vec(v1, v2);
}

fn stroke_quad(state mut &state, gfx::transform &Q, gfx::point &v1, gfx::point &v2, gfx::point &v3, float width) -> void
{
  using lml;
  using std;

  fn subdivide[state, Q, width](gfx::point &v1, gfx::point &v2, gfx::point &v3, int n) -> void
  {
    var d = abs(v1.x - v2.x) + abs(v1.y - v2.y) + abs(v3.x - v2.x) + abs(v3.y - v2.y);

    if (v1.x == v2.x && v1.y == v2.y)
    {
      stroke_line(&mut state, Q, v2, v3, width);

      return;
    }

    if (v2.x == v3.x && v2.y == v3.y)
    {
      stroke_line(&mut state, Q, v1, v2, width);

      return;
    }

    if (d <= abs(v3.x - v1.x) + abs(v3.y - v1.y) || n <= 0)
    {
      var halfwidth = 0.5 * width;

      var a1 = state.left;
      var a2 = state.right;

      var oac = normalise(perp(vec(v1, v3)));

      var b1 = Q * (v2 + halfwidth * oac);
      var b2 = Q * (v2 - halfwidth * oac);

      var obc = normalise(perp(vec(v2, v3)));

      var c1 = Q * (v3 + halfwidth * obc);
      var c2 = Q * (v3 - halfwidth * obc);

      state.raster.move_to(a1.x, a1.y);
      state.raster.quad_to(b1.x, b1.y, c1.x, c1.y);
      state.raster.move_to(c2.x, c2.y);
      state.raster.quad_to(b2.x, b2.y, a2.x, a2.y);

      state.left = c1;
      state.right = c2;

      return;
    }

    var p1 = 0.5 * v1 + 0.5 * v2;
    var p2 = 0.25 * v1 + 0.5 * v2 + 0.25 * v3;
    var p3 = 0.5 * v2 + 0.5 * v3;

    subdivide(v1, p1, p2, n - 1);
    subdivide(p2, p3, v3, n - 1);
  }

  subdivide(v1, v2, v3, 2);

  state.forward = vec(v2, v3);
}

fn stroke_cubic(state mut &state, gfx::transform &Q, gfx::point &v1, gfx::point &v2, gfx::point &v3, gfx::point &v4, float width) -> void
{
  using lml;
  using std;

  fn subdivide[state, Q, width](gfx::point &v1, gfx::point &v2, gfx::point &v3, gfx::point &v4, int n) -> void
  {
    var d = abs(v1.x + v3.x - v2.x - v2.x) + abs(v1.y + v3.y - v2.y - v2.y) + abs(v2.x + v4.x - v3.x - v3.x) + abs(v2.y + v4.y - v3.y - v3.y);

    if (v1.x == v2.x && v1.y == v2.y)
    {
      stroke_quad(&mut state, Q, v2, v3, v4, width);

      return;
    }

    if (v3.x == v4.x && v3.y == v4.y)
    {
      stroke_quad(&mut state, Q, v1, v2, v3, width);

      return;
    }

    if (d <= abs(v3.x - v1.x) + abs(v3.y - v1.y) || n <= 0)
    {
      var halfwidth = 0.5 * width;

      var a1 = state.left;
      var a2 = state.right;

      var oac = normalise(perp(vec(v1, v3)));

      var b1 = Q * (v2 + halfwidth * oac);
      var b2 = Q * (v2 - halfwidth * oac);

      var obd = normalise(perp(vec(v2, v4)));

      var c1 = Q * (v3 + halfwidth * obd);
      var c2 = Q * (v3 - halfwidth * obd);

      var ocd = normalise(perp(vec(v3, v4)));

      var d1 = Q * (v4 + halfwidth * ocd);
      var d2 = Q * (v4 - halfwidth * ocd);

      state.raster.move_to(a1.x, a1.y);
      state.raster.cubic_to(b1.x, b1.y, c1.x, c1.y, d1.x, d1.y);
      state.raster.move_to(d2.x, d2.y);
      state.raster.cubic_to(c2.x, c2.y, b2.x, b2.y, a2.x, a2.y);

      state.left = d1;
      state.right = d2;

      return;
    }

    var p1 = 0.5 * v1 + 0.5 * v2;
    var p2 = 0.25 * v1 + 0.5 * v2 + 0.25 * v3;
    var p3 = 0.125 * v1 + 0.375 * v2 + 0.375 * v3 + 0.125 * v4;
    var p4 = 0.25 * v2 + 0.5 * v3 + 0.25 * v4;
    var p5 = 0.5 * v3 + 0.5 * v4;

    subdivide(v1, p1, p2, p3, n - 1);
    subdivide(p3, p4, p5, v4, n - 1);
  }

  subdivide(v1, v2, v3, v4, 3);

  state.forward = vec(v3, v4);
}

fn stroke_conic(state mut &state, gfx::transform &Q, gfx::point &v1, gfx::point &v2, gfx::point &v3, float w, float width) -> void
{
  using lml;
  using std;

  fn subdivide[state, Q, width](gfx::point &v1, gfx::point &v2, gfx::point &v3, float w, int n) -> void
  {
    if (v1.x == v2.x && v1.y == v2.y)
    {
      stroke_line(&mut state, Q, v2, v3, width);

      return;
    }

    if (v2.x == v3.x && v2.y == v3.y)
    {
      stroke_line(&mut state, Q, v1, v2, width);

      return;
    }

    if (n <= 0)
    {
      var halfwidth = 0.5 * width;

      var a1 = state.left;
      var a2 = state.right;

      var oac = normalise(perp(vec(v1, v3)));

      var b1 = Q * (v2 + halfwidth * oac);
      var b2 = Q * (v2 - halfwidth * oac);

      var obc = normalise(perp(vec(v2, v3)));

      var c1 = Q * (v3 + halfwidth * obc);
      var c2 = Q * (v3 - halfwidth * obc);

      state.raster.move_to(a1.x, a1.y);
      state.raster.conic_to(b1.x, b1.y, c1.x, c1.y, w);
      state.raster.move_to(c2.x, c2.y);
      state.raster.conic_to(b2.x, b2.y, a2.x, a2.y, w);

      state.left = c1;
      state.right = c2;

      return;
    }

    var u = 1.0 / (1.0 + w);
    var wu = w * u;

    var p1 = u * v1 + wu * v2;
    var p2 = 0.5 * u * v1 + wu * v2 + 0.5 * u * v3;
    var p3 = wu * v2 + u * v3;
    var pw = sqrt(0.5 + 0.5 * w);

    subdivide(v1, p1, p2, pw, n - 1);
    subdivide(p2, p3, v3, pw, n - 1);
  }

  subdivide(v1, v2, v3, w, 2);

  state.forward = vec(v2, v3);
}

fn stroke_join(state mut &state, gfx::transform &Q, gfx::point &v1, gfx::point &left, gfx::point &right, lml::vector<f64, 2> &forward, float width) -> void
{
  using lml;
  using std;

  var halfwidth = 0.5 * width;

  var a1 = state.left;
  var a2 = state.right;

  switch (state.join)
  {
    case join::miter:

      var p = normalise(state.forward);
      var q = normalise(forward);
      var u = perp(p, -q);

      state.raster.move_to(a1.x, a1.y);

      if (u != 0.0)
      {
        var p1 = (v1 + halfwidth * perp(p));
        var p3 = (v1 + halfwidth * perp(q));

        if (var s = perp(-q, vec(p3, p1)) / u; s > 0.0 && s < state.miter_limit)
        {
          var b1 = Q * (p1 + s * p);

          state.raster.line_to(b1.x, b1.y);
        }
      }

      state.raster.line_to(left.x, left.y);

      state.raster.move_to(right.x, right.y);

      if (u != 0.0)
      {
        var p2 = (v1 - halfwidth * perp(p));
        var p4 = (v1 - halfwidth * perp(q));

        if (var t = perp(-q, vec(p4, p2)) / u; t > 0.0 && t < state.miter_limit)
        {
          var b2 = Q * (p2 + t * p);

          state.raster.line_to(b2.x, b2.y);
        }
      }

      state.raster.line_to(a2.x, a2.y);

    case join::bevel:
      state.raster.move_to(a1.x, a1.y);
      state.raster.line_to(left.x, left.y);
      state.raster.move_to(right.x, right.y);
      state.raster.line_to(a2.x, a2.y);
  }

  state.left = left;
  state.right = right;
  state.forward = forward;
}

fn stroke_cap(state mut &state, gfx::transform &Q, gfx::point &a1, gfx::point &a2) -> void
{
  using lml;
  using std;

  state.raster.move_to(a1.x, a1.y);
  state.raster.line_to(a2.x, a2.y);
}

fn stroke_to(state mut &state, gfx::transform &Q, gfx::point &v1, gfx::point &v2, float width) -> void
{
  using lml;
  using std;

  if (coincident(v1, v2))
    return;

  var halfwidth = 0.5 * width;

  var oab = normalise(perp(vec(v1, v2)));

  var a1 = Q * (v1 + halfwidth * oab);
  var a2 = Q * (v1 - halfwidth * oab);

  switch (state.status)
  {
    case move_to:
      state.first_left = state.left = a1;
      state.first_right = state.right = a2;
      state.first_forward = state.forward = vec(v1, v2);

    case draw_to:
      stroke_join(&mut state, Q, state.cursor, a1, a2, vec(v1, v2), width);
  }
}

fn move_to(state mut &state, gfx::transform &Q, float x, float y) -> void
{
  switch (state.status)
  {
    case draw_to:
      stroke_cap(&mut state, Q, state.left, state.right);
      stroke_cap(&mut state, Q, state.first_right, state.first_left);
  }

  state.cursor = state.start = gfx::point(x, y);
  state.status = state::status::move_to;
}

fn line_to(state mut &state, gfx::transform &Q, float x, float y, float width) -> void
{
  stroke_to(&mut state, Q, state.cursor, gfx::point(x, y), width);

  stroke_line(&mut state, Q, state.cursor, gfx::point(x, y), width);

  state.cursor = gfx::point(x, y);
  state.status = state::status::draw_to;
}

fn quad_to(state mut &state, gfx::transform &Q, float x1, float y1, float x, float y, float width) -> void
{
  stroke_to(&mut state, Q, state.cursor, gfx::point(x1, y1), width);

  stroke_quad(&mut state, Q, state.cursor, gfx::point(x1, y1), gfx::point(x, y), width);

  state.cursor = gfx::point(x, y);
  state.status = state::status::draw_to;
}

fn cubic_to(state mut &state, gfx::transform &Q, float x1, float y1, float x2, float y2, float x, float y, float width) -> void
{
  stroke_to(&mut state, Q, state.cursor, gfx::point(x1, y1), width);

  stroke_cubic(&mut state, Q, state.cursor, gfx::point(x1, y1), gfx::point(x2, y2), gfx::point(x, y), width);

  state.cursor = gfx::point(x, y);
  state.status = state::status::draw_to;
}

fn conic_to(state mut &state, gfx::transform &Q, float x1, float y1, float x, float y, float w, float width) -> void
{
  stroke_to(&mut state, Q, state.cursor, gfx::point(x1, y1), width);

  stroke_conic(&mut state, Q, state.cursor, gfx::point(x1, y1), gfx::point(x, y), w, width);

  state.cursor = gfx::point(x, y);
  state.status = state::status::draw_to;
}

fn close(state mut &state, gfx::transform &Q, float width) -> void
{
  switch (state.status)
  {
    case draw_to:
      if (state.cursor != state.start)
        line_to(&mut state, Q, state.start.x, state.start.y, width);

      if (state.left != state.first_left || state.right != state.first_right)
        stroke_join(&mut state, Q, state.cursor, state.first_left, state.first_right, state.first_forward, width);
  }

  state.cursor = state.start;
  state.status = state::status::closed;
}

pub fn stroke_path(gfx::paint_t mut &ctx, gfx::rect &clip, gfx::transform &Q, gfx::path &path, gfx::pen &pen, gfx::blend mode = gfx::blend::source_over) -> void
{
  var state = state();

  state.cap = pen.cap;
  state.join = pen.join;
  state.miter_limit = pen.miter_limit;

  state.raster.clip(std::clamp(clip.left, 0.0, cast(ctx.width)), std::clamp(clip.top, 0.0, cast(ctx.height)), std::clamp(clip.right, 0.0, cast(ctx.width)), std::clamp(clip.bottom, 0.0, cast(ctx.height)));

  for (var &vertex : path.vertices)
  {
    switch (vertex)
    {
      case move_to[pt]:
        move_to(&mut state, Q, pt.x, pt.y);

      case line_to[pt]:
        line_to(&mut state, Q, pt.x, pt.y, pen.width);

      case quad_to[pt]:
        quad_to(&mut state, Q, pt.x1, pt.y1, pt.x, pt.y, pen.width);

      case cubic_to[pt]:
        cubic_to(&mut state, Q, pt.x1, pt.y1, pt.x2, pt.y2, pt.x, pt.y, pen.width);

      case conic_to[pt]:
        conic_to(&mut state, Q, pt.x1, pt.y1, pt.x, pt.y, pt.w, pen.width);

      case close:
        close(&mut state, Q, pen.width);
    }
  }

  move_to(&mut state, Q, state.start.x, state.start.y);

  var color = gfx::premultiply(pen.brush.rgba);

  state.raster.accumulate(|scanline| {

    var row = cast<u32 mut *>(ctx.data + cast<usize>(scanline.y) * ctx.stride);

    for (var span : scanline)
    {
      var alpha = lml::clamp(span.alpha * 255, 0, 255).as<u32>();

      if (alpha <= 0)
        continue;

      for (var x = cast<usize>(span.x), var end = cast<usize>(span.x) + span.len; x != end; ++x)
      {
        *(row + x) = gfx::blend(mode, *(row + x), gfx::premultiply(color, alpha));
      }
    }
  });
}

pub fn stroke_path(gfx::paint_t mut &ctx, gfx::transform &Q, gfx::path &path, gfx::pen &pen, gfx::blend mode = gfx::blend::source_over) -> void
{
  stroke_path(&mut ctx, gfx::rect(0.0, 0.0, cast(ctx.width), cast(ctx.height)), Q, path, pen, mode);
}

pub fn stroke_path(gfx::paint_t mut &ctx, gfx::path &path, gfx::pen &pen, gfx::blend mode = gfx::blend::source_over) -> void
{
  stroke_path(&mut ctx, gfx::transform::identity, path, pen, mode);
}

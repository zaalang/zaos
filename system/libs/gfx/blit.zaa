//
// gfx blit
//

import std.math;
import gfx.color;
import gfx.blend;

#if __cfg("arch.x86_64")

  fn repsto(u16 mut *dst, u16 value, usize n) -> void
  {
    __asm("rep stosw", "={di},={cx},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}", value, dst, n);
  }

  fn repsto(u32 mut *dst, u32 value, usize n) -> void
  {
    __asm("rep stosd", "={di},={cx},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}", value, dst, n);
  }

  fn repsto(u64 mut *dst, u64 value, usize n) -> void
  {
    __asm("rep stosq", "={di},={cx},{ax},0,1,~{memory},~{dirflag},~{fpsr},~{flags}", value, dst, n);
  }

#else

  fn repsto<T>(T mut *dst, T value, usize n) -> void
  {
    for (; n != 0; --n)
      *dst++ = value;
  }

#end

pub fn clear(gfx::paint_t &&ctx, u32 color) -> void
{
  var row = ctx.data;
  var color = gfx::premultiply(color);

  for (var j = 0; j < ctx.height; ++j)
  {
    repsto(cast<u32 mut *>(row), color, cast<usize>(ctx.width));

    row += ctx.stride;
  }
}

pub fn clear(gfx::paint_t &&ctx, gfx::color &color) -> void
{
  clear(ctx, color.rgba);
}

pub fn fill_rect(gfx::paint_t &&ctx, int x, int y, int width, int height, gfx::color &color, gfx::blend mode = gfx::blend::source_over) -> void
{
  var x0 = cast<usize>(std::max(x, 0));
  var y0 = cast<usize>(std::max(y, 0));

  if (x0 >= cast<usize>(ctx.width) || x + width <= 0)
    return;

  if (y0 >= cast<usize>(ctx.height) || y + height <= 0)
    return;

  var x1 = cast<usize>(std::min(x + width, ctx.width));
  var y1 = cast<usize>(std::min(y + height, ctx.height));

  var dstrow = ctx.data + y0 * ctx.stride;
  var color = gfx::premultiply(color.rgba);
  var alpha = color >> 24;

  switch (mode)
  {
    case source:
    case source_in:
    case source_out:

      if (alpha == 0x00)
        mode = gfx::blend::destination;

    case source_over:

      if (alpha == 0xff)
        mode = gfx::blend::source;

      if (alpha == 0x00)
        mode = gfx::blend::destination;
  }

  switch (mode)
  {
    case clear:

      for (var y = y0; y < y1; ++y)
      {
        repsto(cast<u32 mut *>(dstrow) + x0, 0x00000000, x1 - x0);

        dstrow += ctx.stride;
      }

    case source:

      for (var y = y0; y < y1; ++y)
      {
        repsto(cast<u32 mut *>(dstrow) + x0, color, x1 - x0);

        dstrow += ctx.stride;
      }

    case destination:
      ;

    case source_over:

      for (var y = y0; y < y1; ++y)
      {
        var dst = cast<u32 mut *>(dstrow) + x0;

        for (var x = x0; x < x1; ++x, ++dst)
        {
          *dst = std::add_with_carry(color, gfx::premultiply(*dst, 255 - alpha)).0;
        }

        dstrow += ctx.stride;
      }

    else:

      for (var y = y0; y < y1; ++y)
      {
        var dst = cast<u32 mut *>(dstrow) + x0;

        for (var x = x0; x < x1; ++x, ++dst)
        {
          *dst = gfx::blend(mode, *dst, color);
        }

        dstrow += ctx.stride;
      }
  }
}

pub fn draw_rect(gfx::paint_t &&ctx, int x, int y, int width, int height, gfx::color &color, int thickness = 1, gfx::blend mode = gfx::blend::source_over) -> void
{
  if (width <= 2*thickness || height <= 2*thickness)
  {
    fill_rect(ctx, x, y, width, height, color, mode);

    return;
  }

  fill_rect(ctx, x, y, width, thickness, color, mode);
  fill_rect(ctx, x, y + height - thickness, width, thickness, color, mode);
  fill_rect(ctx, x, y + thickness, thickness, height - 2*thickness, color, mode);
  fill_rect(ctx, x + width - thickness, y + thickness, thickness, height - 2*thickness, color, mode);
}

pub fn blit_glyph(gfx::paint_t &&ctx, int x, int y, u8 *data, usize width, usize height, gfx::color &color, gfx::blend mode = gfx::blend::source_over) -> void
{
  var x0 = cast<usize>(std::max(x, 0));
  var y0 = cast<usize>(std::max(y, 0));

  if (x0 >= cast<usize>(ctx.width) || x + cast(width) <= 0)
    return;

  if (y0 >= cast<usize>(ctx.height) || y + cast(height) <= 0)
    return;

  var i0 = cast<usize>(std::max(x, 0) - x);
  var j0 = cast<usize>(std::max(y, 0) - y);

  var x1 = cast<usize>(std::min(x + cast(width), ctx.width));
  var y1 = cast<usize>(std::min(y + cast(height), ctx.height));

  const preblend = [ // gamma hack to mitigate non linear blend
    [<u8>: 0x00,0x01,0x01,0x02,0x03,0x03,0x04,0x05,0x05,0x06,0x07,0x07,0x08,0x09,0x09,0x0a,0x0b,0x0b,0x0c,0x0d,0x0d,0x0e,0x0f,0x0f,0x10,0x11,0x11,0x12,0x13,0x13,0x14,0x15,0x15,0x16,0x17,0x17,0x18,0x19,0x19,0x1a,0x1b,0x1c,0x1c,0x1d,0x1e,0x1e,0x1f,0x20,0x20,0x21,0x22,0x22,0x23,0x24,0x24,0x25,0x26,0x27,0x27,0x28,0x29,0x29,0x2a,0x2b,0x2b,0x2c,0x2d,0x2e,0x2e,0x2f,0x30,0x30,0x31,0x32,0x33,0x33,0x34,0x35,0x35,0x36,0x37,0x38,0x38,0x39,0x3a,0x3a,0x3b,0x3c,0x3d,0x3d,0x3e,0x3f,0x40,0x40,0x41,0x42,0x42,0x43,0x44,0x45,0x45,0x46,0x47,0x48,0x48,0x49,0x4a,0x4b,0x4b,0x4c,0x4d,0x4e,0x4e,0x4f,0x50,0x51,0x51,0x52,0x53,0x54,0x54,0x55,0x56,0x57,0x58,0x58,0x59,0x5a,0x5b,0x5b,0x5c,0x5d,0x5e,0x5f,0x5f,0x60,0x61,0x62,0x63,0x63,0x64,0x65,0x66,0x67,0x67,0x68,0x69,0x6a,0x6b,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x70,0x71,0x72,0x73,0x74,0x75,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7c,0x7d,0x7e,0x7f,0x80,0x81,0x82,0x83,0x84,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xae,0xaf,0xb0,0xb1,0xb3,0xb4,0xb5,0xb6,0xb8,0xb9,0xbb,0xbc,0xbd,0xbf,0xc0,0xc2,0xc3,0xc5,0xc7,0xc8,0xca,0xcc,0xce,0xd0,0xd1,0xd4,0xd6,0xd8,0xda,0xdd,0xdf,0xe2,0xe6,0xe9,0xed,0xf2,0xf9,0xff],
    [<u8>: 0x00,0x01,0x02,0x02,0x03,0x04,0x05,0x05,0x06,0x07,0x08,0x08,0x09,0x0a,0x0b,0x0c,0x0c,0x0d,0x0e,0x0f,0x0f,0x10,0x11,0x12,0x13,0x13,0x14,0x15,0x16,0x17,0x17,0x18,0x19,0x1a,0x1a,0x1b,0x1c,0x1d,0x1e,0x1e,0x1f,0x20,0x21,0x22,0x22,0x23,0x24,0x25,0x26,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2b,0x2c,0x2d,0x2e,0x2f,0x2f,0x30,0x31,0x32,0x33,0x34,0x34,0x35,0x36,0x37,0x38,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3d,0x3e,0x3f,0x40,0x41,0x42,0x43,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5d,0x5e,0x5f,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xad,0xae,0xaf,0xb0,0xb1,0xb2,0xb3,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbc,0xbd,0xbe,0xbf,0xc0,0xc2,0xc3,0xc4,0xc5,0xc7,0xc8,0xc9,0xca,0xcc,0xcd,0xce,0xd0,0xd1,0xd2,0xd3,0xd5,0xd6,0xd7,0xd9,0xda,0xdc,0xdd,0xde,0xe0,0xe1,0xe3,0xe4,0xe6,0xe7,0xe9,0xea,0xec,0xed,0xef,0xf0,0xf2,0xf3,0xf5,0xf7,0xf8,0xfa,0xfc,0xfd,0xff],
    [<u8>: 0x00,0x01,0x02,0x03,0x04,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0d,0x0e,0x0f,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x41,0x42,0x43,0x44,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9e,0x9f,0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae,0xaf,0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,0xc0,0xc1,0xc2,0xc3,0xc4,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,0xd0,0xd1,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdd,0xde,0xdf,0xe0,0xe1,0xe2,0xe3,0xe4,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xee,0xef,0xf0,0xf1,0xf2,0xf3,0xf4,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfd,0xfe,0xff],
    [<u8>: 0x00,0x01,0x02,0x03,0x04,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1c,0x1d,0x1e,0x1f,0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x60,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8a,0x8b,0x8c,0x8d,0x8e,0x8f,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9a,0x9b,0x9c,0x9d,0x9e,0x9f,0xa0,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xaa,0xab,0xac,0xad,0xae,0xaf,0xb0,0xb1,0xb2,0xb3,0xb4,0xb5,0xb6,0xb7,0xb8,0xb9,0xba,0xbb,0xbc,0xbd,0xbe,0xbf,0xc0,0xc1,0xc1,0xc2,0xc3,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,0xd0,0xd1,0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8,0xd9,0xda,0xdb,0xdc,0xdd,0xdd,0xde,0xdf,0xe0,0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf0,0xf1,0xf2,0xf2,0xf3,0xf4,0xf5,0xf6,0xf7,0xf8,0xf9,0xfa,0xfb,0xfb,0xfc,0xfd,0xfe,0xff],
  ];

  var luma = cast<usize>(3.5*(0.299*color.r + 0.587*color.g + 0.114*color.b)) & 0x3;

  var srcrow = data + j0 * width;
  var dstrow = ctx.data + y0 * ctx.stride;
  var color = gfx::premultiply(color.rgba);

  for (var y = y0; y < y1; ++y)
  {
    var src = srcrow + i0;
    var dst = cast<u32 mut *>(dstrow) + x0;

    for (var x = x0; x < x1; ++x, ++src, ++dst)
    {
      if (*src == 0x00)
        continue;

      //*dst = gfx::blend(mode, *dst, gfx::premultiply(color, *src));
      *dst = gfx::blend(mode, *dst, gfx::premultiply(color, preblend[luma][cast<usize>(*src)]));
    }

    srcrow += width;
    dstrow += ctx.stride;
  }
}

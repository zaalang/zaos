//
// zidl diag
//

import std.stdio;
import std.string : String;
import std.algorithm;
import zidl.lexer : source_text, source_location;

pub struct diag
{
  const red = "\x1b[01;31m";
  const cyan = "\x1b[01;36m";
  const green = "\x1b[01;32m";
  const white = "\x1b[01;37m";
  const normal = "\x1b[0m";

  bool colored;
  std::string leader;

  bool errored;
  std::string text;

  pub fn info(this mut &, String &msg) -> void
  {
    std::sprint(&mut this.text, white, this.leader, ": ", normal, msg, '\n');
  }

  pub fn warn(this mut &, String &msg) -> void
  {
    std::sprint(&mut this.text, white, this.leader, ": ", normal, "warning: ", msg, '\n');
  }

  pub fn error(this mut &, String &msg) -> void
  {
    std::sprint(&mut this.text, white, this.leader, ": ", red, "error: ", normal, msg, '\n');

    this.errored = true;
  }

  pub fn warn(this mut &, String &msg, source_text &text, source_location loc) -> void
  {
    std::sprint(&mut this.text, white, text.path, ":", loc, ": ", normal, "warning: ", msg, '\n');

    show_source(&mut this, text, loc);
  }

  pub fn error(this mut &, String &msg, source_text &text, source_location loc) -> void
  {
    std::sprint(&mut this.text, white, text.path, ":", loc, ": ", red, "error: ", normal, msg, '\n');

    show_source(&mut this, text, loc);

    this.errored = true;
  }

  pub fn has_errored(this&) -> bool
  {
    return this.errored;
  }

  pub diag(String &&leader)
  {
    this.colored = true;
    this.leader = &&leader;
  }

  pub fn show_source(this mut &, source_text &text, source_location loc) -> void
  {
    var beg = text.head;

    for(var i = 1; i < loc.lineno; ++i)
      beg = std::find(beg, text.tail, cast<u8>('\n')) + 1;

    var end = std::find(beg, text.tail, cast<u8>('\n'));

    if (*(end - 1) == cast('\r'))
      end -= 1;

    std::sprintf(&mut this.text, "  {}{}\n", cyan, std::string_view(beg, end));
    std::sprintf(&mut this.text, "  {}{:*}^\n", green, loc.charpos - 1, "");
    std::sprintf(&mut this.text, "{}", normal);
  }

  pub diag(diag&) = default;
  pub fn =(diag mut &, diag &) -> diag mut & = default;
  pub ~diag() = default;
}

pub fn fmt<T>(std::OutputStream mut &os, std::fmt_context mut &ctx, diag &diag) throws -> void
{
  ctx.written += std::print_to(&mut os, diag.text);
}

//
// fd
//

import os.zaos.fcntl;

enum filetype
{
  unknown,
  block_device,
  character_device,
  directory,
  regular,
  socket_dgram,
  socket_stream,
  symlink,
}

struct filestat
{
  u8 type;
  u64 size;
  u64 atime;
  u64 mtime;
  u64 ctime;
}

struct iovec
{
  u8 mut *data;
  usize len;
}

struct ciovec
{
  u8 *data;
  usize len;
}

struct string
{
  u8 *data;
  usize len;
}

struct fd
{
  enum oflags
  {
    const open = 0x0;
    const create = 0x01;
    const exclusive = 0x02;
    const trunc = 0x04;
  }

  enum rights
  {
    const read = 0x01;
    const write = 0x02;
  }

  enum fdflags
  {
    const append = 0x01;
    const dsync = 0x02;
    const nonblock = 0x04;
    const rsync = 0x08;
    const sync = 0x10;
  }
}

struct fd_result
{
  u32 errno;
  usize length;

  fd_result() = default;
  fd_result(fd_result&) = default;
  ~fd_result() = default;
}

extern fn thread_ring() -> os::ioring mut &;

extern fn fd_open(uintptr mut *fd, string path, u32 oflags, u64 rights, u32 fdflags) -> u32
{
  using os;

  var flags = 0;

  if (oflags & fd::oflags::create == fd::oflags::create)
    flags |= O_CREAT;

  if (oflags & fd::oflags::exclusive == fd::oflags::exclusive)
    flags |= O_EXCL;

  if (oflags & fd::oflags::trunc == fd::oflags::trunc)
    flags |= O_TRUNC;

  if (fdflags & fd::fdflags::append == fd::fdflags::append)
    flags |= O_APPEND;

  if (rights & (fd::rights::read | fd::rights::write) == fd::rights::read)
    flags |= O_RDONLY;

  if (rights & (fd::rights::read | fd::rights::write) == fd::rights::write)
    flags |= O_WRONLY;

  if (rights & (fd::rights::read | fd::rights::write) == (fd::rights::read | fd::rights::write))
    flags |= O_RDWR;

  var rc = open(&mut thread_ring, os::string(path.data, path.len), flags, 0o666);

  if (rc < 0)
    return cast(-rc);

  *fd = cast(rc);

  return 0;
}

extern fn fd_stat(uintptr fd, filestat mut *fs) -> u32
{
  var buf = os::stat(void);

  if (var rc = os::stat(&mut thread_ring, cast(fd), &buf, 0x7f); rc < 0)
    return cast(-rc);

  fs.size = buf.size;
  fs.type = cast(buf.type);
  fs.atime = cast(buf.mtime);
  fs.ctime = cast(buf.ctime);
  fs.mtime = cast(buf.mtime);

  return 0;
}

fn read(i32 fd, u8 mut *buffer, usize length) -> i32
{
  using os;

  var bytes = os::read(&mut thread_ring, fd, buffer, length);

  while (bytes == EAGAIN)
  {
    var pollset = [ os::pollevt(fd, POLLFD, POLLIN, 0) ];

    os::select(&mut thread_ring, pollset.data, pollset.len, ~0);

    bytes = os::read(&mut thread_ring, fd, buffer, length);
  }

  return bytes;
}

extern fn fd_read(uintptr fd, u8 mut *buffer, usize length) -> fd_result
{
  var result = fd_result();

  var bytes = read(cast(fd), buffer, length);

  if (bytes < 0)
  {
    result.errno = cast(-bytes);

    return result;
  }

  result.length = cast(bytes);

  return result;
}

fn readv(i32 fd, os::iovec mut *iovs, usize n) -> i32
{
  using os;

  var bytes = os::readv(&mut thread_ring, fd, iovs, n);

  while (bytes == EAGAIN)
  {
    var pollset = [ os::pollevt(fd, POLLFD, POLLIN, 0) ];

    os::select(&mut thread_ring, pollset.data, pollset.len, ~0);

    bytes = os::readv(&mut thread_ring, fd, iovs, n);
  }

  return bytes;
}

extern fn fd_readv(uintptr fd, iovec mut *iovs, usize n) -> fd_result
{
  var result = fd_result();

  var bytes = readv(cast(fd), cast(iovs), n);

  if (bytes < 0)
  {
    result.errno = cast(-bytes);

    return result;
  }

  result.length = cast(bytes);

  return result;
}

fn preadv(i32 fd, os::iovec mut *iovs, usize n, u64 offset) -> i32
{
  using os;

  var bytes = os::preadv(&mut thread_ring, fd, iovs, n, offset);

  while (bytes == EAGAIN)
  {
    var pollset = [ os::pollevt(fd, POLLFD, POLLIN, 0) ];

    os::select(&mut thread_ring, pollset.data, pollset.len, ~0);

    bytes = os::preadv(&mut thread_ring, fd, iovs, n, offset);
  }

  return bytes;
}

extern fn fd_preadv(uintptr fd, iovec mut *iovs, usize n, u64 offset) -> fd_result
{
  var result = fd_result();

  var bytes = preadv(cast(fd), cast(iovs), n, offset);

  if (bytes < 0)
  {
    result.errno = cast(-bytes);

    return result;
  }

  result.length = cast(bytes);

  return result;
}

fn write(i32 fd, u8 *buffer, usize length) -> i32
{
  using os;

  var bytes = os::write(&mut thread_ring, fd, buffer, length);

  while (bytes == EAGAIN)
  {
    var pollset = [ os::pollevt(fd, POLLFD, POLLOUT, 0) ];

    os::select(&mut thread_ring, pollset.data, pollset.len, ~0);

    bytes = os::write(&mut thread_ring, fd, buffer, length);
  }

  return bytes;
}

extern fn fd_write(uintptr fd, u8 *buffer, usize length) -> fd_result
{
  var result = fd_result();

  while (length != 0)
  {
    var bytes = write(cast(fd), buffer, length);

    if (bytes < 0)
    {
      result.errno = cast(-bytes);

      return result;
    }

    result.length += cast(bytes);

    buffer += cast(bytes);
    length -= cast(bytes);
  }

  return result;
}

fn writev(i32 fd, os::ciovec *iovs, usize n) -> i32
{
  using os;

  var bytes = os::writev(&mut thread_ring, fd, iovs, n);

  while (bytes == EAGAIN)
  {
    var pollset = [ os::pollevt(fd, POLLFD, POLLOUT, 0) ];

    os::select(&mut thread_ring, pollset.data, pollset.len, ~0);

    bytes = os::writev(&mut thread_ring, fd, iovs, n);
  }

  return bytes;
}

extern fn fd_writev(uintptr fd, ciovec *iovs, usize n) -> fd_result
{
  var result = fd_result();

  while (n != 0)
  {
    var bytes = writev(cast(fd), cast(iovs), n);

    if (bytes < 0)
    {
      result.errno = cast(-bytes);

      return result;
    }

    result.length = cast(bytes);

    for (; n != 0 && iovs.len <= cast(bytes); ++iovs, --n)
    {
      bytes -= cast(iovs.len);
    }

    if (bytes != 0)
    {
      for (var i = cast<usize>(bytes); i < iovs.len; )
      {
        bytes = write(cast(fd), iovs.data + i, iovs.len - i);

        if (bytes < 0)
        {
          result.errno = cast(-bytes);

          return result;
        }

        result.length = cast(bytes);

        i += cast(bytes);
      }

      ++iovs;
      --n;
    }
  }

  return result;
}

fn pwritev(i32 fd, os::ciovec *iovs, usize n, u64 offset) -> i32
{
  using os;

  var bytes = os::pwritev(&mut thread_ring, fd, iovs, n, offset);

  while (bytes == EAGAIN)
  {
    var pollset = [ os::pollevt(fd, POLLFD, POLLOUT, 0) ];

    os::select(&mut thread_ring, pollset.data, pollset.len, ~0);

    bytes = os::pwritev(&mut thread_ring, fd, iovs, n, offset);
  }

  return bytes;
}

extern fn fd_pwritev(uintptr fd, ciovec *iovs, usize n, u64 offset) -> fd_result
{
  var result = fd_result();

  var bytes = pwritev(cast(fd), cast(iovs), n, offset);

  if (bytes < 0)
  {
    result.errno = cast(-bytes);

    return result;
  }

  result.length = cast(bytes);

  return result;
}

extern fn fd_close(uintptr fd) -> u32
{
  os::close(&mut thread_ring, cast(fd));

  return 0;
}

//
// start
//

import elf;
import elf.auxvec;
import os.zaos.fcntl;

pub struct arg
{
  pub u8 *beg;
  pub u8 *end;
}

pub struct tls_module
{
  pub uintptr base;
  pub uintptr vaddr;
  pub usize len;
  pub usize size;
  pub usize align;
}

pub struct thread_data
{
  thread_data mut *self;
  uintptr[2] mut *dtv;
  uintptr[3] pad;
  uintptr canary;

  pub i32 rootfd;
  pub os::ioring ring;

  u8[104] bytes;
}

extern fn exit(i32 result) -> void;
extern fn main(int argc, arg *argv, arg *envp) -> i32;
extern fn memset(void mut *dst, int c, usize n) -> void mut *;
extern fn memcpy(void mut *dst, void *src, usize n) -> void mut *;

extern fn tls_module() -> tls_module mut *
{
  static tls = [<u8>: 0; sizeof<tls_module>];

  return cast<tls_module mut *>(&tls);
}

extern fn tls_area(arg *envp) -> usize
{
  var envc = 0;
  while ((envp + envc).beg)
    ++envc;

  var auxv = cast<elf::auxval*>(envp + envc + 1);

  var phdr = 0;
  var phnum = 0;
  var phent = 0;

  for(var entry = auxv; entry.type != cast(0); ++entry)
  {
    switch (entry.type)
    {
      case PHDR:
        phdr = entry.value;

      case PHENT:
        phent = cast<usize>(entry.value);

      case PHNUM:
        phnum = cast<usize>(entry.value);
    }
  }

  var tls = tls_module();

  for(var i = 0; i < phnum; ++i)
  {
    var entry = cast<elf::elf64_phdr*>(phdr + i*phent);

    switch (entry.p_type)
    {
      case elf::elf64_ptype::PHDR:
        tls.base = phdr - cast(entry.p_vaddr);

      case elf::elf64_ptype::TLS:
        tls.vaddr = cast(entry.p_vaddr);
        tls.len = cast(entry.p_filesz);
        tls.size = cast(entry.p_memsz);
        tls.align = cast(entry.p_align);
    }
  }

  if (tls.align < 1)
    tls.align = 1;

  tls.size = (tls.size + tls.align - 1) & -tls.align;

  return 2*sizeof<void*> + sizeof<thread_data> + tls.size + tls.align;
}

extern fn init_tcb(void mut *memory, arg *envp) -> void
{
  var tls = tls_module();
  var tlsbase = (cast<uintptr>(memory) + tls.align - 1) & -tls.align;
  var dtv = cast<uintptr[2] mut *>(tlsbase + tls.size + sizeof<thread_data>);
  var td = cast<thread_data mut *>(tlsbase + tls.size);

  dtv[0] = 1;
  dtv[1] = tlsbase;
  memset(cast<void mut *>(tlsbase), 0, tls.size);
  memcpy(cast<void mut *>(tlsbase), cast<void*>(tls.base + tls.vaddr), tls.len);

  td.self = td;
  td.canary = 0xdeadbeef;
  td.dtv = dtv;

  var envc = 0;
  while ((envp + envc).beg)
    ++envc;

  var auxv = cast<elf::auxval*>(envp + envc + 1);

  for(var entry = auxv; entry.type != cast(0); ++entry)
  {
    switch (entry.type)
    {
      case ROOTFD:
        td.rootfd = cast<i32>(entry.value);

      case RINGFD:
        td.ring.fd = cast<i32>(entry.value);

      case RINGHDR:
        td.ring.header = cast<os::ioring_header mut *>(entry.value);
    }
  }

  __asm("wrfsbase $0", "r", td);
}

extern fn thread_self() -> thread_data mut *
{
  return cast<thread_data mut *>(__asm("mov $0, fs:0", "=r"));
}

extern fn thread_ring() -> os::ioring mut &
{
  return &thread_self.ring;
}

extern fn __start(int argc, arg *argv, arg *envp) -> void
{
  init_tcb(__alloca(tls_area(envp)), envp);

  exit(main(argc, argv, envp));
}

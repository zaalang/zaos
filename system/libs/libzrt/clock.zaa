//
// clock
//

import os.zaos.time;

enum clockid
{
  const realtime = 0;
  const monotonic = 1;
}

struct clk_result
{
  u32 errno;
  u64 timespec;

  clk_result() = default;
  clk_result(clk_result&) = default;
  ~clk_result() = default;
}

extern fn clk_getres(u32 clockid) -> clk_result
{
  var result = clk_result();

  switch (clockid)
  {
    case clockid::realtime:
      if (var res = os::clock_res(os::clock::realtime, &result.timespec); res < 0)
        result.errno = cast(-res);

    case clockid::monotonic:
      if (var res = os::clock_res(os::clock::monotonic, &result.timespec); res < 0)
        result.errno = cast(-res);

    else:
      result.errno = 22;
  }

  return result;
}

extern fn clk_gettime(u32 clockid) -> clk_result
{
  var result = clk_result();

  switch (clockid)
  {
    case clockid::realtime:
      if (var res = os::clock_time(os::clock::realtime, &result.timespec); res < 0)
        result.errno = cast(-res);

    case clockid::monotonic:
      if (var res = os::clock_time(os::clock::monotonic, &result.timespec); res < 0)
        result.errno = cast(-res);

    else:
      result.errno = 22;
  }

  return result;
}

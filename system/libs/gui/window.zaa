//
// gui window
//

import std.stdlib;
import gui.application;
import gui.display as display;
import gui.bits.frame as frame;

pub using display::button;
pub using display::modifiers;
pub using display::key_event;
pub using display::focus_event;
pub using display::pointer_event;
pub using display::configure_event;
pub using display::resize_event;
pub using display::buffer;

pub vtable iwindow : display::isurface
{
}

pub struct window : pub display::surface
{
  pub fn create(i32 width, i32 height) throws(std::error) -> window
  {
    var window = window();

    window.create(width, height);

    return window;
  }

  pub fn create(this mut &, i32 width, i32 height) throws(std::error) -> void
  {
    var flags = display::surface::flags::close_button | display::surface::flags::minimise_button | display::surface::flags::maximise_button | display::surface::flags::resizeable;

    width += frame::interior_left + frame::interior_right;
    height += frame::interior_top + frame::interior_bottom;

    this.create(gui::conn, flags);
    this.set_minimum_size(128, 42);

    this.schedule_resize(width, height);
  }

  pub fn configure_event(this mut &, configure_event &) -> void
  {
  }

  pub fn motion_event(this mut &, pointer_event &) -> void
  {
    this.set_cursor(gui::cursor::arrow);
  }

  pub fn button_event(this mut &, pointer_event &) -> void
  {
  }

  pub fn wheel_event(this mut &, pointer_event &) -> void
  {
  }

  pub fn focus_event(this mut &, focus_event &) -> void
  {
  }

  pub fn key_event(this mut &, key_event &) -> void
  {
  }

  pub fn paint_event(this mut &, display::buffer mut &, gui::rectset &) -> void
  {
  }

  pub fn resize_event(this mut &, resize_event &) -> void
  {
  }

  pub fn close_event(this mut &) -> void
  {
  }

  pub window(iwindow &iwindow)
    : super(iwindow)
  {
  }

  pub window()
    : this(&impl this)
  {
  }

  pub ~window() = default;
}

//
// acpi fadt
//

import acpi;
import std.memory;

const ACPI_FADT_SIGNATURE = "FACP";
const ACPI_FACS_SIGNATURE = "FACS";
const ACPI_DSDT_SIGNATURE = "DSDT";
const ACPI_SSDT_SIGNATURE = "SSDT";

#[packed]
pub struct gas
{
  pub u8 address_space_id;
  pub u8 register_bit_length;
  pub u8 register_bit_offset;
  pub u8 access_width;
  pub u64 address;

  pub gas() = default;
  pub gas(gas &) = default;
  pub fn =(gas mut &, gas &) -> gas mut & = default;
  pub ~gas() = default;
}

pub const fadt_c1_supported = 0x4;
pub const fadt_c2_mp_supported = 0x8;
pub const fadt_power_button = 0x10;
pub const fadt_sleep_button = 0x20;
pub const fadt_fixed_rtc = 0x40;
pub const fadt_hw_reduced = 0x100000;

pub enum pm1
{
  pub const timer_status = 0x1;
  pub const bus_master_status = 0x10;
  pub const global_lock_status = 0x20;
  pub const power_button_status = 0x100;
  pub const sleep_button_status = 0x200;
  pub const realtime_clock_status = 0x400;
  pub const pciexp_wake_status = 0x4000;
  pub const wake_status = 0x8000;

  pub const timer_enable = 0x1;
  pub const global_lock_enable = 0x20;
  pub const power_button_enable = 0x100;
  pub const sleep_button_enable = 0x200;
  pub const realtime_clock_enable = 0x400;
  pub const pciexp_wake_disable = 0x4000;

  pub const sci_enable = 0x1;
  pub const bus_master_rld = 0x2;
  pub const global_lock_release = 0x4;
  pub const sleep_type = 0x1c00;
  pub const sleep_enable = 0x2000;

  pub const control_writeonly_bits = 0x2004;
}

#[packed]
pub struct fadt : pub acpi::sdt
{
  pub u32 facs;
  pub u32 dsdt;
  pub u8 reserved;
  pub u8 preferred_pm_profile;
  pub u16 sci_interrupt;
  pub u32 smi_command;
  pub u8 acpi_enable;
  pub u8 acpi_disable;
  pub u8 s4bios_reqest;
  pub u8 pstate_control;
  pub u32 pm1a_event_block;
  pub u32 pm1b_event_block;
  pub u32 pm1a_control_block;
  pub u32 pm1b_control_block;
  pub u32 pm2_control_block;
  pub u32 pmtimer_block;
  pub u32 gpe0_block;
  pub u32 gpe1_block;
  pub u8 pm1_event_length;
  pub u8 pm1_control_length;
  pub u8 pm2_control_length;
  pub u8 pmtimer_block_length;
  pub u8 gpe0_block_length;
  pub u8 gpe1_block_length;
  pub u8 gpe1_base;
  pub u8 cstate_control;
  pub u16 worst_c2_latency;
  pub u16 worst_c3_latency;
  pub u16 flush_size;
  pub u16 flush_stride;
  pub u8 duty_offset;
  pub u8 duty_width;
  pub u8 day_alarm;
  pub u8 month_alarm;
  pub u8 century;
  pub u16 iapc_boot_flags;
  pub u8 reserved2;
  pub u32 flags;
  pub gas reset_register;
  pub u8 reset_value;
  pub u16 arm_boot_flags;
  pub u8 minor_version;
  pub u64 x_facs;
  pub u64 x_dsdt;
  pub gas x_pm1a_event_block;
  pub gas x_pm1b_event_block;
  pub gas x_pm1a_control_block;
  pub gas x_pm1b_control_block;
  pub gas x_pm2_control_block;
  pub gas x_pmtimer_block;
  pub gas x_gpe0_block;
  pub gas x_gpe1_block;

  pub fn facs_address(this &fadt) -> uintptr
  {
    if (fadt.x_facs != 0)
      return cast<uintptr>(fadt.x_facs);

    return cast<uintptr>(fadt.facs);
  }

  pub fn dsdt_address(this &fadt) -> uintptr
  {
    if (fadt.x_dsdt != 0)
      return cast<uintptr>(fadt.x_dsdt);

    return cast<uintptr>(fadt.dsdt);
  }

  pub fn x_pm1a_status_block(this &fadt) -> gas
  {
    var addr = gas();

    addr.address_space_id = fadt.x_pm1a_event_block.address_space_id;
    addr.register_bit_length = fadt.x_pm1a_event_block.register_bit_length / 2;
    addr.register_bit_offset = fadt.x_pm1a_event_block.register_bit_offset;
    addr.access_width = fadt.x_pm1a_event_block.access_width;
    addr.address = fadt.x_pm1a_event_block.address;

    return addr;
  }

  pub fn x_pm1a_enable_block(this &fadt) -> gas
  {
    var addr = gas();

    addr.address_space_id = fadt.x_pm1a_event_block.address_space_id;
    addr.register_bit_length = fadt.x_pm1a_event_block.register_bit_length / 2;
    addr.register_bit_offset = fadt.x_pm1a_event_block.register_bit_offset + fadt.x_pm1a_event_block.register_bit_length / 2;
    addr.access_width = fadt.x_pm1a_event_block.access_width;
    addr.address = fadt.x_pm1a_event_block.address;

    return addr;
  }

  pub fn x_pm1b_status_block(this &fadt) -> gas
  {
    var addr = gas();

    addr.address_space_id = fadt.x_pm1b_event_block.address_space_id;
    addr.register_bit_length = fadt.x_pm1b_event_block.register_bit_length / 2;
    addr.register_bit_offset = fadt.x_pm1b_event_block.register_bit_offset;
    addr.access_width = fadt.x_pm1b_event_block.access_width;
    addr.address = fadt.x_pm1b_event_block.address;

    return addr;
  }

  pub fn x_pm1b_enable_block(this &fadt) -> gas
  {
    var addr = gas();

    addr.address_space_id = fadt.x_pm1b_event_block.address_space_id;
    addr.register_bit_length = fadt.x_pm1b_event_block.register_bit_length / 2;
    addr.register_bit_offset = fadt.x_pm1b_event_block.register_bit_offset + fadt.x_pm1b_event_block.register_bit_length / 2;
    addr.access_width = fadt.x_pm1b_event_block.access_width;
    addr.address = fadt.x_pm1b_event_block.address;

    return addr;
  }

  pub fn x_gpe0_status_block(this &fadt, u8 i) -> gas
  {
    var addr = acpi::gas();

    addr.address_space_id = fadt.x_gpe0_block.address_space_id;
    addr.register_bit_length = 8;
    addr.register_bit_offset = 0;
    addr.address = fadt.x_gpe0_block.address + cast(i);

    return addr;
  }

  pub fn x_gpe0_enable_block(this &fadt, u8 i) -> gas
  {
    var addr = acpi::gas();

    addr.address_space_id = fadt.x_gpe0_block.address_space_id;
    addr.register_bit_length = 8;
    addr.register_bit_offset = 0;
    addr.address = fadt.x_gpe0_block.address + cast(i + fadt.gpe0_block_length / 2);

    return addr;
  }

  pub fn x_gpe1_status_block(this &fadt, u8 i) -> gas
  {
    var addr = acpi::gas();

    addr.address_space_id = fadt.x_gpe1_block.address_space_id;
    addr.register_bit_length = 8;
    addr.register_bit_offset = 0;
    addr.address = fadt.x_gpe1_block.address + cast(i);

    return addr;
  }

  pub fn x_gpe1_enable_block(this &fadt, u8 i) -> gas
  {
    var addr = acpi::gas();

    addr.address_space_id = fadt.x_gpe1_block.address_space_id;
    addr.register_bit_length = 8;
    addr.register_bit_offset = 0;
    addr.address = fadt.x_gpe1_block.address + cast(i + fadt.gpe1_block_length / 2);

    return addr;
  }
}

pub fn find_fadt(acpi::tables &tables) -> fadt *
{
  return tables.find<fadt>(ACPI_FADT_SIGNATURE);
}

pub fn find_fadt(uintptr physical_base, uintptr acpi_root) -> fadt *
{
  return acpi::tables(physical_base, acpi_root).find<fadt>(ACPI_FADT_SIGNATURE);
}

pub fn validate_fadt(fadt *fadt) -> acpi::result
{
  if (!fadt)
    return not_found;

  if (std::memcmp(fadt, ACPI_FADT_SIGNATURE.data, ACPI_FADT_SIGNATURE.len) != 0)
    return invalid_signature;

  var checksum = u8(0);
  for (var ch = cast<u8*>(fadt); ch != cast<u8*>(fadt) + cast<usize>(fadt.length); ++ch)
    checksum = __add_with_carry(checksum, *ch).0;

  if (checksum != 0)
    return invalid_checksum;

  return ok;
}

//
// acpi madt
//

import acpi.rsdp;
import std.memory;
import std.range;

const ACPI_MADT_SIGNATURE = "APIC";

#[packed]
pub struct apic
{
  pub enum type : pub u8
  {
    local_apic = 0,
    io_apic = 1,
    interrupt_source_override = 2,
    nmi_source = 3,
    local_apic_nmi = 4,
    local_apic_address_override = 5,
    io_sapic = 6,
    local_sapic = 7,
    platform_interrupt_source = 8,
    local_x2apic = 9,
    local_x2apic_nmi = 10,
  }

  pub type type;
  pub u8 length;
}

#[packed]
pub struct local_apic : pub apic
{
  pub u8 processor_id;
  pub u8 apic_id;
  pub u32 flags;
}

#[packed]
pub struct io_apic : pub apic
{
  pub u8 apic_id;
  pub u8[1] reserved;
  pub u32 apic_address;
  pub u32 interrupt_base;
}

#[packed]
pub struct interrupt_source_override : pub apic
{
  pub u8 bus;
  pub u8 source;
  pub u32 interrupt;
  pub u16 flags;
}

#[packed]
pub struct nmi_source : pub apic
{
  pub u16 flags;
  pub u32 interrupt;
}

#[packed]
pub struct local_apic_nmi : pub apic
{
  pub u8 processor_id;
  pub u16 flags;
  pub u8 local_interrupt;
}

#[packed]
pub struct local_apic_address_override : pub apic
{
  pub u8[2] reserved;
  pub u64 apic_address;
}

#[packed]
pub struct io_sapic : pub apic
{
  pub u8 apic_id;
  pub u8[1] reserved;
  pub u32 interrupt_base;
  pub u64 sapic_address;
}

#[packed]
pub struct local_sapic : pub apic
{
  pub u8 processor_id;
  pub u8 sapic_id;
  pub u8 sapic_eid;
  pub u8[3] reserved;
  pub u32 flags;
}

#[packed]
pub struct platform_interrupt_source : pub apic
{
  pub u16 flags;
  pub u8 interrupt_type;
  pub u8 processor_id;
  pub u8 processor_eid;
  pub u8 sapic_vector;
  pub u32 interrupt;
  pub u32 interrupt_flags;
}

#[packed]
pub struct local_x2apic : pub apic
{
  pub u8[2] reserved;
  pub u32 apic_id;
  pub u32 flags;
  pub u32 processor_uid;
}

#[packed]
pub struct local_x2apic_nmi : pub apic
{
  pub u16 flags;
  pub u32 processor_uid;
  pub u8 local_interrupt;
  pub u8[3] reserved;
}

#[packed]
pub struct madt : pub acpi::sdt
{
  pub u32 local_apic_address;
  pub u32 flags;

  pub struct apic_iterator
  {
    pub apic_iterator() = default;
    pub apic_iterator(apic_iterator&) = default;
    pub fn =(apic_iterator mut &this, apic_iterator &that) -> apic_iterator mut & = default;
    pub ~apic_iterator() = default;

    pub fn ++(apic_iterator mut &this) -> apic_iterator mut &
    {
      this.cursor = cast<apic*>(cast<uintptr>(this.cursor) + cast<usize>(this.cursor.length));

      return &this;
    }

    pub fn ==(apic_iterator lhs, apic_iterator rhs) -> bool
    {
      return lhs.cursor == rhs.cursor;
    }

    apic_iterator(apic *cursor)
      : cursor(cursor)
    {
    }

    apic *cursor;
  }

  pub fn [](this &, apic_iterator iter) -> apic *
  {
    return iter.cursor;
  }

  pub fn entries(this &)
  {
    return std::range_view(&this, apic_iterator(cast<apic*>(&this + 1)), apic_iterator(cast<apic*>(cast<uintptr>(&this) + cast<usize>(this.length))));
  }
}

pub fn find_madt(acpi::tables &tables) -> madt *
{
  return tables.find<madt>(ACPI_MADT_SIGNATURE);
}

pub fn find_madt(uintptr physical_base, uintptr acpi_root) -> madt *
{
  return acpi::tables(physical_base, acpi_root).find<madt>(ACPI_MADT_SIGNATURE);
}

pub fn validate_madt(madt *madt) -> acpi::result
{
  if (!madt)
    return not_found;

  if (std::memcmp(madt, ACPI_MADT_SIGNATURE.data, ACPI_MADT_SIGNATURE.len) != 0)
    return invalid_signature;

  var checksum = u8(0);
  for (var ch = cast<u8*>(madt); ch != cast<u8*>(madt) + cast<usize>(madt.length); ++ch)
    checksum = __add_with_carry(checksum, *ch).0;

  if (checksum != 0)
    return invalid_checksum;

  return ok;
}

//
// input keymap
//

import toml;
import input.keys : Key;
import std.string : String;
import std.error;

using input::errc;

pub struct keymap
{
  pub Key[256] keys;
  pub char[5][128] syms;

  pub keymap() = default;
  pub keymap(keymap&) = default;
  pub fn =(keymap mut &, keymap &&) -> keymap mut & = default;
  pub ~keymap() = default;
}

fn init(keymap mut &keymap) -> void
{
  const fallback_key_map = [<u8>: 0x00, 0x1b, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x2d, 0x3d, 0x08, 0x09, 0x51, 0x57, 0x45, 0x52, 0x54, 0x59, 0x55, 0x49, 0x4f, 0x50, 0x5b, 0x5d, 0x0d, 0x12, 0x41, 0x53, 0x44, 0x46, 0x47, 0x48, 0x4a, 0x4b, 0x4c, 0x3b, 0x27, 0x25, 0x10, 0x5c, 0x5a, 0x58, 0x43, 0x56, 0x42, 0x4e, 0x4d, 0x2c, 0x2e, 0x2f, 0x11, 0x6b, 0x14, 0x20, 0x17 ];
  const fallback_sym_map = [<u8>: 0x00, 0x01, 0x00, 0x00, 0x04, 0x05, 0x7f, 0x00, 0x08, 0x09, 0x00, 0x0b, 0x0c, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x00, 0x3b, 0x5c, 0x3d, 0x00, 0x00, 0x00, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x5b, 0x5c, 0x5d ];
  const fallback_sym_shift_map = [<u8>: 0x00, 0x01, 0x00, 0x00, 0x04, 0x05, 0x7f, 0x00, 0x08, 0x09, 0x00, 0x0b, 0x0c, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x5f, 0x3e, 0x3f, 0x29, 0x21, 0x40, 0x23, 0x24, 0x25, 0x5e, 0x26, 0x2a, 0x28, 0x00, 0x3a, 0x7c, 0x2b, 0x00, 0x00, 0x00, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x7b, 0x7c, 0x7d ];
  const fallback_sym_control_map = [<u8>: 0x00, 0x01, 0x00, 0x00, 0x04, 0x05, 0x7f, 0x00, 0x7f, 0x09, 0x00, 0x0b, 0x0c, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d ];

  for (var i = 0; i < fallback_key_map.len; ++i)
    keymap.keys[i] = cast(fallback_key_map[i]);

  for (var i = 0; i < fallback_sym_map.len; ++i)
    keymap.syms[i][0] = cast(fallback_sym_map[i]);

  for (var i = 0; i < fallback_sym_shift_map.len; ++i)
    keymap.syms[i][1] = cast(fallback_sym_shift_map[i]);

  for (var i = 0; i < fallback_sym_control_map.len; ++i)
    keymap.syms[i][2] = cast(fallback_sym_control_map[i]);

  for (var i = 0; i < fallback_sym_map.len; ++i)
    keymap.syms[i][3] = cast(fallback_sym_map[i]);

  for (var i = 0; i < fallback_sym_shift_map.len; ++i)
    keymap.syms[i][4] = cast(fallback_sym_shift_map[i]);
}

pub fn load_keys(keymap mut &keymap, std::string_view path) -> i32
{
  try
  {
    var toml = toml::load_from_file(path);

    if (toml.error)
      return -cast<i32>(errc::keys_load_error);

    var &keys = toml.doc["Key"];

    if (!keys.is_map)
      return -cast<i32>(errc::keys_format_invalid);

    for (var &(k, v) : keys.as_map)
    {
      if (!k.is_integer)
        return -cast<i32>(errc::keys_format_invalid);

      if (k.as<i64> < 0 || k.as<i64> > 255)
        return -cast<i32>(errc::invalid_scancode);

      var keycode = 0;

      switch (v)
      {
        case Integer[integer]:
          if (integer > 0 && integer <= 255)
            keycode = cast(integer);

        case String[string]:

          if (string.len == 1)
          {
            keycode = string[0];
          }

          if (string.len > 1)
          {
            #for (const k : std::meta::enumerators_of($Key))
            {
              if (string == std::meta::name_of(k))
                keycode = cast(Key::#k);
            }
          }
      }

      if (keycode == 0)
        return -cast<i32>(errc::invalid_keycode);

      keymap.keys[k.as<usize>] = cast(keycode);
    }
  }
  catch(std::error err)
  {
    return -cast<i32>(errc::io_error);
  }

  return 0;
}

pub fn load_syms(keymap mut &keymap, std::string_view path) -> i32
{
  try
  {
    var toml = toml::load_from_file(path);

    if (toml.error)
      return -cast<i32>(errc::syms_load_error);

    var &syms = toml.doc["Sym"];

    if (!syms.is_map)
      return -cast<i32>(errc::syms_format_invalid);

    for (var &(k, v) : syms.as_map)
    {
      if (!k.is_integer)
        return -cast<i32>(errc::syms_format_invalid);

      if (k.as<i64> < 0 || k.as<i64> > 128)
        return -cast<i32>(errc::invalid_keycode);

      if (k.as<i64> < 0 || k.as<i64> > 128)
        return -cast<i32>(errc::invalid_keycode);

      if (!v.is_array)
        return -cast<i32>(errc::syms_format_invalid);

      for (var i = 0, var &e : v.as_vec;; ++i)
      {
        var symbol = '\0';

        switch (e)
        {
          case Integer[integer]:
            if (integer > 0 && integer <= 0x1ffff)
              symbol = cast(integer);

          case String[string]:
            std::atoc(string.begin, string.end, &mut symbol);
        }

        if (i >= keymap.syms[k.as<usize>].len)
          return -cast<i32>(errc::syms_format_invalid);

        keymap.syms[k.as<usize>][i] = symbol;
      }
    }
  }
  catch(std::error err)
  {
    return -cast<i32>(errc::io_error);
  }

  return 0;
}

pub fn initialise(keymap mut &keymap, String &keys_file, String &syms_file) -> i32
{
  init(&mut keymap);

  if (var rc = load_keys(&mut keymap, std::string_view(keys_file.data, keys_file.len)); rc < 0)
    return rc;

  if (var rc = load_syms(&mut keymap, std::string_view(syms_file.data, syms_file.len)); rc < 0)
    return rc;

  return 0;
}

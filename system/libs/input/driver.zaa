//
// driver
//

import input;
import input.keymap : keymap;
import input.device : mouse;
import input.keys : Key;
import input.buttons : Button;
import os.zaos.time;
import os.zaos.fcntl;
import std.list;
import std.circular_buffer;
import std.string : String;

using input::errc;

pub struct device
{
  int fd;
  std::string path;

  config config;

  pub device(String &&path)
    : path(&&path)
  {
  }

  pub ~device() = default;
}

pub union config
{
  pub keymap(keymap),
  pub mouse(mouse),

  config() = default;
  fn =(config mut &, config &&) -> config mut & = default;
  ~config() = default;
}

pub union event
{
  pub device_added(device*),
  pub device_removed(device*),
  pub keyboard_key(key_event),
  pub pointer_motion_rel(pointer_event),
  pub pointer_motion_abs(pointer_event),
  pub pointer_button(button_event),
  pub pointer_wheel(pointer_event),

  pub event(event&&) = default;
  pub fn =(event mut &, event &&) -> event mut & = default;
  pub ~event() = default;
}

pub enum key_state
{
  pressed = 1,
  released = 0,
}

pub struct key_event
{
  pub u64 time;
  pub Key key;
  pub key_state state;
  pub char sym;

  key_event(u64 time, Key key, key_state state, char sym = 0)
    : time(time), key(key), state(state), sym(sym)
  {
  }

  key_event(key_event&) = default;
  ~key_event() = default;
}

pub enum button_state
{
  pressed = 1,
  released = 0,
}

pub struct button_event
{
  pub u64 time;
  pub Button button;
  pub button_state state;

  button_event(u64 time, Button button, button_state state)
    : time(time), button(button), state(state)
  {
  }

  button_event(button_event&) = default;
  ~button_event() = default;
}

pub struct pointer_event
{
  pub u64 time;
  pub f64 x;
  pub f64 y;

  pointer_event(u64 time, f64 x, f64 y)
    : time(time), x(x), y(y)
  {
  }

  pointer_event(pointer_event&) = default;
  ~pointer_event() = default;
}

pub struct driver
{
  i32 fd;

  std::list<device> devices;

  std::circular_buffer<event> events;

  u8[256] keys;
  u8[32] buttons;
  f64[9] motion;
  input::type[9] type;

  pub driver() = default;
  pub ~driver() = default;
}

extern fn thread_ring() -> os::ioring mut &;

fn pop_event(driver mut &driver) -> event
{
  return driver.events.take_front();
}

fn post_event(driver mut &driver, event &&event) -> void
{
  if (driver.events.len == driver.events.capacity)
    driver.events.reserve(driver.events.len + 1);

  driver.events.push_back(&&event);
}

fn add_device(driver mut &driver, String &&path) -> device mut *
{
  var device = &driver.devices.push_back(&&path);

  device.fd = os::open(&mut thread_ring, os::string(device.path.data, device.path.len), 0, 0);

  if (device.fd >= 0)
  {
    os::poll_add(&mut thread_ring, driver.fd, device.fd, os::POLLFD, os::POLLIN, cast(device), 0);
  }

  driver.post_event(event::device_added(device));

  return device;
}

pub fn initialise(driver mut &driver) -> i32
{
  driver.fd = os::poll_create(&mut thread_ring, 0);

  if (driver.fd < 0)
    return driver.fd;

  driver.events.reserve(8);

  return 0;
}

pub fn lookup(driver mut &driver, String &path) -> device *
{
  for (var &device : driver.devices)
    if (device.path == path)
      return &device;

  return null;
}

pub fn add_device(driver mut &driver, String &&path, keymap &keymap) -> device *
{
  var device = driver.add_device(&&path);

  device.config = config::keymap(keymap);

  return device;
}

pub fn add_device(driver mut &driver, String &&path, mouse &mouse) -> device *
{
  var device = driver.add_device(&&path);

  device.config = config::mouse(mouse);

  return device;
}

pub fn remove(driver mut &driver, device *device) -> void
{
  if (device.fd >= 0)
  {
    os::poll_remove(&mut thread_ring, driver.fd, device.fd, 0);
  }

  driver.devices.erase_if(|dev| &dev == device);

  driver.post_event(event::device_removed(device));
}

pub fn dispatch(driver mut &driver) -> i32
{
  struct input_event
  {
    u64 time;
    u16 type;
    u16 code;
    i32 value;

    ~input_event() = default;
  }

  var evts = [ os::pollevt(); 32 ];

  var count = os::poll_wait(&mut thread_ring, driver.fd, evts.data, evts.len, 0);

  if (count < 0)
    return count;

  var input = input_event(void);

  for (var i = 0; i < cast(count); ++i)
  {
    var device = cast<device mut *>(evts[i].user_data);

    while (os::read(&mut thread_ring, device.fd, &input, sizeof(input)) == sizeof(input))
    {
      switch (input.type)
      {
        case input::type::syn:

          switch (device.config)
          {
            case mouse[config]:

              if (input.code == input::syn::report)
              {
                if (driver.type[0] == input::type::rel || driver.type[1] == input::type::rel)
                {
                  driver.post_event(event::pointer_motion_rel(input.time, driver.motion[0], driver.motion[1]));

                  driver.motion[0] = driver.motion[1] = 0.0;
                }

                if (driver.type[0] == input::type::abs || driver.type[1] == input::type::abs)
                {
                  var x = driver.motion[0] * config.calibration[0] + driver.motion[1] * config.calibration[1] + config.calibration[2];
                  var y = driver.motion[0] * config.calibration[3] + driver.motion[1] * config.calibration[4] + config.calibration[5];

                  driver.post_event(event::pointer_motion_abs(input.time, x, y));
                }

                if (driver.type[8] == input::type::rel)
                {
                  driver.post_event(event::pointer_wheel(input.time, 0.0, driver.motion[8]));

                  driver.motion[8] = 0.0;
                }

                std::memset(&driver.type, 0, sizeof(driver.type));
              }
          }

        case input::type::key:

          switch (input.value)
          {
            case 0: // released

              switch (device.config)
              {
                case keymap[keymap]:
                  var key = keymap.keys[cast(input.code)];

                  if (driver.keys[cast(key)] == 0)
                    continue;

                  driver.keys[cast(key)] -= 1;

                  if (driver.keys[cast(key)] == 0)
                    driver.post_event(event::keyboard_key(input.time, key, key_state::released));

                case mouse[config]:
                  var key = config.buttons[cast(input.code - 0x100)];

                  if (driver.buttons[cast(key)] == 0)
                    continue;

                  driver.buttons[cast(key)] -= 1;

                  if (driver.buttons[cast(key)] == 0)
                    driver.post_event(event::pointer_button(input.time, key, button_state::released));
              }

            case 1: // pressed

              switch (device.config)
              {
                case keymap[keymap]:
                  var key = keymap.keys[cast(input.code)];

                  var sym = 0;
                  var map = 0;

                  if (driver.keys[cast(Key::LeftShift)] != 0 || driver.keys[cast(Key::RightShift)] != 0)
                    map = 1;

                  if (driver.keys[cast(Key::LeftControl)] != 0 || driver.keys[cast(Key::RightControl)] != 0)
                    map = 2;

                  if (cast(key) < keymap.syms.len)
                    sym = keymap.syms[cast(key)][map];

                  driver.keys[cast(key)] += 1;

                  if (driver.keys[cast(key)] == 1)
                    driver.post_event(event::keyboard_key(input.time, key, key_state::pressed, sym));

                case mouse[config]:
                  var key = config.buttons[cast(input.code - 0x100)];

                  driver.buttons[cast(key)] += 1;

                  if (driver.buttons[cast(key)] == 1)
                    driver.post_event(event::pointer_button(input.time, key, button_state::pressed));
              }
          }

        case input::type::rel:

          driver.type[cast(input.code)] = input::type::rel;
          driver.motion[cast(input.code)] = cast<f64>(input.value);

        case input::type::abs:

          driver.type[cast(input.code)] = input::type::abs;
          driver.motion[cast(input.code)] = cast<f64>(input.value);

        case input::type::msc:
          ;

        else:
          std::print("unknown ", input);
      }
    }
  }

  return 0;
}

pub fn fd(driver mut &driver) -> i32
{
  return driver.fd;
}

pub fn has_events(driver mut &driver) -> bool
{
  return !driver.events.empty;
}

pub fn next_event(driver mut &driver) -> event
{
  return driver.pop_event();
}

pub fn wait(driver mut &driver, u64 timeout = ~0) -> int
{
  if (driver.events.len == 0)
  {
    var tp = os::timespec(void);
    if (var rc = os::clock_time(os::clock::monotonic, &tp); rc < 0)
      return rc;

    var pollset = [ os::pollevt(driver.fd, os::POLLFD, os::POLLIN, 0) ];

    return os::select(&mut thread_ring, pollset.data, pollset.len, tp + timeout);
  }

  return 0;
}

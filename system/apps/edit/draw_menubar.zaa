//
// menubar
//

import tui.screen;
import tui.document;
import state as _ : *;

using tui;

pub fn draw_menubar(tui::context mut &ctx, state mut &state) -> void
{
  ctx.menubar_begin();

  var contains_focus = ctx.contains_focus();

  if (ctx.menubar_menu_begin("File", 'F'))
    draw_menu_file(&mut ctx, &mut state);

  if (state.documents.active.is_some)
  {
    if (ctx.menubar_menu_begin("Edit", 'E'))
      draw_menu_edit(&mut ctx, &mut state);

    if (ctx.menubar_menu_begin("View", 'V'))
      draw_menu_view(&mut ctx, &mut state);
  }

  if (ctx.menubar_menu_begin("Help", 'H'))
    draw_menu_help(&mut ctx, &mut state);

  ctx.menubar_end();
}

fn draw_menu_file(tui::context mut &ctx, state mut &state) -> void
{
  if (ctx.menubar_menu_button("New File", 'N', "Ctrl+N"))
    draw_add_untitled_document(&mut ctx, &mut state);

  if (ctx.menubar_menu_button("Open File…", 'O', "Ctrl+O"))
    state.wants_file_picker = StateFilePicker::Open;

  if (state.documents.active.is_some)
  {
    if (ctx.menubar_menu_button("Save", 'S', "Ctrl+S"))
      state.wants_save = true;

    if (ctx.menubar_menu_button("Save As…", 'A'))
      state.wants_file_picker = StateFilePicker::SaveAs;

    if (ctx.menubar_menu_button("Close File", 'C', "Ctrl+W"))
      state.wants_close = true;
  }

  if (ctx.menubar_menu_button("Exit", 'X', "Ctrl+Q"))
    state.wants_exit = true;

  ctx.menubar_menu_end();
}

fn draw_menu_edit(tui::context mut &ctx, state mut &state) -> void
{
  var mut &doc = state.documents.active?!;
  var mut &tb = doc.buffer;

  if (ctx.menubar_menu_button("Undo", 'U', "CTRL+Z"))
  {
    tb.undo();
    ctx.needs_rerender();
  }

  if (ctx.menubar_menu_button("Redo", 'R', "CTRL+Y"))
  {
    tb.redo();
    ctx.needs_rerender();
  }

  if (ctx.menubar_menu_button("Cut", 'T', "CTRL+X"))
  {
//    tb.cut(ctx.clipboard_mut());
    ctx.needs_rerender();
  }

  if (ctx.menubar_menu_button("Copy", 'C', "CTRL+C"))
  {
//    tb.copy(ctx.clipboard_mut());
    ctx.needs_rerender();
  }

  if (ctx.menubar_menu_button("Paste", 'P', "CTRL+V"))
  {
//    tb.paste(ctx.clipboard_ref());
    ctx.needs_rerender();
  }

  if (state.wants_search.kind != StateSearchKind::Disabled)
  {
    if (ctx.menubar_menu_button("Find", 'F', "CTRL+F"))
    {
      state.wants_search.kind = StateSearchKind::Search;
      state.wants_search.focus = true;
    }

    if (ctx.menubar_menu_button("Replace", 'L', "CTRL+R"))
    {
      state.wants_search.kind = StateSearchKind::Replace;
      state.wants_search.focus = true;
    }
  }

  if (ctx.menubar_menu_button("Select All", 'A', "CTRL+A"))
  {
    tb.select_all();
    ctx.needs_rerender();
  }

  ctx.menubar_menu_end();
}

fn draw_menu_view(tui::context mut &ctx, state mut &state) -> void
{
  var mut &doc = state.documents.active?!;
  var mut &tb = doc.buffer;

  if (ctx.menubar_menu_button("Focus Statusbar", 'S'))
    state.wants_statusbar_focus = true;

  if (ctx.menubar_menu_button("Go to File…", 'F', "CTRL+P"))
    state.wants_go_to_file = true;

  if (ctx.menubar_menu_button("Go to Line:Column…", 'G', "CTRL+G"))
    state.wants_goto = true;

  var word_wrap = tb.is_word_wrap_enabled;
  if (ctx.menubar_menu_checkbox("Word Wrap", word_wrap, 'W'))
  {
    tb.set_word_wrap_enabled(!word_wrap);
    ctx.needs_rerender();
  }

  ctx.menubar_menu_end();
}

fn draw_menu_help(tui::context mut &ctx, state mut &state) -> void
{
  if (ctx.menubar_menu_button("About", 'A'))
    state.wants_about = true;

  ctx.menubar_menu_end();
}

pub fn draw_dialog_about(tui::context mut &ctx, state mut &state) -> void
{
  ctx.modal_begin("about", "About");

  ctx.block_begin("content");
    ctx.inherit_focus();
    ctx.attr_padding(2, 1, 2, 1);

    ctx.label("description", "Microsoft Edit");
    ctx.attr_overflow(overflow::truncate_tail);
    ctx.attr_position(position::center);

    ctx.label("version", "1.0");
    ctx.attr_overflow(overflow::truncate_head);
    ctx.attr_position(position::center);

    ctx.label("copyright", "Copyright (c) Microsoft Corp 2025");
    ctx.attr_overflow(overflow::truncate_tail);
    ctx.attr_position(position::center);

    ctx.block_begin("choices");
      ctx.inherit_focus();
      ctx.attr_padding(2, 1, 2, 0);
      ctx.attr_position(position::center);

      if (ctx.button("ok", "Ok", button_style::default()))
        state.wants_about = false;

      ctx.inherit_focus();

    ctx.block_end();

  ctx.block_end();

  if (ctx.modal_end())
  {
    state.wants_about = false;
  }
}

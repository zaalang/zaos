//
// mkdir
//

import std.stdio;
import std.env;
import std.scan;
import sys.path;
import sys.fs;
import aargh;

struct opts
{
  #[arg(free, required, help="path(s)")]
  std::vector<std::string> paths;

  #[arg(flag, short='p', help="make parent directories as needed")]
  bool parents = false;

  #[arg(flag, help="display this help and exit")]
  bool help = false;

  opts() = default;
  ~opts() = default;
}

fn mkdir(std::string &path, opts &opts) throws(std::error) -> i32
{
  if (opts.parents)
    sys::mkpath(sys::path_view(path).parent);

  if (var rc = sys::mkdir(path, 0o755); rc < 0)
    throw std::system_error(std::errc(cast(-rc)));

  return 0;
}

pub fn main() -> i32
{
  var opts = aargh::parse<opts>(std::env::args);

  if (opts.help || opts.paths.empty)
  {
    aargh::usage<opts>();

    return 0;
  }

  for (var &path : opts.paths)
  {
    try
    {
      mkdir(path, opts);
    }
    catch (std::error rc)
    {
      std::fprint(std::stderr, "mkdir: ", path, ": ", rc);
    }
  }

  return 0;
}

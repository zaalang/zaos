//
// touch
//

import std.stdio;
import std.env;
import sys.fs;
import sys.path;
import os.zaos.fcntl;
import chrono;
import aargh;

struct opts
{
  #[arg(free, long="file", help="file(s)")]
  std::vector<std::string> paths;

  #[arg(flag, short='c', help="do not create any files")]
  bool no_create = false;

  #[arg(flag, help="display this help and exit")]
  bool help = false;

  opts() = default;
  ~opts() = default;
}

fn touch(std::string &path, var &time, opts &opts) throws(std::error) -> i32
{
  var stat = sys::stat();

  if (var rc = sys::stat(path, &mut stat); rc < 0)
  {
    if (cast(-rc) != std::errc::not_found)
      throw std::system_error(cast(-rc));

    if (opts.no_create)
      return 0;

    std::file::create(path);
  }

  stat.mtime = time.time_since_epoch.count;

  if (var rc = sys::chstat(path, stat, os::stats::mtime); rc < 0)
    throw std::system_error(cast(-rc));

  return 0;
}

pub fn main() -> i32
{
  var opts = aargh::parse<opts>(std::env::args);

  if (opts.help || opts.paths.empty)
  {
    aargh::usage<opts>();

    return 0;
  }

  var time = chrono::system_clock::now;

  for (var &path : opts.paths)
  {
    try
    {
      touch(path, time, opts);
    }
    catch (std::error rc)
    {
      std::fprint(std::stderr, "touch: ", path, ": ", rc);
    }
  }


  return 0;
}

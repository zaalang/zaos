//
// frame
//

import std.stdio;

const frame_width = 57;
const frame_height = 37;
const frame_top_left_width = 28;
const frame_top_right_width = 28;
const frame_top_height = 18;
const frame_title_height = 30;
const frame_middle_left_width = 5;
const frame_middle_right_width = 11;
const frame_lower_height = 17;
const frame_lower_left_width = 5;
const frame_lower_right_width = 11;
const frame_bottom_left_width = 28;
const frame_bottom_right_width = 28;
const frame_bottom_height = 12;
const frame_title_y = 6;
const frame_button_y = 10;
const frame_button_height = 16;

const close_width = 16;
const close_height = 16;
const close_position = -32;

const minimise_width = 16;
const minimise_height = 16;
const minimise_position = -74;

const maximise_width = 16;
const maximise_height = 16;
const maximise_position = -52;

const restore_width = 16;
const restore_height = 16;
const restore_position = -52;

const close = [
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x68,0x84,0x04,0x00,0x00,0x00,0x00,0x04,0x87,0x64,0x00,0x00,0x00,
  0x00,0x00,0x03,0x84,0xbd,0x84,0x04,0x00,0x00,0x04,0x87,0xbd,0x81,0x03,0x00,0x00,
  0x00,0x00,0x00,0x04,0x84,0xbd,0x84,0x04,0x04,0x87,0xbd,0x81,0x03,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x04,0x84,0xbd,0x89,0x8c,0xbd,0x81,0x03,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x04,0x89,0xbd,0xbd,0x86,0x03,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x04,0x8c,0xbd,0xbd,0x87,0x04,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x04,0x87,0xbd,0x86,0x87,0xbd,0x84,0x04,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x04,0x87,0xbd,0x81,0x03,0x04,0x84,0xbd,0x84,0x04,0x00,0x00,0x00,
  0x00,0x00,0x04,0x87,0xbd,0x81,0x03,0x00,0x00,0x04,0x84,0xbd,0x84,0x03,0x00,0x00,
  0x00,0x00,0x00,0x64,0x81,0x03,0x00,0x00,0x00,0x00,0x04,0x84,0x61,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
];

const minimise = [
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0x00,0x00,0x00,
  0x00,0x00,0x00,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
];

const maximise = [
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
];

const restore = [
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0x00,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0xbd,0xbd,0x00,0x00,
  0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xbd,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0xbd,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
];

const frame = [
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,  0x01000000,  0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x01000000,0x01000000,0x01000000,0x02000000,0x02000000,0x02000000,0x03000000,0x03000000,0x04000000,0x04000000,0x04000000,0x04000000,0x04000000,0x05000000,0x05000000,0x05000000,0x05000000,0x05000000,0x05000000,0x05000000,  0x05000000,  0x05000000,0x05000000,0x05000000,0x05000000,0x05000000,0x05000000,0x05000000,0x04000000,0x04000000,0x04000000,0x04000000,0x04000000,0x04000000,0x03000000,0x03000000,0x02000000,0x02000000,0x01000000,0x01000000,0x01000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x01000000,0x01000000,0x01000000,0x02000000,0x02000000,0x03000000,0x04000000,0x05000000,0x05000000,0x06000000,0x07000000,0x07000000,0x08000000,0x09000000,0x09000000,0x09000000,0x0a000000,0x0a000000,0x0a000000,0x0a000000,0x0a000000,0x0a000000,0x0a000000,  0x0b000000,  0x0a000000,0x0a000000,0x0a000000,0x0a000000,0x0a000000,0x0a000000,0x0a000000,0x09000000,0x09000000,0x09000000,0x08000000,0x07000000,0x07000000,0x06000000,0x05000000,0x05000000,0x04000000,0x03000000,0x02000000,0x02000000,0x01000000,0x01000000,0x01000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x01000000,0x01000000,0x02000000,0x03000000,0x04000000,0x05000000,0x06000000,0x07000000,0x08000000,0x0a000000,0x0b000000,0x0c000000,0x0d000000,0x0e000000,0x0f000000,0x0f000000,0x0f000000,0x0f000000,0x0f000000,0x0f000000,0x10000000,0x10000000,0x10000000,0x10000000,  0x10000000,  0x10000000,0x10000000,0x10000000,0x10000000,0x0f000000,0x0f000000,0x0f000000,0x0f000000,0x0f000000,0x0f000000,0x0e000000,0x0d000000,0x0c000000,0x0b000000,0x0a000000,0x09000000,0x07000000,0x06000000,0x05000000,0x04000000,0x03000000,0x02000000,0x01000000,0x01000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x01000000,0x01000000,0x02000000,0x03000000,0x04000000,0x05000000,0x07000000,0x09000000,0x0a000000,0x0c000000,0x0e000000,0x10000000,0x11000000,0x13000000,0x14000000,0x15000000,0x16000000,0x17000000,0x17000000,0x18000000,0x18000000,0x19000000,0x19000000,0x19000000,0x19000000,  0x19000000,  0x19000000,0x19000000,0x19000000,0x19000000,0x18000000,0x18000000,0x17000000,0x17000000,0x16000000,0x16000000,0x14000000,0x13000000,0x12000000,0x10000000,0x0e000000,0x0d000000,0x0b000000,0x09000000,0x07000000,0x05000000,0x04000000,0x03000000,0x02000000,0x01000000,0x01000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x01000000,0x01000000,0x02000000,0x03000000,0x04000000,0x06000000,0x07000000,0x28202020,0x756d6d6d,0xc4c0c0c0,0xf7f6f6f6,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xf7f6f6f6,0xcbc5c5c5,0x84787878,0x3b2b2b2b,0x17000000,0x14000000,0x12000000,0x0f000000,0x0d000000,0x0a000000,0x08000000,0x06000000,0x04000000,0x03000000,0x02000000,0x01000000,0x01000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x01000000,0x02000000,0x03000000,0x04000000,0x06000000,0x120b0b0b,0x71696969,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x86797979,0x28151515,0x19000000,0x15000000,0x12000000,0x0e000000,0x0b000000,0x09000000,0x06000000,0x04000000,0x03000000,0x02000000,0x01000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x01000000,0x03000000,0x04000000,0x06000000,0x120b0b0b,0x87808080,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x9e919191,0x2d171717,0x1c000000,0x17000000,0x13000000,0x0f000000,0x0c000000,0x09000000,0x06000000,0x04000000,0x03000000,0x01000000,0x01000000,0x00000000,
  0x00000000,0x01000000,0x02000000,0x04000000,0x05000000,0x07000000,0x71696969,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x8f7f7f7f,0x24000000,0x1f000000,0x19000000,0x14000000,0x0f000000,0x0b000000,0x08000000,0x06000000,0x04000000,0x02000000,0x01000000,0x00000000,
  0x00000000,0x01000000,0x02000000,0x05000000,0x07000000,0x28202020,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x51383838,0x26000000,0x1f000000,0x19000000,0x13000000,0x0f000000,0x0b000000,0x07000000,0x05000000,0x02000000,0x01000000,0x00000000,
  0x00000000,0x01000000,0x03000000,0x06000000,0x09000000,0x756d6d6d,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x99878787,0x2e000000,0x26000000,0x1f000000,0x18000000,0x12000000,0x0d000000,0x09000000,0x06000000,0x03000000,0x01000000,0x00000000,
  0x00000000,0x02000000,0x04000000,0x07000000,0x0a000000,0xc4c0c0c0,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xd8cfcfcf,0x36000000,0x2d000000,0x24000000,0x1d000000,0x16000000,0x10000000,0x0b000000,0x07000000,0x04000000,0x02000000,0x00000000,
  0x00000000,0x02000000,0x05000000,0x08000000,0x0c000000,0xf7f6f6f6,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xf9f8f8f8,0x3e000000,0x33000000,0x2a000000,0x21000000,0x19000000,0x12000000,0x0d000000,0x09000000,0x05000000,0x02000000,0x00000000,
  0x01000000,0x02000000,0x05000000,0x09000000,0x0e000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x46000000,0x3a000000,0x2f000000,0x25000000,0x1d000000,0x15000000,0x0f000000,0x0a000000,0x06000000,0x03000000,0x01000000,
  0x01000000,0x03000000,0x06000000,0x0b000000,0x10000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x4c000000,0x40000000,0x34000000,0x29000000,0x1f000000,0x17000000,0x11000000,0x0b000000,0x06000000,0x03000000,0x01000000,
  0x01000000,0x03000000,0x07000000,0x0b000000,0x11000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x52000000,0x45000000,0x38000000,0x2c000000,0x22000000,0x19000000,0x12000000,0x0d000000,0x07000000,0x04000000,0x01000000,
  0x01000000,0x04000000,0x07000000,0x0c000000,0x12000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x57000000,0x49000000,0x3c000000,0x2f000000,0x24000000,0x1b000000,0x13000000,0x0d000000,0x08000000,0x04000000,0x01000000,
  0x01000000,0x04000000,0x07000000,0x0d000000,0x13000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x5a000000,0x4b000000,0x3e000000,0x32000000,0x26000000,0x1d000000,0x14000000,0x0e000000,0x08000000,0x04000000,0x01000000,
  0x01000000,0x04000000,0x08000000,0x0e000000,0x13000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x5b000000,0x4d000000,0x40000000,0x32000000,0x27000000,0x1d000000,0x15000000,0x0f000000,0x09000000,0x04000000,0x01000000,

  0x01000000,0x04000000,0x08000000,0x0e000000,0x14000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x5b000000,0x4c000000,0x40000000,0x32000000,0x27000000,0x1d000000,0x15000000,0x0f000000,0x09000000,0x04000000,0x01000000,

  0x01000000,0x04000000,0x08000000,0x0d000000,0x13000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x58000000,0x4b000000,0x3e000000,0x32000000,0x26000000,0x1d000000,0x14000000,0x0e000000,0x09000000,0x04000000,0x01000000,
  0x01000000,0x04000000,0x07000000,0x0d000000,0x12000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x54000000,0x48000000,0x3b000000,0x2f000000,0x24000000,0x1b000000,0x14000000,0x0e000000,0x08000000,0x04000000,0x01000000,
  0x01000000,0x04000000,0x07000000,0x0c000000,0x11000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x50000000,0x43000000,0x37000000,0x2c000000,0x22000000,0x1a000000,0x13000000,0x0d000000,0x07000000,0x04000000,0x01000000,
  0x01000000,0x03000000,0x06000000,0x0b000000,0x10000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x49000000,0x3e000000,0x33000000,0x29000000,0x1f000000,0x17000000,0x11000000,0x0c000000,0x07000000,0x04000000,0x01000000,
  0x01000000,0x03000000,0x05000000,0x0a000000,0x0e000000,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,  0xffffffff,  0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x42000000,0x38000000,0x2e000000,0x24000000,0x1d000000,0x15000000,0x0f000000,0x0b000000,0x06000000,0x03000000,0x01000000,
  0x00000000,0x02000000,0x05000000,0x09000000,0x0d000000,0x12000000,0x17000000,0x1f000000,0x27000000,0x2f000000,0x38000000,0x40000000,0x48000000,0x50000000,0x57000000,0x5b000000,0x60000000,0x64000000,0x68000000,0x6a000000,0x6c000000,0x6d000000,0x6e000000,0x6e000000,0x70000000,0x70000000,0x70000000,0x70000000,  0x70000000,  0x70000000,0x70000000,0x70000000,0x70000000,0x6e000000,0x6e000000,0x6d000000,0x6c000000,0x6a000000,0x68000000,0x65000000,0x61000000,0x5d000000,0x58000000,0x51000000,0x4a000000,0x42000000,0x39000000,0x31000000,0x28000000,0x20000000,0x19000000,0x13000000,0x0e000000,0x09000000,0x05000000,0x03000000,0x01000000,
  0x00000000,0x02000000,0x04000000,0x07000000,0x0b000000,0x0f000000,0x14000000,0x1a000000,0x21000000,0x28000000,0x30000000,0x37000000,0x3e000000,0x44000000,0x49000000,0x4f000000,0x52000000,0x55000000,0x58000000,0x5a000000,0x5b000000,0x5d000000,0x5e000000,0x5f000000,0x5f000000,0x5f000000,0x5f000000,0x5f000000,  0x5f000000,  0x5f000000,0x5f000000,0x5f000000,0x5f000000,0x5f000000,0x5e000000,0x5d000000,0x5d000000,0x5a000000,0x59000000,0x57000000,0x53000000,0x4f000000,0x4a000000,0x45000000,0x3f000000,0x38000000,0x31000000,0x2a000000,0x22000000,0x1b000000,0x15000000,0x10000000,0x0b000000,0x08000000,0x04000000,0x02000000,0x00000000,
  0x00000000,0x01000000,0x03000000,0x06000000,0x09000000,0x0c000000,0x11000000,0x16000000,0x1b000000,0x21000000,0x28000000,0x2d000000,0x33000000,0x38000000,0x3d000000,0x41000000,0x44000000,0x47000000,0x49000000,0x4a000000,0x4c000000,0x4c000000,0x4d000000,0x4f000000,0x4f000000,0x4f000000,0x4f000000,0x4f000000,  0x4f000000,  0x4f000000,0x4f000000,0x4f000000,0x4f000000,0x4f000000,0x4d000000,0x4d000000,0x4c000000,0x4b000000,0x49000000,0x47000000,0x45000000,0x42000000,0x3e000000,0x39000000,0x34000000,0x2e000000,0x28000000,0x22000000,0x1d000000,0x17000000,0x12000000,0x0d000000,0x09000000,0x06000000,0x04000000,0x01000000,0x00000000,
  0x00000000,0x01000000,0x02000000,0x05000000,0x07000000,0x0a000000,0x0d000000,0x11000000,0x16000000,0x1b000000,0x1f000000,0x24000000,0x29000000,0x2d000000,0x31000000,0x34000000,0x36000000,0x39000000,0x3b000000,0x3c000000,0x3d000000,0x3e000000,0x3e000000,0x3f000000,0x3f000000,0x3f000000,0x3f000000,0x40000000,  0x40000000,  0x40000000,0x40000000,0x3f000000,0x3f000000,0x3f000000,0x3f000000,0x3e000000,0x3d000000,0x3c000000,0x3b000000,0x39000000,0x37000000,0x34000000,0x32000000,0x2e000000,0x2a000000,0x25000000,0x21000000,0x1c000000,0x17000000,0x12000000,0x0e000000,0x0b000000,0x07000000,0x05000000,0x03000000,0x01000000,0x00000000,
  0x00000000,0x01000000,0x02000000,0x04000000,0x05000000,0x07000000,0x0a000000,0x0d000000,0x11000000,0x14000000,0x19000000,0x1c000000,0x20000000,0x23000000,0x26000000,0x28000000,0x2a000000,0x2c000000,0x2d000000,0x2e000000,0x2f000000,0x30000000,0x31000000,0x31000000,0x31000000,0x31000000,0x31000000,0x31000000,  0x32000000,  0x31000000,0x31000000,0x31000000,0x31000000,0x31000000,0x31000000,0x30000000,0x2f000000,0x2f000000,0x2d000000,0x2c000000,0x2b000000,0x28000000,0x26000000,0x24000000,0x20000000,0x1d000000,0x19000000,0x16000000,0x12000000,0x0e000000,0x0b000000,0x08000000,0x06000000,0x04000000,0x02000000,0x01000000,0x00000000,
  0x00000000,0x01000000,0x01000000,0x03000000,0x04000000,0x05000000,0x07000000,0x0a000000,0x0d000000,0x10000000,0x12000000,0x15000000,0x18000000,0x1a000000,0x1d000000,0x1e000000,0x20000000,0x21000000,0x22000000,0x23000000,0x24000000,0x24000000,0x24000000,0x24000000,0x24000000,0x24000000,0x25000000,0x25000000,  0x25000000,  0x25000000,0x25000000,0x24000000,0x24000000,0x24000000,0x24000000,0x24000000,0x24000000,0x23000000,0x22000000,0x21000000,0x20000000,0x1f000000,0x1d000000,0x1b000000,0x18000000,0x16000000,0x13000000,0x10000000,0x0d000000,0x0b000000,0x08000000,0x06000000,0x04000000,0x03000000,0x01000000,0x01000000,0x00000000,
  0x00000000,0x00000000,0x01000000,0x02000000,0x03000000,0x04000000,0x05000000,0x07000000,0x09000000,0x0b000000,0x0d000000,0x0f000000,0x11000000,0x13000000,0x14000000,0x16000000,0x17000000,0x18000000,0x19000000,0x19000000,0x1a000000,0x1a000000,0x1b000000,0x1b000000,0x1b000000,0x1b000000,0x1b000000,0x1b000000,  0x1b000000,  0x1b000000,0x1b000000,0x1b000000,0x1b000000,0x1b000000,0x1b000000,0x1a000000,0x1a000000,0x19000000,0x19000000,0x18000000,0x17000000,0x16000000,0x15000000,0x13000000,0x12000000,0x10000000,0x0e000000,0x0b000000,0x09000000,0x07000000,0x06000000,0x04000000,0x03000000,0x02000000,0x01000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x01000000,0x01000000,0x02000000,0x03000000,0x04000000,0x05000000,0x06000000,0x08000000,0x09000000,0x0b000000,0x0c000000,0x0d000000,0x0e000000,0x0f000000,0x10000000,0x11000000,0x11000000,0x12000000,0x12000000,0x12000000,0x12000000,0x13000000,0x13000000,0x13000000,0x13000000,0x13000000,  0x13000000,  0x13000000,0x13000000,0x13000000,0x13000000,0x13000000,0x12000000,0x12000000,0x12000000,0x12000000,0x11000000,0x11000000,0x10000000,0x10000000,0x0f000000,0x0e000000,0x0c000000,0x0b000000,0x09000000,0x08000000,0x06000000,0x05000000,0x04000000,0x03000000,0x02000000,0x01000000,0x01000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x01000000,0x01000000,0x02000000,0x02000000,0x03000000,0x04000000,0x05000000,0x06000000,0x07000000,0x08000000,0x09000000,0x0a000000,0x0a000000,0x0b000000,0x0b000000,0x0c000000,0x0c000000,0x0c000000,0x0c000000,0x0c000000,0x0d000000,0x0d000000,0x0d000000,0x0d000000,0x0d000000,  0x0d000000,  0x0d000000,0x0d000000,0x0d000000,0x0d000000,0x0d000000,0x0c000000,0x0c000000,0x0c000000,0x0c000000,0x0c000000,0x0b000000,0x0b000000,0x0b000000,0x0a000000,0x09000000,0x08000000,0x07000000,0x06000000,0x05000000,0x04000000,0x03000000,0x03000000,0x02000000,0x01000000,0x01000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x01000000,0x01000000,0x01000000,0x01000000,0x02000000,0x03000000,0x03000000,0x04000000,0x04000000,0x05000000,0x05000000,0x06000000,0x06000000,0x06000000,0x06000000,0x07000000,0x07000000,0x07000000,0x07000000,0x07000000,0x07000000,0x07000000,0x07000000,0x07000000,  0x07000000,  0x07000000,0x07000000,0x07000000,0x07000000,0x07000000,0x07000000,0x07000000,0x07000000,0x07000000,0x06000000,0x06000000,0x06000000,0x06000000,0x05000000,0x05000000,0x04000000,0x04000000,0x03000000,0x03000000,0x02000000,0x02000000,0x01000000,0x01000000,0x01000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x01000000,0x01000000,0x01000000,0x01000000,0x02000000,0x02000000,0x02000000,0x02000000,0x03000000,0x03000000,0x03000000,0x03000000,0x03000000,0x03000000,0x03000000,0x04000000,0x04000000,0x04000000,0x04000000,0x04000000,0x04000000,  0x04000000,  0x04000000,0x04000000,0x04000000,0x04000000,0x04000000,0x04000000,0x03000000,0x03000000,0x03000000,0x03000000,0x03000000,0x03000000,0x03000000,0x02000000,0x02000000,0x02000000,0x02000000,0x01000000,0x01000000,0x01000000,0x01000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,  0x01000000,  0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x01000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
];

pub enum options
{
  none = 0x0,

  minimise = 0x1,
  maximise = 0x2,
  close = 0x4,

  maximised = 0x10,
  fullscreen = 0x30,

  pub const fn ~(options lhs) -> options { return cast<options>(~cast<isize>(lhs)); }
  pub const fn &(options lhs, options rhs) -> options { return cast<options>(cast<isize>(lhs) & cast<isize>(rhs)); }
  pub const fn |(options lhs, options rhs) -> options { return cast<options>(cast<isize>(lhs) | cast<isize>(rhs)); }
}

pub enum location
{
  exterior = 0,
  top_side = 0x1,
  left_side = 0x4,
  bottom_side = 0x2,
  right_side = 0x8,
  top_left_corner = 0x5,
  top_right_corner = 0x9,
  bottom_left_corner = 0x6,
  bottom_right_corner = 0xa,
  interior = 0x10,
  minimise = 0x20,
  maximise = 0x40,
  close = 0x80,
  title = 0x100,

  pub const fn ~(location lhs) -> location { return cast<location>(~cast<isize>(lhs)); }
  pub const fn &(location lhs, location rhs) -> location { return cast<location>(cast<isize>(lhs) & cast<isize>(rhs)); }
  pub const fn |(location lhs, location rhs) -> location { return cast<location>(cast<isize>(lhs) | cast<isize>(rhs)); }
}

pub const interior_left = frame_middle_left_width;
pub const interior_top = frame_title_height;
pub const interior_right = frame_middle_right_width;
pub const interior_bottom = frame_bottom_height;
pub const maximised_interior_top = frame_title_height - frame_title_y;

fn tint(u32 u, u32 v) -> u32
{
  var a = ((u >> 24) & 0xff) * ((v >> 24) & 0xff) / 255;
  var r = ((u >> 16) & 0xff) * ((v >> 16) & 0xff) / 255;
  var g = ((u >> 8) & 0xff) * ((v >> 8) & 0xff) / 255;
  var b = ((u >> 0) & 0xff) * ((v >> 0) & 0xff) / 255;

  return (a << 24) | (r << 16) | (g << 8) | (b << 0);
}

fn lerp(u32 dst, u32 src, u8 t) -> u32
{
  var a = (((dst >> 24) & 0xff) * cast(255 - t) + ((src >> 24) & 0xff) * cast(t)) >> 8;
  var r = (((dst >> 16) & 0xff) * cast(255 - t) + ((src >> 16) & 0xff) * cast(t)) >> 8;
  var g = (((dst >> 8) & 0xff) * cast(255 - t) + ((src >> 8) & 0xff) * cast(t)) >> 8;
  var b = (((dst >> 0) & 0xff) * cast(255 - t) + ((src >> 0) & 0xff) * cast(t)) >> 8;

  return (a << 24) | (r << 16) | (g << 8) | (b << 0);
}

fn fill(u8 mut *buffer, i32 x, i32 y, usize stride, i32 width, i32 height, u32 color) -> void
{
  for(var j = 0; j < height; ++j)
  {
    var dst = cast<u32 mut *>(buffer + cast(y + j) * stride) + cast(x);

    for(var i = 0; i < width; ++i)
      *dst++ = color;
  }
}

fn over(u8 mut *buffer, i32 x, i32 y, usize stride, i32 width, i32 height, u32 color) -> void
{
  for(var j = 0; j < height; ++j)
  {
    var dst = cast<u32 mut *>(buffer + cast(y + j) * stride) + cast(x);

    for(var i = 0; i < width; ++i)
    {
      *dst = lerp(*dst, color, cast((*dst >> 24) & 0xff));

      ++dst;
    }
  }
}

fn blit(u8 mut *buffer, i32 x, i32 y, usize stride, u8 *data, i32 width, i32 height, u32 color) -> void
{
  for(var j = 0; j < height; ++j)
  {
    var dst = cast<u32 mut *>(buffer + cast(y + j) * stride) + cast(x);

    for(var i = 0; i < width; ++i)
    {
      *dst = lerp(*dst, color, *(data + cast(j * width + i)));

      ++dst;
    }
  }
}


pub fn render(i32 width, i32 height, usize stride, u8 mut *buffer, u32 title_color, u32 text_color, options options, u32 hit_color, location hit) -> void
{
  switch (options & (options::maximised | options::fullscreen))
  {
    case maximised:

      fill(buffer, 0, 0, stride, width, frame_title_height - frame_title_y, title_color);

      if (options & options::minimise == options::minimise)
      {
        if (hit == location::minimise)
          over(buffer, width + interior_right + minimise_position - 4, frame_button_y - frame_title_y - 4, stride, minimise_width + 9, minimise_height + 7, hit_color);

        blit(buffer, width + interior_right + minimise_position, frame_button_y - frame_title_y, stride, minimise.data, minimise_width, minimise_height, text_color);
      }

      if (options & options::maximise == options::maximise)
      {
        if (hit == location::maximise)
          over(buffer, width + interior_right + maximise_position - 4, frame_button_y - frame_title_y - 4, stride, maximise_width + 9, maximise_height + 7, hit_color);

        if (options & options::maximised != options::maximised)
          blit(buffer, width + interior_right + maximise_position, frame_button_y - frame_title_y, stride, maximise.data, maximise_width, maximise_height, text_color);

        if (options & options::maximised == options::maximised)
          blit(buffer, width + interior_right + restore_position, frame_button_y - frame_title_y, stride, restore.data, restore_width, restore_height, text_color);
      }

      if (options & options::close == options::close)
      {
        if (hit == location::close)
          over(buffer, width + interior_right + close_position - 2, frame_button_y - frame_title_y - 4, stride, close_width + 5, close_height + 7, hit_color);

        blit(buffer, width + interior_right + close_position, frame_button_y - frame_title_y, stride, close.data, close_width, close_height, text_color);
      }

    case none:

      var y = 0;

      for(var endy = frame_top_height; y < endy; ++y)
      {
        var dst = cast<u32 mut *>(buffer + cast(y) * stride);

        for(var x = 0, var endx = frame_top_left_width; x < endx; ++x)
          *dst++ = tint(frame[cast(y) * frame_width + cast(x)], title_color);

        for(var x = frame_top_left_width, var endx = width - frame_top_right_width; x < endx; ++x)
          *dst++ = tint(frame[cast(y) * frame_width + frame_top_left_width], title_color);

        for(var x = width - frame_top_right_width, var endx = width; x < endx; ++x)
          *dst++ = tint(frame[cast(y) * frame_width + (frame_width - frame_top_right_width) + cast(x - (width - frame_top_right_width))], title_color);
      }

      for(var endy = frame_title_height; y < endy; ++y)
      {
        var dst = cast<u32 mut *>(buffer + cast(y) * stride);

        for(var x = 0, var endx = frame_top_left_width; x < endx; ++x)
          *dst++ = tint(frame[frame_top_height * frame_width + cast(x)], title_color);

        for(var x = frame_top_left_width, var endx = width - frame_top_right_width; x < endx; ++x)
          *dst++ = tint(frame[frame_top_height * frame_width + frame_top_left_width], title_color);

        for(var x = width - frame_top_right_width, var endx = width; x < endx; ++x)
          *dst++ = tint(frame[frame_top_height * frame_width + (frame_width - frame_top_right_width) + cast(x - (width - frame_top_right_width))], title_color);
      }

      for(var endy = height - frame_lower_height; y < endy; ++y)
      {
        var dst = cast<u32 mut *>(buffer + cast(y) * stride);

        for(var x = 0, var endx = frame_middle_left_width; x < endx; ++x)
          *dst++ = frame[(frame_top_height + 1) * frame_width + x];

        dst += cast(width - frame_middle_right_width - frame_middle_left_width);

        for(var x = width - frame_middle_right_width, var endx = width; x < endx; ++x)
          *dst++ = frame[(frame_top_height + 1) * frame_width + (frame_width - frame_middle_right_width) + cast(x - (width - frame_middle_right_width))];
      }

      for(var endy = height - frame_bottom_height; y < endy; ++y)
      {
        var dst = cast<u32 mut *>(buffer + cast(y) * stride);

        for(var x = 0, var endx = frame_lower_left_width; x < endx; ++x)
          *dst++ = frame[((frame_height - frame_lower_height) + cast(y - (height - frame_lower_height))) * frame_width + cast(x)];

        dst += cast(width - frame_lower_right_width - frame_lower_left_width);

        for(var x = width - frame_lower_right_width, var endx = width; x < endx; ++x)
          *dst++ = frame[((frame_height - frame_lower_height) + cast(y - (height - frame_lower_height))) * frame_width + (frame_width - frame_lower_right_width) + cast(x - (width - frame_lower_right_width))];
      }

      for(var endy = height; y < endy; ++y)
      {
        var dst = cast<u32 mut *>(buffer + cast(y) * stride);

        for(var x = 0, var endx = frame_bottom_left_width; x < endx; ++x)
          *dst++ = frame[((frame_height - frame_bottom_height) + cast(y - (height - frame_bottom_height))) * frame_width + cast(x)];

        for(var x = frame_bottom_left_width, var endx = width - frame_bottom_right_width; x < endx; ++x)
          *dst++ = frame[((frame_height - frame_bottom_height) + cast(y - (height - frame_bottom_height))) * frame_width + frame_bottom_left_width];

        for(var x = width - frame_bottom_right_width, var endx = width; x < endx; ++x)
          *dst++ = frame[((frame_height - frame_bottom_height) + cast(y - (height - frame_bottom_height))) * frame_width + (frame_width - frame_bottom_right_width) + cast(x - (width - frame_bottom_right_width))];
      }

      if (options & options::minimise == options::minimise)
      {
        if (hit == location::minimise)
          over(buffer, width + minimise_position - 4, frame_button_y - 5, stride, minimise_width + 9, minimise_height + 9, hit_color);

        blit(buffer, width + minimise_position, frame_button_y, stride, minimise.data, minimise_width, minimise_height, text_color);
      }

      if (options & options::maximise == options::maximise)
      {
        if (hit == location::maximise)
          over(buffer, width + maximise_position - 4, frame_button_y - 5, stride, maximise_width + 9, maximise_height + 9, hit_color);

        if (options & options::maximised != options::maximised)
          blit(buffer, width + maximise_position, frame_button_y, stride, maximise.data, maximise_width, maximise_height, text_color);

        if (options & options::maximised == options::maximised)
          blit(buffer, width + restore_position, frame_button_y, stride, restore.data, restore_width, restore_height, text_color);
      }

      if (options & options::close == options::close)
      {
        if (hit == location::close)
          over(buffer, width + close_position - 2, frame_button_y - 5, stride, close_width + 9, close_height + 9, hit_color);

        blit(buffer, width + close_position, frame_button_y, stride, close.data, close_width, close_height, text_color);
      }
  }
}

pub fn location(i32 x, i32 y, i32 width, i32 height, options options) -> location
{
  var location = location::exterior;

  switch (options & (options::none | options::maximised | options::fullscreen))
  {
    case fullscreen:
      location = location::interior;

    case maximised:
      location = location::interior;

      if (y < maximised_interior_top)
      {
        location = location::title;

        if (frame_button_y - frame_title_y - 4 < y && y < frame_button_y - frame_title_y + frame_button_height + 4)
        {
          if (options & options::minimise == options::minimise)
          {
            if (width + interior_right + minimise_position < x && x < width + interior_right + minimise_position + minimise_width + 4)
              location = location::minimise;
          }

          if (options & options::maximise == options::maximise)
          {
            if (width + interior_right + maximise_position < x && x < width + interior_right + maximise_position + maximise_width + 4)
              location = location::maximise;
          }

          if (options & options::close == options::close)
          {
            if (width + interior_right + close_position < x && x < width + interior_right + close_position + close_width + 4)
              location = location::close;
          }
        }
      }

    case none:

      var x1 = frame_middle_left_width;
      var y1 = frame_middle_left_width;
      var x2 = width - frame_middle_right_width;
      var y2 = height - frame_bottom_height;

      if (x1 - 5 < x && x < x2 + 10 && y1 - 5 < y && y < y2 + 10)
      {
        if (x < x1)
          location |= location::left_side;
        else if (x < x2)
          location |= location::interior;
        else
          location |= location::right_side;

        if (y < y1)
          location |= location::top_side;
        else if (y < y1 + frame_title_height - frame_middle_left_width)
          location |= location::title;
        else if (y < y2)
          location |= location::interior;
        else
          location |= location::bottom_side;

        if (x < x1 + 8 && (y < y1 || y2 < y))
          location |= location::left_side;

        if (x2 - 8 < x && (y < y1 || y2 < y))
          location |= location::right_side;

        if (y < y1 + 8 && (x < x1 || x2 < x))
          location |= location::top_side;

        if (y2 - 8 < y && (x < x1 || x2 < x))
          location |= location::bottom_side;

        if (location != location::interior)
          location &= ~location::interior;

        if (location != location::title)
          location &= ~location::title;
      }

      if (location == location::title)
      {
        if (frame_button_y - 4 < y && y < frame_button_y + frame_button_height + 4)
        {
          if (options & options::minimise == options::minimise)
          {
            if (width + minimise_position < x && x < width + minimise_position + minimise_width + 4)
              location = location::minimise;
          }

          if (options & options::maximise == options::maximise)
          {
            if (width + maximise_position < x && x < width + maximise_position + maximise_width + 4)
              location = location::maximise;
          }

          if (options & options::close == options::close)
          {
            if (width + close_position < x && x < width + close_position + close_width + 4)
              location = location::close;
          }
        }
      }
  }

  return location;
}

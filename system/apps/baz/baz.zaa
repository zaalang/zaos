//
// abz
//

import std.stdio;
import std.env;
import chrono;
import app.loop;
import os.zaos.fcntl;
import zidl.zaos_sys;
import zidl.zaos_winton;

extern fn thread_ring() -> os::ioring mut &;

fn main() -> int
{
  var loop = app::loop();

  if (var result = app::initialise(&mut loop); result < 0)
    std::panic("baz unable to init loop - ", cast<std::errc>(-result));

  try
  {
    var endpoint = app::connect_to_service("zaos.winton/compositor");

    zidl::call<zidl::zaos_winton::compositor::create_surface_request, zidl::zaos_winton::compositor::create_surface_response>(endpoint.fd, 11, 22, 33, 44, callback: |success| {
      std::print("ok - ", success);
    });

    loop.run();
  }
  catch(std::error e)
  {
    std::print("baz error - ", e);
  }

  return 0;
}

//
// cat
//

import std.stdio;
import std.env;
import std.algorithm;
import os.zaos.fcntl : O_RDONLY, O_DIRECTORY, O_NOFOLLOW;
import chrono : duration;
import termios;

extern fn thread_ring() -> os::ioring mut &;

pub fn main() -> i32
{
  var path = std::string();

  for (var arg : std::env::args.drop_n(1))
  {
    if (arg.starts_with("-"))
    {

      continue;
    }

    path = arg;
  }

  if (path.empty)
  {
    std::printf("usage: cat <filepath>\n");

    return -22;
  }

  var fd = os::open(&mut thread_ring, os::string(path.data, path.len), O_RDONLY, 0);

  if (fd < 0)
    std::printf("cat: error opening file {} - {}\n", path, std::errc(cast(-fd)));

  if (fd < 0)
    return fd;

  var buffer = [u8(0); 4096];

  for (;;)
  {
    var bytes = os::read(&mut thread_ring, fd, buffer.data, buffer.len);

    if (bytes < 0)
      std::printf("cat: error reading file {} - {}\n", path, std::errc(cast(-bytes)));

    if (bytes <= 0)
      break;

    std::printf(std::string_view(buffer.data, cast<usize>(bytes)));
  }

  os::close(&mut thread_ring, fd);

  return 0;
}

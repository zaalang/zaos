//
// parser
//

import std.stdio;
import std.string;
import std.vector;
import std.scan;
import std.box;
import chrono;
import ast;
import lexer;
import diag;

using ast;
using lexer::token;

union ParseError
{
  struct ExpectedBlockElement : pub diag::diagnostic
  {
    this(std::string_view src, std::string_view span)
    {
      super.message = "Expected Block Element";
      super.source = diag::source_view(src);
      super.add_label(span.data - src.data, span.len, "expected block element");
    }

    ~this() = default;
  }

  struct InvalidExpressionElement : pub diag::diagnostic
  {
    this(std::string_view src, std::string_view span)
    {
      super.message = "Invalid Expression Element";
      super.source = diag::source_view(src);
      super.add_label(span.data - src.data, span.len, "invalid expression element");
    }

    ~this() = default;
  }

  struct InvalidNumericLiteral : pub diag::diagnostic
  {
    this(std::string_view src, std::string_view span)
    {
      super.message = "Invalid Numeric Literal";
      super.source = diag::source_view(src);
      super.add_label(span.data - src.data, span.len, "invalid numeric literal");
    }

    ~this() = default;
  }
}

enum PrecLevel
{
  Zero            = 0,
  Assignment      = 1,    // =
  Semi            = 2,    // ;
  Pipe            = 3,    // |
  Rescue          = 4,    // rescue
  Conditional     = 5,    // ?
  LogicalOr       = 6,    // or
  LogicalAnd      = 7,    // and
  Equality        = 8,    // ==, !=
  Relational      = 9,    // >=, <=, >, <
  Spaceship       = 10,   // <=>
  Additive        = 11,   // -, +
  Shift           = 12,   // <<, >>
  Multiplicative  = 13,   // *, /, //, %
  Exponential     = 14,   // **
}

fn precedence(token &tok) -> PrecLevel
{
  switch (tok.type)
  {
    case equal:
      return PrecLevel::Assignment;

    case kw_or:
      return PrecLevel::LogicalOr;

    case kw_and:
      return PrecLevel::LogicalAnd;

    case kw_rescue:
      return PrecLevel::Rescue;

    case exclaimequal:
    case equalequal:
      return PrecLevel::Equality;

    case lessequal:
    case less:
    case greaterequal:
    case greater:
      return PrecLevel::Relational;

    case plus:
    case minus:
      return PrecLevel::Additive;

    case star:
    case slash:
    case slashslash:
    case percent:
      return PrecLevel::Multiplicative;

    case starstar:
      return PrecLevel::Exponential;

    case pipe:
      return PrecLevel::Pipe;

    case semi:
      return PrecLevel::Semi;

    else:
      return PrecLevel::Zero;
  }
}

fn unaryopcode(token &tok) -> UnaryOp::Type
{
  switch (tok.type)
  {
    case plus:
      return UnaryOp::Type::Plus;

    case minus:
      return UnaryOp::Type::Minus;

    case exclaim:
      return UnaryOp::Type::LNot;

    else:
      std::panic("invalid unary op");
  }
}

fn binaryopcode(token &tok) -> BinaryOp::Type
{
  switch (tok.type)
  {
    case plus:
      return BinaryOp::Type::Add;

    case minus:
      return BinaryOp::Type::Sub;

    case star:
      return BinaryOp::Type::Mul;

    case slash:
      return BinaryOp::Type::Div;

    case slashslash:
      return BinaryOp::Type::IDiv;

    case percent:
      return BinaryOp::Type::Rem;

    case starstar:
      return BinaryOp::Type::Pow;

    case kw_and:
      return BinaryOp::Type::LAnd;

    case kw_or:
      return BinaryOp::Type::LOr;

    case less:
      return BinaryOp::Type::LT;

    case greater:
      return BinaryOp::Type::GT;

    case lessequal:
      return BinaryOp::Type::LE;

    case greaterequal:
      return BinaryOp::Type::GE;

    case equalequal:
      return BinaryOp::Type::EQ;

    case exclaimequal:
      return BinaryOp::Type::NE;

    case kw_rescue:
      return BinaryOp::Type::Rescue;

    case equal:
      return BinaryOp::Type::Assign;

    case pipe:
      return BinaryOp::Type::Pipe;

    case semi:
      return BinaryOp::Type::Semi;

    else:
      std::panic("invalid binary op");
  }
}

struct parse_context
{
  diag::diag diag;

  std::string_view text;

  diag::diag mut &outdiag;

  parse_context(std::string_view text, diag::diag mut &diag)
    : text(text), diag(diag.leader), outdiag(&diag)
  {
  }

  ~parse_context()
  {
    outdiag << diag;
  }
}

fn consume_token(std::span<token> mut &tokens) -> void
{
  tokens.drop_front!(1);
}

fn consume_token(std::span<token> mut &tokens, token::type expected) -> void
{
  std::assert(tokens[0] == expected);

  tokens.drop_front!(1);
}

fn try_consume_token(std::span<token> mut &tokens, token::type expected) -> bool
{
  if (tokens[0] == expected)
  {
    tokens.drop_front!(1);

    return true;
  }

  return false;
}

fn consume_til(std::span<token> mut &tokens, token::type type) -> void
{
  while (tokens[0] != type && tokens[0] != token::type::eof)
  {
    tokens.drop_front!(1);
  }
}

fn consume_adjacent(std::span<token> mut &tokens) -> std::string_view
{
  var span = std::string_view(tokens[0].span.data, 0);

  while (tokens[0].type != token::type::eof)
  {
    if (tokens[0].span.data != span.end)
      break;

    span.len += tokens[0].span.len;

    consume_token(&mut tokens, tokens[0].type);
  }

  return span;
}

fn consume_adjacent_til(std::span<token> mut &tokens, token::type type) -> std::string_view
{
  var span = std::string_view(tokens[0].span.data, 0);

  while (tokens[0] != type && tokens[0] != token::type::eof)
  {
    if (tokens[0].span.data != span.end)
      break;

    span.len += tokens[0].span.len;

    consume_token(&mut tokens, tokens[0].type);
  }

  return span;
}

pub fn unescape(std::string_view span) -> std::string
{
  var result = std::string::with_capacity(span.len);

  for (var ch = span.begin, var end = span.end; ch != end; ++ch)
  {
    if (*ch == cast('\\'))
    {
      if (++ch == end)
        break;

      switch (*ch)
      {
        case 'a':
          result += '\a';

        case 'b':
          result += '\b';

        case 'f':
          result += '\f';

        case 'n':
          result += '\n';

        case 'r':
          result += '\r';

        case 't':
          result += '\t';

        case 'v':
          result += '\v';

        case '\'':
          result += '\'';

        case '\"':
          result += '\"';

        case '\\':
          result += '\\';

        case '0':
          result += '\0';

        case 'x':
          var cc = u8(0);
          ch += std::atoi(ch+1, std::min(ch+3, end), &mut cc, 16).len;
          result += cc;

        case 'u':
          var cc = char();
          ch += std::atoi(ch+1, std::min(ch+5, end), &mut cc, 16).len;
          result += cc;

        case 'U':
          var cc = char();
          ch += std::atoi(ch+1, std::min(ch+9, end), &mut cc, 16).len;
          result += cc;

        else:
          result += *ch;
      }
    }
    else
    {
      result += *ch;
    }
  }

  return result;
}

fn parse_null_literal(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  var span = tokens[0].span;

  consume_token(&mut tokens, token::type::kw_null);

  return Expression::Null(span);
}

fn parse_bool_literal(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  var span = tokens[0].span;

  switch (tokens[0].type)
  {
    case kw_true:
      consume_token(&mut tokens, token::type::kw_true);

      return Expression::Boolean(true, span);

    else:
      consume_token(&mut tokens, token::type::kw_false);

      return Expression::Boolean(false, span);
  }
}

fn parse_string_literal(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  var span = tokens[0].span;

  consume_token(&mut tokens, token::type::string_literal);

  if (span.starts_with("'"))
  {
    return Expression::String(span.drop_front(1).drop_back(1), span);
  }

  if (span.starts_with("\""))
  {
    return Expression::String(unescape(span.drop_front(1).drop_back(1)), span);
  }

  return Expression::String(std::string(span), span);
}

fn parse_numeric_literal(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  var span = tokens[0].span;

  consume_token(&mut tokens, token::type::numeric_constant);

  {
    var integer = i64(0);

    if (var result = std::sscan(span, &mut integer); result)
    {
      switch (span[result.len .. span.len])
      {
        case "ns":
          return Expression::Duration(chrono::nanoseconds(integer), span);

        case "Âµs":
          return Expression::Duration(chrono::microseconds(integer), span);

        case "ms":
          return Expression::Duration(chrono::milliseconds(integer), span);

        case "secs":
          return Expression::Duration(chrono::seconds(integer), span);

        case "mins":
          return Expression::Duration(chrono::minutes(integer), span);

        case "hours":
          return Expression::Duration(chrono::hours(integer), span);

        case "days":
          return Expression::Duration(chrono::days(integer), span);

        case "weeks":
          return Expression::Duration(chrono::weeks(integer), span);

        case "b":
        case "B":
          return Expression::FileSize(integer, span);

        case "kb":
        case "kB":
        case "KB":
          return Expression::FileSize(integer * 1_000, span);

        case "mb":
        case "MB":
          return Expression::FileSize(integer * 1_000_000, span);

        case "gb":
        case "GB":
          return Expression::FileSize(integer * 1_000_000_000, span);

        case "tb":
        case "TB":
          return Expression::FileSize(integer * 1_000_000_000_000, span);

        case "pb":
        case "PB":
          return Expression::FileSize(integer * 1_000_000_000_000_000, span);

        case "eb":
        case "EB":
          return Expression::FileSize(integer * 1_000_000_000_000_000_000, span);

        case "kib":
        case "KiB":
          return Expression::FileSize(integer * 1_024, span);

        case "mib":
        case "MiB":
          return Expression::FileSize(integer * 1_048_576, span);

        case "gib":
        case "GiB":
          return Expression::FileSize(integer * 1_073_741_824, span);

        case "tib":
        case "TiB":
          return Expression::FileSize(integer * 1_099_511_627_776, span);

        case "pib":
        case "PiB":
          return Expression::FileSize(integer * 1_125_899_906_842_624, span);

        case "eib":
        case "EiB":
          return Expression::FileSize(integer * 1_152_921_504_606_846_976, span);

        case "":
          return Expression::Integer(integer, span);
      }
    }
  }

  {
    var number = f64(0.0);

    if (var result = std::sscan(span, &mut number); result)
    {
      switch (span[result.len .. span.len])
      {
        case "secs":
          return Expression::Duration(chrono::seconds(number), span);

        case "mins":
          return Expression::Duration(chrono::minutes(number), span);

        case "hours":
          return Expression::Duration(chrono::hours(number), span);

        case "days":
          return Expression::Duration(chrono::hours(number * 24.0), span);

        case "weeks":
          return Expression::Duration(chrono::hours(number * 24.0 * 7.0), span);

        case "":
          return Expression::Number(number, span);
      }
    }
  }

  ctx.diag.error(ParseError::InvalidNumericLiteral(ctx.text, span));

  consume_til(&mut tokens, token::type::eol);

  return Expression();
}

fn parse_unary_plus(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  consume_token(&mut tokens, token::type::plus);

  return Expression::UnaryOp(UnaryOp::Type::Plus, parse_expression_left(&mut ctx, &mut tokens));
}

fn parse_unary_minus(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  consume_token(&mut tokens, token::type::minus);

  return Expression::UnaryOp(UnaryOp::Type::Minus, parse_expression_left(&mut ctx, &mut tokens));
}

fn parse_unary_not(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  consume_token(&mut tokens, token::type::exclaim);

  return Expression::UnaryOp(UnaryOp::Type::LNot, parse_expression_left(&mut ctx, &mut tokens));
}

fn parse_declref(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  std::panic("not implemented");
}

fn parse_argument(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  switch (tokens[0].type)
  {
    else:

      var span = consume_adjacent(&mut tokens);

      if (span.len > 1)
      {
        if (span.starts_with("'") && span.ends_with("'"))
        {
          return Expression::String(span[1 .. span.len-1], span);
        }

        if (span.starts_with("\"") && span.ends_with("\""))
        {
          return Expression::String(unescape(span[1 .. span.len-1]), span);
        }

        if (span.starts_with("$"))
        {
          std::panic("not implemented");
        }
      }

      return Expression::Literal(span);

    case block:

      return parse_expression(&mut ctx, &mut tokens);
  }
}

fn parse_callee(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  var cmd = tokens[0].span;

  switch (tokens[0].type)
  {
    case slash:
    case period:
    case dotdot:
      cmd = consume_adjacent(&mut tokens);

    case string_literal:
      consume_token(&mut tokens, token::type::string_literal);
  }

  var arguments = std::vector<Argument>();

  while (tokens[0] != token::type::eof)
  {
    switch (tokens[0].type)
    {
      case minus:

        var flags = consume_adjacent(&mut tokens);

        arguments.push_back(Argument::Flags(String(unescape(flags), flags)));

      case minusminus:

        var name = consume_adjacent_til(&mut tokens, token::type::equal);

        if (try_consume_token(&mut tokens, token::type::equal) && tokens[0] != token::type::eof)
        {
          var expr = parse_argument(&mut ctx, &mut tokens);

          arguments.push_back(Argument::Named((String(unescape(name), name), &move expr)));
        }
        else
        {
          arguments.push_back(Argument::Flags(String(unescape(name), name)));
        }

      else:

        var expr = parse_argument(&mut ctx, &mut tokens);

        arguments.push_back(Argument::Free(&move expr));

      case pipe:
      case semi:
      case eol:
        break;
    }
  }

  return Expression::Call(String(unescape(cmd), cmd), &move arguments);
}

fn parse_group_expression(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  var span = tokens[0].span;

  consume_token(&mut tokens, token::type::block);

  var inners = lexer::lex(span.drop_front(1).drop_back(1));

  var expr = parse_expression(&mut ctx, &mut std::span(inners));

  return Expression::UnaryOp(UnaryOp::Type::Group, &move expr);
}

fn parse_expression_left(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  switch (tokens[0].type)
  {
    case kw_null:
      return parse_null_literal(&mut ctx, &mut tokens);

    case kw_true:
    case kw_false:
      return parse_bool_literal(&mut ctx, &mut tokens);

    case numeric_constant:
      return parse_numeric_literal(&mut ctx, &mut tokens);

    case plus:
      return parse_unary_plus(&mut ctx, &mut tokens);

    case minus:
      return parse_unary_minus(&mut ctx, &mut tokens);

    case exclaim:
      return parse_unary_not(&mut ctx, &mut tokens);

    case slash:
    case period:
    case dotdot:
      return parse_callee(&mut ctx, &mut tokens);

    case string_literal:
      switch (tokens[0].span[0])
      {
        case '"':
        case '\'':
          return parse_string_literal(&mut ctx, &mut tokens);

        case '$':
          return parse_declref(&mut ctx, &mut tokens);

        case '\\':
        case 'a' ..= 'z':
        case 'A' ..= 'Z':
          return parse_callee(&mut ctx, &mut tokens);
      }

    case block:
      switch (tokens[0].span[0])
      {
        case '(':
          return parse_group_expression(&mut ctx, &mut tokens);
      }
  }

  ctx.diag.error("internal error: unable to parse expression value");

  consume_til(&mut tokens, token::type::eol);

  return Expression();
}

fn parse_expression_right(parse_context mut &ctx, std::span<token> mut &tokens, PrecLevel minprec, Expression lhs) -> Expression
{
  for (;;)
  {
    var op = tokens[0];
    var prec = precedence(op);

    if (prec < minprec)
      return lhs;

    consume_token(&mut tokens);

    if (tokens[0] == token::type::slash || tokens[0] == token::type::period || (tokens[0] == token::type::string_literal && std::is_alpha(tokens[0].span[0])))
    {
      if (op != token::type::semi && op != token::type::pipe)
        ctx.diag.error(ParseError::InvalidExpressionElement(ctx.text, tokens[0].span));
    }

    var rhs = parse_expression_left(&mut ctx, &mut tokens);

    var nextprec = precedence(tokens[0]);
    var rightassoc = (prec == PrecLevel::Semi || prec == PrecLevel::Pipe || prec == PrecLevel::Conditional || prec == PrecLevel::Assignment);

    if (prec < nextprec || (prec == nextprec && rightassoc))
    {
      rhs = parse_expression_right(&mut ctx, &mut tokens, cast<PrecLevel>(cast<int>(prec) + cast<int>(!rightassoc)), &move rhs);
    }

    lhs = Expression::BinaryOp(binaryopcode(op), &move lhs, &move rhs);
  }

  return lhs;
}

fn parse_expression(parse_context mut &ctx, std::span<token> mut &tokens) -> Expression
{
  return parse_expression_right(&mut ctx, &mut tokens, PrecLevel::Assignment, parse_expression_left(&mut ctx, &mut tokens));
}

pub fn parse(std::string_view &src, diag::diag mut &diag) -> Block
{
  var block = Block();

  var ctx = parse_context(src, &mut diag);

  var tokens = std::span(lexer::lex(src));

  while (tokens[0] != token::type::eof)
  {
    switch (tokens[0].type)
    {
      case kw_null:
      case kw_true:
      case kw_false:
      case string_literal:
      case numeric_constant:
      case plus:
      case minus:
      case exclaim:
      case period:
      case dotdot:
      case slash:
        block.exprs.push_back(parse_expression(&mut ctx, &mut tokens));

      case block:
        switch (tokens[0].span[0])
        {
          case '(':
            block.exprs.push_back(parse_expression(&mut ctx, &mut tokens));

          else:
            ctx.diag.error(ParseError::ExpectedBlockElement(ctx.text, tokens[0].span));
            consume_til(&mut tokens, token::type::eol);
        }

      case eol:
        consume_token(&mut tokens);

      else:
        ctx.diag.error(ParseError::ExpectedBlockElement(ctx.text, tokens[0].span));
        consume_til(&mut tokens, token::type::eol);
    }
  }

  return block;
}

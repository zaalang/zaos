//
// shell
//

import std.stdio;
import std.env;
import readline;
import engine;
import parser;
import diag;

fn test(std::string &input)
{
  var diag = diag::diag("");
  var engine = engine::create();

  var src = engine.add_source("repl", input);
  var block = parser::parse(src, &mut diag);

  if (diag.has_errored)
  {
    std::print(diag.first);

    return;
  }

  var value = engine.evaluate(block, &mut diag);

  std::fputs(std::stderr, "\x1b]133;L\x07");

  if (diag.has_errored)
    std::print(diag.first);

  if (value.is_some)
    std::print(value);
}

fn main() -> int
{
  var history = readline::default_history();

  for (;;)
  {
    var input = readline::create();
    var prompt = readline::default_prompt("> ");

    input.use_history(&history);

    var line = readline::read_line(&mut input, prompt);

    switch (line)
    {
      case enter[input]:
        test(input);

      case ctrl_d:
        break;

      case error[e]:
        std::print("Error: ", e);
    }
  }

  std::print("Done");

  return 0;
}

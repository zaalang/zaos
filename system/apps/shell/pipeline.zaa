//
// pipeline
//

import std.stdlib;
import std.vector;
import sys.thread;
import sys.process;
import value;

using value;

pub struct Pipeline
{
  union Task
  {
    Child(sys::child),
    Thread(sys::thread),
    Value(Value),

    Task(Task &&) = default;
    ~Task() = default;
  }

  std::vector<Task> tasks;

  pub bool capture_stdout;
  pub bool capture_stderr;

  pub fn empty(this &) -> bool
  {
    return this.tasks.empty;
  }

  pub Pipeline() = default;
  pub Pipeline(Pipeline &&) = default;
  pub ~Pipeline() = default;
}

pub fn append(Pipeline mut &pipeline, sys::command mut &cmd) throws(std::error) -> void
{
  if (!pipeline.tasks.empty)
  {
    switch (pipeline.tasks.back)
    {
      case Child[child]:
        cmd.stdin = std::exchange(&mut child.stdout, std::file());

      case Value[value]:

        var fin = std::file();
        var fout = std::file();
        sys::pipe(&mut fin, &mut fout);

        pipeline.tasks.push_back(Pipeline::Task::Thread(sys::thread::spawn(|| [var fout = &move fout, var value = pipeline.read] {

          try
          {
            fout.print(value);
          }
          catch (std::error e)
          {
            std::fprint(std::stderr, e);
          }

        })));

        cmd.stdin = &move fin;
    }
  }

  if (pipeline.capture_stdout)
    cmd.stdout = sys::stdio::piped;

  if (pipeline.capture_stderr)
    cmd.stderr = sys::stdio::piped;

  pipeline.tasks.push_back(Pipeline::Task::Child(cmd.spawn));
}

pub fn append(Pipeline mut &pipeline, Value &&value) throws(std::error) -> void
{
  pipeline.tasks.push_back(Pipeline::Task::Value(&&value));
}

pub fn read(Pipeline mut &pipeline) throws(std::error) -> Value
{
  switch (pipeline.tasks.back)
  {
    case Child[child]:

      var str = std::string();

      if (child.stdout)
      {
        for (;;)
        {
          str.reserve(str.len + 512);

          var len = child.stdout.read(str.data + str.len, str.capacity - str.len);

          if (len == 0)
            break;

          str.append_from_capacity(len);
        }
      }

      if (child.stderr)
      {
        for (;;)
        {
          str.reserve(str.len + 512);

          var len = child.stderr.read(str.data + str.len, str.capacity - str.len);

          if (len == 0)
            break;

          str.append_from_capacity(len);
        }
      }

      return Value::String(str);

    case Value:

      return pipeline.tasks.take_back().Value;
  }

  std::panic();
}

pub fn wait(Pipeline mut &pipeline) -> i32
{
  var code = 0;

  for (var mut &task : pipeline.tasks)
  {
    switch (task)
    {
      case Child[child]:
        code = child.wait();

      case Thread[thread]:
        thread.join();
    }
  }

  pipeline.tasks.clear();

  return code;
}

//
// shell
//

import std.stdio;
import std.env;
import readline;

fn test(std::String &cmdline)
{
  import os.zaos.sched;
  import os.zaos.fcntl : STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO, STDROOT_FILENO, STDCWD_FILENO;

  var argv = std::vector<os::arg>();
  var envp = std::vector<os::arg>();
  var attrs = std::vector<os::attr>();

  for (var arg : cmdline.words)
    argv.push_back(os::arg(arg.data, arg.len));

  for (var arg : std::env::vars)
    envp.push_back(os::arg(arg.data, arg.len));

  attrs.push_back(os::attr(os::attr::stdin, STDIN_FILENO));
  attrs.push_back(os::attr(os::attr::stdout, STDOUT_FILENO));
  attrs.push_back(os::attr(os::attr::stderr, STDERR_FILENO));
  attrs.push_back(os::attr(os::attr::stdroot, STDROOT_FILENO));
  attrs.push_back(os::attr(os::attr::stdcwd, STDCWD_FILENO));
  attrs.push_back(os::attr(os::attr::dupfd(7), 7));

  var pid = os::process_create(argv.data, argv.len, envp.data, envp.len, attrs.data, attrs.len, 0);

  if (pid < 0)
    return pid;

  var rval = 0;
  if (var rc = os::wait(pid, &rval, 0); rc < 0)
    return rc;

  return 0;
}

fn main() -> int
{
  var history = readline::default_history();

  while (true)
  {
    var input = readline::create();
    var prompt = readline::default_prompt("> ");

    input.use_history(&history);

    var line = readline::read_line(&mut input, prompt);

    switch (line)
    {
      case enter[cmdline]:
        test(cmdline);

      case ctrl_d:
        break;

      case error[e]:
        std::print("Error: ", e);
    }
  }

  std::print("Done");

  return 0;
}

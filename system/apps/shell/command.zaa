//
// command
//

import std.stdlib;
import sys.process;
import sys.path;
import sys.fs;
import parser;
import engine;
import pipeline;
import value;
import diag;
import glob;

using value;
using engine;
using pipeline;

pub union Arg
{
  struct flags
  {
    pub std::string value;
    pub std::string_view span;

    pub flags(std::string &&value, std::string_view span)
      : value(&&value), span(span)
    {
    }

    pub flags(flags &&) = default;
    pub ~flags() = default;
  }

  struct named
  {
    pub std::string name;
    pub Value value;
    pub std::string_view span;

    pub named(std::string &&name, Value &&value, std::string_view span)
      : name(&&name), value(&&value), span(span)
    {
    }

    pub named(named &&) = default;
    pub ~named() = default;
  }

  struct free
  {
    pub Value value;
    pub std::string_view span;

    pub free(Value &&value, std::string_view span)
      : value(&&value), span(span)
    {
    }

    pub free(free &&) = default;
    pub ~free() = default;
  }

  pub Flags(flags),
  pub Named(named),
  pub Free(free),

  pub Arg(Arg &&) = default;
  pub ~Arg() = default;
}

union ExecError
{
  struct GlobFailure : pub diag::diagnostic
  {
    this(Engine &engine, std::string_view span)
    {
      super.source = &engine;
      super.message = "Glob Expansion Failure";
      super.loc = engine.source_ident(span);
      super.add_label(engine.source_location(span), span.len, "no matches");
    }

    ~this() = default;
  }
}

fn to_arg(Context mut &ctx, Value &value, std::string_view span) throws(std::error) -> std::string
{
  switch (value)
  {
    case Literal[literal]:
      return parser::unescape(literal);

    case FileSize[filesize]:
      return std::format("{}", filesize);
  }

  return std::format("{}", value);
}

fn into_glob(Context mut &ctx, std::string_view expr, std::string_view span) throws(std::error) -> std::vector<std::string>
{
  var args = std::vector<std::string>();

  if (glob::is_glob(expr))
  {
    for (var &file : glob::glob(expr).files)
    {
      args.push_back(file);
    }

    if (args.empty)
      ctx.raise(ExecError::GlobFailure(ctx.engine, span));
  }
  else
  {
    args.push_back(parser::unescape(expr));
  }

  return args;
}

pub fn run(Context mut &ctx, Pipeline mut &pipeline, std::string &name, std::vector<Arg> &args) throws(std::error) -> void
{
  var path = std::string();

  if (!name.contains(sys::sep_byte))
  {
    for (var &searchpath : std::env::var("PATH").unwrap_or("/zaos/bin").split(":"))
    {
      if (var test = sys::path::join(searchpath, name); sys::exists(test))
      {
        path = test;

        break;
      }
    }

    if (path.empty)
      throw std::system_error(std::errc::not_found);
  }
  else
  {
    path = name;

    if (sys::path::is_relative(path))
      path = sys::path::normalise(sys::path::join(sys::cwd, path));

    if (!sys::exists(path))
      throw std::system_error(std::errc::not_found);
  }

  var cmd = sys::command(path);

  for (var &arg : args)
  {
    switch (arg)
    {
      case Flags[flags]:
        cmd.arguments.push_back(flags.value);

      case Named[named]:
        cmd.arguments.push_back(std::format("{}={}", named.name, to_arg(&mut ctx, named.value, named.span)));

      case Free[free]:
        switch (free.value)
        {
          case Literal[literal]:
            cmd.arguments.append(into_glob(&mut ctx, literal, free.span));

          else:
            cmd.arguments.push_back(to_arg(&mut ctx, free.value, free.span));
        }

    }
  }

  pipeline.append(&mut cmd);
}

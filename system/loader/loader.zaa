//
// loader
//

import std.stdio;
import std.atomic;
import elf.hash;
import elf.image;
import elf.auxvec;
import os.zaos.mman;
import os.zaos.fcntl;

struct arg
{
  u8 *beg;
  u8 *end;
}

struct ctx
{
  i32 rootfd;
  os::ioring ring;

  ctx() = default;
  ctx(obj&) = default;
  ~ctx() = default;
}

struct obj
{
  uintptr base;
  uintptr hashtb;
  uintptr strtab;
  uintptr symtab;
  uintptr rela;
  usize relasz;
  usize relaent;
  uintptr pltrela;
  usize pltrelsz;
  usize pltrelent;

  obj() = default;
  obj(obj&) = default;
  ~obj() = default;
}

fn parse(uintptr base) -> obj
{
  var header = cast<elf::elf64_ehdr*>(base);

  var dynamic = 0;

  for(var i = 0; i < header.e_phnum; ++i)
  {
    var entry = cast<elf::elf64_phdr*>(base + cast(header.e_phoff) + cast(i*header.e_phentsize));

    if (entry.p_type == elf::elf64_ptype::DYNAMIC)
      dynamic = base + cast<uintptr>(entry.p_vaddr);
  }

  var obj = obj();

  obj.base = base;

  for(var entry = cast<elf::elf64_dyn*>(dynamic); entry.d_tag != cast(0); ++entry)
  {
    switch(entry.d_tag)
    {
      case GNU_HASH:
        obj.hashtb = base + cast<uintptr>(entry.d_val);

      case STRTAB:
        obj.strtab = base + cast<uintptr>(entry.d_val);

      case SYMTAB:
        obj.symtab = base + cast<uintptr>(entry.d_val);

      case RELA:
        obj.rela = base + cast<uintptr>(entry.d_val);

      case RELASZ:
        obj.relasz = cast<usize>(entry.d_val);

      case RELAENT:
        obj.relaent = cast<usize>(entry.d_val);

      case JMPREL:
        obj.pltrela = base + cast<uintptr>(entry.d_val);

      case PLTRELSZ:
        obj.pltrelsz = cast<usize>(entry.d_val);

      case PLTREL:
        obj.pltrelent = sizeof<elf::elf64_rela>;
    }
  }

  return obj;
}

fn reloc(obj &obj, obj &lib)
{
  for(var rela = obj.rela, var relasz = obj.relasz; relasz != 0; )
  {
    var rel = cast<elf::elf64_rela*>(rela);

    if (rel.r_info & 0xffffffff == elf::elf64_reltype::R_X86_64_RELATIVE)
    {
      *cast<uintptr mut *>(obj.base + cast<usize>(rel.r_offset)) = obj.base + cast(rel.r_addend);
    }

    rela += obj.relaent;
    relasz -= obj.relaent;
  }

  for(var rela = obj.pltrela, var relasz = obj.pltrelsz; relasz != 0; )
  {
    var rel = cast<elf::elf64_rela*>(rela);

    if (rel.r_info & 0xffffffff == elf::elf64_reltype::R_X86_64_JUMP_SLOT)
    {
      var sym = cast<elf::elf64_sym*>(obj.symtab + cast(rel.r_info >> 32) * sizeof<elf::elf64_sym>);
      var name = cast<u8*>(obj.strtab + cast(sym.st_name));
      var hash = elf::gnu_hash(name);
      var lookup = elf::gnu_lookup(lib.hashtb, lib.strtab, lib.symtab, hash, name);

      if (lookup)
      {
        *cast<uintptr mut *>(obj.base + cast<usize>(rel.r_offset)) = lib.base + cast(lookup.st_value);
      }

      if (!lookup)
        std::print("loader: symbol ", sym.st_name, " not found");
    }

    rela += obj.pltrelent;
    relasz -= obj.pltrelent;
  }
}

fn load(ctx mut &ctx, std::string_view path) -> obj
{
  std::print("loader: loading '", path, "'");

  var page_mask = os::get_pagesize() - 1;

  var fd = os::open(&mut ctx.ring, ctx.rootfd, os::string(path.data, path.len), 0, 0);

  if (fd < 0)
    std::panic("loader: fd ", fd);

  var stat = os::stat();
  if (var result = os::stat(&mut ctx.ring, fd, &stat, 0x7f); result < 0)
    std::panic("loader: stat ", result);

  var mmvec = os::mmvec();
  mmvec.offset = 0;
  mmvec.length = cast(stat.size);
  mmvec.flags = 0;
  mmvec.prot = os::prot::readonly;

  var addr = null<void mut *>();
  if (var result = os::mmap(fd, &mmvec, 1, &addr, 0); result < 0)
    std::panic("loader: mmap ", result);

  var image = elf::image(addr, cast(stat.size));

  if (var result = image.verify_elf_header(); !result)
    std::panic("loader: verify ", result);

  if (image.ehdr.e_type != elf::elf64_etype::DYN)
    std::panic("loader: verify ", elf::result::format_error);

  var loads = std::vector<os::mmvec, N:16>();

  for(var &header : image.program_headers)
  {
    switch (header.phdr.p_type)
    {
      case elf::elf64_ptype::LOAD:
        mmvec.flags = 0;
        mmvec.base = cast<uintptr>(header.phdr.p_vaddr) & ~page_mask;
        mmvec.length = cast<usize>(header.phdr.p_vaddr) & page_mask + cast<usize>(header.phdr.p_filesz);
        mmvec.offset = cast<u64>(header.phdr.p_offset) & ~cast<u64>(page_mask);

        var memsz = cast<usize>(header.phdr.p_vaddr) & page_mask + cast<usize>(header.phdr.p_memsz);

        if (header.phdr.p_filesz != header.phdr.p_memsz)
          mmvec.length = std::min((mmvec.length + page_mask) & ~page_mask, memsz);

        mmvec.prot = os::prot::readonly;

        if (header.phdr.p_flags & elf::pflags::W != 0)
          mmvec.prot = os::prot::readwrite;

        if (header.phdr.p_flags & elf::pflags::X != 0)
          mmvec.prot = os::prot::executable;

        loads.push_back(mmvec);

        if (memsz > mmvec.length)
        {
          mmvec.base += mmvec.length;
          mmvec.offset += cast(mmvec.length);
          mmvec.length = memsz - mmvec.length;
          mmvec.flags = os::mmap::anonymous;
          mmvec.prot = os::prot::readwrite;

          loads.push_back(mmvec);
        }
    }
  }

  if (var result = os::mmap(fd, loads.data, loads.len, &addr, 0); result < 0)
    std::panic("loader: mmap ", result);

  for(var &header : image.program_headers)
  {
    switch (header.phdr.p_type)
    {
      case elf::elf64_ptype::LOAD:
        if (header.phdr.p_filesz < header.phdr.p_memsz)
        {
          var base = cast<uintptr>(header.phdr.p_vaddr);
          var filsz = cast<usize>(header.phdr.p_filesz);
          var memsz = cast<usize>(header.phdr.p_memsz);

          std::memset(cast<void mut *>(cast<uintptr>(addr) + base + filsz), 0, memsz - filsz);
        }
    }
  }

  os::munmap(image.ehdr, image.len);
  os::close(&mut ctx.ring, fd);

  return parse(cast<uintptr>(addr));
}

extern fn tls_area(arg *envp) -> usize;
extern fn init_tcb(void mut *memory, arg *envp) -> void;

extern fn main(int argc, arg *argv, arg *envp) -> uintptr
{
  init_tcb(__alloca(tls_area(envp)), envp);

  var envc = 0;
  while ((envp + envc).beg)
    ++envc;

  var auxv = cast<elf::auxval mut *>(envp + envc + 1);

  var base = 0;
  var vdso = 0;

  for(var entry = auxv; entry.type != cast(0); ++entry)
  {
    switch (entry.type)
    {
      case BASE:
        base = entry.value;

      case SYSINFO:
        vdso = entry.value;
    }
  }

  var self = parse(base);
  var libs = parse(vdso);

  reloc(self, libs);

  #if (1)
  {
    for(var i = 0; i < cast<usize>(argc); ++i)
      std::print("loader: arg ", i, ": ", std::string_view((argv + i).beg, (argv + i).end));

    for(var i = 0; i < cast<usize>(envc); ++i)
      std::print("loader: env ", i, ": ", std::string_view((envp + i).beg, (envp + i).end));

    for(var entry = auxv; entry.type != cast(0); ++entry)
      std::print("loader: ", *entry);
  }

  if (argc == 0)
    std::exit(-cast<i32>(std::errc::invalid_argument));

  var ctx = ctx();

  for(var entry = auxv; entry.type != cast(0); ++entry)
  {
    switch (entry.type)
    {
      case ROOTFD:
        ctx.rootfd = cast<i32>(entry.value);

      case RINGFD:
        ctx.ring.fd = cast<i32>(entry.value);

      case RINGHDR:
        ctx.ring.header = cast<os::ioring_header mut *>(entry.value);
    }
  }

  var main = load(&mut ctx, std::string_view((argv + 0).beg, (argv + 0).end));
  var start = main.base + cast(cast<elf::elf64_ehdr*>(main.base).e_entry);

  for(var entry = auxv; entry.type != cast(0); ++entry)
  {
    switch (entry.type)
    {
      case BASE:
        entry.value = main.base;

      case PHDR:
        entry.value = main.base + cast(cast<elf::elf64_ehdr*>(main.base).e_phoff);

      case PHENT:
        entry.value = cast(cast<elf::elf64_ehdr*>(main.base).e_phentsize);

      case PHNUM:
        entry.value = cast(cast<elf::elf64_ehdr*>(main.base).e_phnum);
    }
  }

  reloc(main, libs);

std::printf("loader: {:#x}\n", main.base);

  return start;
}

//
// winton
//

import std.stdio;
import std.function;
import app.loop;
import display;
import compositor;
import zidl.zaos_sys;

struct service
{
  app::loop loop;

  std::flat_hash_map<std::string, std::delegate<void fn(zidl::string_view, zidl::channel)>> on_connect;

  service() = default;
  ~service() = default;
}

fn initialise(service mut &service) -> i32
{
  if (var result = app::initialise(&mut service.loop); result < 0)
    std::panic("winton: unable to init loop - ", cast<std::errc>(-result));

  service.loop.connect_handler = &cast<void fn(app::loop mut &, zidl::string_view, zidl::channel)>(connect_handler);

  return 0;
}

fn connect_handler(app::loop mut &loop, zidl::string_view uri, zidl::channel channel) -> void
{
  var service = cast<service mut *>(cast<uintptr>(&loop) - offsetof(service::loop));

  switch (service.on_connect.get(uri.strip_prefix("zaos.winton/").cut('/').0))
  {
    case Some[callback]:
      callback(uri, &move channel);
  }
}

fn run(service mut &service) -> void
{
  service.loop.run();
}

fn main()
{
  var service = service();

  if (var result = initialise(&mut service); result < 0)
    std::panic("winton: unable to initialise - ", cast<std::errc>(-result));

  var display = display::create();
  if (var result = display::initialise(&mut display); result < 0)
    std::print("winton: failed to initialise display - ", cast<std::errc>(-result));

  display.fill(0, 0, display.width, display.height, 0xff336698);

  var compositor = compositor::create();
  if (var result = compositor::initialise(&mut compositor); result < 0)
    std::print("winton: failed to initialise compositor - ", cast<std::errc>(-result));

  service.on_connect.insert("compositor", |uri, channel| {
    compositor.accept(uri, &move channel);
  });

  service.run();
}

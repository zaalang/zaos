//
// display
//

import std.stdio;
import math : transform, bound, vec2, vec3, vec4;
import os.zaos.mman;
import os.zaos.fcntl;

enum fbio
{
  const screeninfo = 0x80034600;
}

struct screeninfo
{
  u64 caps;
  usize width;
  usize height;
  usize depth;
  usize pitch;

  screeninfo() = default;
  screeninfo(screeninfo&) = default;
  ~screeninfo() = default;
}

extern fn thread_ring() -> os::ioring mut &;

pub struct display
{
  screeninfo si;
  std::mutable_span<u8> fb;
  std::vector<u8> back_buffer;

  pub fn dt(this&) -> u64 { return 1_000_000_000/60; }

  pub fn width(this&) { return cast<int>(this.si.width); }
  pub fn height(this&) { return cast<int>(this.si.height); }
  pub fn bound(this&) { return bound::from(vec2(0.0, 0.0), vec2(cast(this.si.width), cast(this.si.height))); }

  display() = default;
  pub ~display() = default;
}

pub struct bitmap
{
  pub int width;
  pub int height;
  pub int format;
  pub usize stride;
  pub u8 *bits;

  pub bitmap() = default;
  pub bitmap(bitmap&) = default;
  pub fn =(bitmap mut &, bitmap &) -> bitmap mut & = default;
  pub ~bitmap() = default;
}

pub fn create() -> display
{
  return display();
}

pub fn initialise(display mut &display) -> i32
{
  using os;

  var fd = open(&mut thread_ring, 4, os::string("/dev/fb0"), O_RDWR, 0);

  if (fd < 0)
    return fd;

  if (var result = ioctl(&mut thread_ring, fd, fbio::screeninfo, &display.si, sizeof<screeninfo>); result < 0)
    return result;

  var mmvec = os::mmvec();
  mmvec.offset = 0;
  mmvec.length = display.si.pitch*display.si.height;
  mmvec.flags = os::mmap::shared;
  mmvec.prot = os::prot::readwrite;

  var addr = null<void mut *>();
  if (var result = mmap(fd, &mmvec, 1, &addr, 0); result < 0)
    return result;

  display.fb = std::mutable_span(cast<u8 mut *>(addr), mmvec.length);

  std::memset(display.fb.data, 0, display.fb.len);

  display.back_buffer.resize(display.fb.len);

  close(&mut thread_ring, fd);

  return 0;
}

pub fn fill(display mut &display, int x0, int y0, int x1, int y1, u32 color) -> i32
{
  if (x1 <= x0 || y1 <= y0)
    return -22;

  var x0 = cast<usize>(std::max(x0, 0));
  var y0 = cast<usize>(std::max(y0, 0));

  if (x0 >= display.si.width || x1 < 0)
    return 0;

  if (y0 >= display.si.height || y1 < 0)
    return 0;

  var x1 = std::min(cast<usize>(x1), display.si.width);
  var y1 = std::min(cast<usize>(y1), display.si.height);

  var dstrow = cast<u32 mut *>(display.back_buffer.data + y0 * display.si.pitch);

  for (var y = y0; y < y1; ++y)
  {
    var dst = dstrow + x0;

    for (var x = x0; x < x1; ++x)
      *dst++ = color;

    dstrow += display.si.pitch/4;
  }

  return 0;
}

fn premultiply(u32 rgba, u32 alpha) -> u32
{
  // https://arxiv.org/pdf/2202.02864.pdf

  var agrb = cast<u64>(alpha) * ((cast<u64>(rgba) | (cast<u64>(rgba) << 24)) & 0x00ff00ff00ff00ff);

  agrb += 0x80008000800080;
  agrb += (agrb >> 8) & 0x00ff00ff00ff00ff;
  agrb >>= 8;

  return cast<u32>((agrb & 0x00ff00ff) | ((agrb >> 24) & 0xff00ff00));
}

pub fn blit(display mut &display, bound &clip, vec3 translation, int width, int height, usize stride, u8 *bits, int format) -> i32
{
  if (!bits)
    return -22;

  if (width <= 0 || height <= 0)
    return -22;

  if (!intersects(clip, display.bound))
    return 0;

  var rect = clamp(clamp(bound::from(vec2(translation.x, translation.y), vec2(translation.x + cast(width), translation.y + cast(height))), clip), display.bound);

  if (rect.empty)
    return 0;

  var x0 = cast<usize>(std::floor(rect.low(0)));
  var y0 = cast<usize>(std::floor(rect.low(1)));

  var i0 = cast<usize>(std::floor(rect.low(0)) - translation.x);
  var j0 = cast<usize>(std::floor(rect.low(1)) - translation.y);

  var x1 = cast<usize>(std::ceil(rect.high(0)));
  var y1 = cast<usize>(std::ceil(rect.high(1)));

  var srcrow = bits + j0 * stride;
  var dstrow = cast<u32 mut *>(display.back_buffer.data + y0 * display.si.pitch);

  for (var y = y0; y < y1; ++y)
  {
    var src = cast<u32*>(srcrow) + i0;
    var dst = dstrow + x0;

    switch (format)
    {
      case 0:
        for (var x = x0; x < x1; ++x)
          *dst++ = *src++;

      case 1:
        for (var x = x0; x < x1; ++x, ++src, ++dst)
          *dst = std::add_with_carry(*src, premultiply(*dst, 255 - ((*src & 0xff000000) >> 24))).0;
    }

    srcrow += stride;
    dstrow += display.si.pitch/4;
  }

  return 0;
}

pub fn blit(display mut &display, bound &clip, transform &transform, int width, int height, usize stride, u8 *bits, int format) -> i32
{
  if (!bits)
    return -22;

  if (width <= 0 || height <= 0)
    return -22;

  if (!intersects(clip, display.bound))
    return 0;

  var rect = clamp(clamp(transform * bound::from(vec2(0.0, 0.0), vec2(cast(width), cast(height))), clip), display.bound);

  if (rect.empty)
    return 0;

  var x0 = std::floor(rect.low(0));
  var y0 = std::floor(rect.low(1));

  var x1 = std::ceil(rect.high(0));
  var y1 = std::ceil(rect.high(1));

  var inverse = inverse(transform);

  for (var y = y0; y < y1; ++y)
  {
    var dstrow = cast<u32 mut *>(display.back_buffer.data + cast(y) * display.si.pitch);

    for (var x = x0; x < x1; ++x)
    {
      var pt = project(inverse, vec2(x, y));

      if (pt.x >= 0.0 && pt.x < cast(width) && pt.y >= 0.0 && pt.y < cast(height))
      {
        var dst = dstrow + cast(x);
        var src = cast<u32*>(bits + cast(pt.y) * stride) + cast(pt.x);

        switch (format)
        {
          case 0:
            *dst = *src;

          case 1:
            *dst = std::add_with_carry(*src, premultiply(*dst, 255 - ((*src & 0xff000000) >> 24))).0;
        }
      }
    }
  }

  return 0;
}

pub fn flip(display mut &display, bound &region) -> i32
{
  var rect = clamp(region, display.bound);

  if (rect.empty)
    return 0;

  var x0 = cast<usize>(std::floor(rect.low(0)));
  var y0 = cast<usize>(std::floor(rect.low(1)));

  var x1 = cast<usize>(std::ceil(rect.high(0)));
  var y1 = cast<usize>(std::ceil(rect.high(1)));

  var srcrow = cast<u32 mut *>(display.back_buffer.data + y0 * display.si.pitch);
  var dstrow = cast<u32 mut *>(display.fb.data + y0 * display.si.pitch);

  for (var y = y0; y < y1; ++y)
  {
    var src = srcrow + x0;
    var dst = dstrow + x0;

    for (var x = x0; x < x1; ++x)
      *dst++ = *src++;

    srcrow += display.si.pitch/4;
    dstrow += display.si.pitch/4;
  }

  return 0;
}

pub fn destroy(display mut &display)
{
  os::munmap(video.fb.data, video.fb.len);
}

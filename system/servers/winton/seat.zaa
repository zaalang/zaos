//
// seat
//

import std.stdlib;
import app.loop;
import input.driver;
import input.keymap;
import input.device;
import os.zaos.fcntl;

pub struct seat
{
  input::driver driver;
  input::keymap keymap;

  pub std::delegate<(input::event &) -> void> on_event;

  app::loop::wait_t input_handler;

  seat() = default;
  pub ~seat() = default;
}

pub fn create() -> seat
{
  return seat();
}

pub fn initialise(seat mut &seat) -> i32
{
  if (var rc = seat.driver.initialise(); rc < 0)
    return rc;

  if (var rc = seat.keymap.initialise("/zaos/data/us.keymap", "/zaos/data/us.keymap"); rc < 0)
    std::print("winton: failed to initialise input keymap - ", cast<std::errc>(-rc));

  seat.driver.add_device("/dev/input/keyboard/ps2/0", seat.keymap);
  seat.driver.add_device("/dev/input/mouse/ps2/0", input::mouse());

  seat.input_handler.callback = &cast<fn (app::loop mut &, app::loop::wait_t mut *) -> void>(input_handler);

  app::loop::current.begin_wait_fd(seat.driver.fd, &seat.input_handler);

  return 0;
}

fn input_handler(app::loop mut &loop, app::loop::wait_t mut *wait) -> void
{
  var seat = cast<seat mut *>(cast<uintptr>(wait) - offsetof(seat::input_handler));

  seat.driver.dispatch();

  while (seat.driver.has_events)
  {
    switch (var event = seat.driver.next_event)
    {
      case keyboard_key:
      case pointer_motion:
      case pointer_button:
      case pointer_wheel:
        seat.on_event(event);
    }
  }
}

//
// shell
//

import std.stdlib;
import std.box;
import app.loop;
import zidl.zaos_winton;

using winton = zidl::zaos_winton;

struct client
{
  shell mut *shell;

  zidl::channel channel;
  app::loop::wait_t handler;

  ~client()
  {
    destroy(&this);
  }

  client() = default;
}

pub struct shell
{
  zidl::channel endpoint;
  app::loop::wait_t handler;

  std::vector<std::box<client>> clients;

  shell() = default;
  pub ~shell() = default;
}

pub fn create() -> shell
{
  return shell();
}

pub fn connect(shell mut &shell) throws -> void
{
  shell.endpoint = app::connect_to_service("zaos.winton/shell");
  shell.handler.callback = &cast<fn (app::loop mut &, app::loop::wait_t mut *) -> void>(message_handler);

  app::loop::current.begin_wait(shell.endpoint, &shell.handler);
}

pub fn accept(shell mut &shell, zidl::string_view uri, zidl::channel channel) -> void
{
  std::print("newton shell: accept connection");

  var mut &client = shell.clients.push_back();

  client.shell = &shell;

  client.channel = &move channel;
  client.handler.callback = &cast<fn (app::loop mut &, app::loop::wait_t mut *) -> void>(client_handler);

  app::loop::current.begin_wait(client.channel, &client.handler);
}

fn client_handler(app::loop mut &loop, app::loop::wait_t mut *wait) -> void
{
  var client = cast<client mut *>(cast<uintptr>(wait) - offsetof(client::handler));

  var result = zidl::errc::bad_dispatch;
//  var result = zidl::recv<newton::shell>(shell.channel, |msg, completer| {
//
//    switch (msg)
//    {
//
//      else:
//        completer.raise(zidl::errc::bad_dispatch);
//    }
//  });

  if (!result)
  {
    std::print("newton shell: client error - ", cast<zidl::errc>(-cast<i32>(result)));

    disconnect_client(client.shell, client);
  }
}

fn destroy(client mut *client) -> void
{
  app::loop::current.cancel_wait(&client.handler);
}

fn disconnect_client(shell mut *shell, client mut *client) -> void
{
  shell.clients.erase_if(|k| &*k == client);
}

fn message_handler(app::loop mut &loop, app::loop::wait_t mut *wait) -> void
{
  var shell = cast<shell mut *>(cast<uintptr>(wait) - offsetof(shell::handler));

  var result = zidl::recv<zidl::zaos_winton::shell>(shell.endpoint, |msg, completer| {

    switch (msg)
    {
    }
  });

  if (!result)
  {
    std::print("newton error - ", cast<zidl::errc>(-cast<i32>(result)));

    loop.cancel_wait(wait);
    shell.endpoint.close();
  }
}

pub fn create_desktop(shell mut &shell, winton::uuid &uuid) -> void
{
  zidl::send<winton::shell::create_desktop_request>(shell.endpoint, uuid);
}

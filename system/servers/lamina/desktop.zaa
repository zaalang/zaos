//
// newton desktop
//

import std.stdio;
import app.loop;
import os.zaos.mman;
import os.zaos.fcntl;
import zidl.zaos_sys;
import zidl.zaos_winton;
import shell;

using winton = zidl::zaos_winton;

extern fn thread_ring() -> os::ioring mut &;

pub struct desktop
{
  shell::shell mut &shell;

  i32 desktop_width;
  i32 desktop_height;
  u32 desktop_surface;
  u32 pointer_surface;

  zidl::channel endpoint;
  app::loop::wait_t handler;

  pub fn connect(this mut &) throws -> void
  {
    this.endpoint = app::connect_to_service("zaos.winton/compositor");
    this.handler.callback = &cast<void fn(app::loop mut &, app::loop::wait_t mut *)>(message_handler);

    app::loop::current.begin_wait(this.endpoint, &this.handler);

    this.desktop_surface = 1;
    zidl::send<winton::compositor::create_surface_request>(this.endpoint, this.desktop_surface);

    this.pointer_surface = 2;
    zidl::send<winton::compositor::create_surface_request>(this.endpoint, this.pointer_surface);
  }

  fn surface_attach(this mut &, u32 surface_id, u32 buffer_id) -> void
  {
    zidl::send<winton::compositor::surface_attach_request>(this.endpoint, surface_id, buffer_id);
  }

  fn surface_damage(this mut &, u32 surface_id, i32 x, i32 y, i32 width, i32 height) -> void
  {
    zidl::send<winton::compositor::surface_damage_request>(this.endpoint, surface_id, x, y, width, height);
  }

  fn surface_commit(this mut &, u32 surface_id, bool callback = false) -> void
  {
    zidl::send<winton::compositor::surface_commit_request>(this.endpoint, surface_id, callback);
  }

  fn surface(this mut &, u32 surface_id, winton::uuid &uuid) -> void
  {
    if (surface_id == this.desktop_surface)
    {
      this.shell.create_desktop(uuid);

      this.surface_commit(surface_id);
    }
  }

  fn configure_window(this mut &, u32 surface_id, i32 width, i32 height, winton::state state) -> void
  {
    if (surface_id == this.desktop_surface)
    {
      this.desktop_width = width;
      this.desktop_height = height;
    }
  }

  fn configure(this mut &, u32 surface_id, u32 serial) -> void
  {
    if (surface_id == this.desktop_surface)
    {
      zidl::send<winton::compositor::acknowledge_request>(this.endpoint, serial);

      this.redraw_desktop();
    }
  }

  fn enter(this mut &, u32 surface_id, u32 serial) -> void
  {
    zidl::send<winton::compositor::set_standard_cursor_request>(this.endpoint, serial, this.pointer_surface, winton::cursor::arrow);

    this.surface_commit(this.pointer_surface);
  }

  fn redraw_desktop(this mut &) -> void
  {
    try
    {
      var width = this.desktop_width;
      var height = this.desktop_height;
      var stride = this.desktop_width * sizeof<u32>;

      var (client_end, server_end) = zidl::buffer::create(cast<usize>(height * stride));

      zidl::send<winton::compositor::create_buffer_request>(this.endpoint, 1, &move server_end, 0, width, height, stride, winton::format::B8G8R8X8);

      var mmvec = os::mmvec();
      mmvec.offset = 0;
      mmvec.length = cast<usize>(height * stride);
      mmvec.flags = 0;
      mmvec.prot = os::prot::readwrite;

      var addr = null<u32 mut *>();
      if (var result = os::mmap(client_end.fd, &mmvec, 1, &addr, 0); result < 0)
      {
        zidl::send<winton::compositor::buffer_destroy_request>(this.endpoint, 1);

        throw std::system_error(cast<std::errc>(-result));
      }

      for (var i = 0; i < mmvec.length / sizeof<u32>; ++i)
        *(addr + i) = 0xff336698;

      this.surface_attach(1, 1);
      this.surface_damage(1, 0, 0, width, height);
      this.surface_commit(1);

      zidl::send<winton::compositor::buffer_destroy_request>(this.endpoint, 1);

      os::munmap(addr, mmvec.length);
    }
    catch(std::error e)
    {
      std::print("redraw - ", e);
    }
  }

  fn message_handler(app::loop mut &loop, app::loop::wait_t mut *wait) -> void
  {
    var this = cast<desktop mut *>(cast<uintptr>(wait) - offsetof(desktop::handler));

    var result = zidl::recv<winton::compositor>(this.endpoint, |msg, completer| {

      switch (msg)
      {
        case surface[msg]:
          this.surface(msg.surface_id, msg.uuid);

        case configure_window[msg]:
          this.configure_window(msg.surface_id, msg.width, msg.height, msg.state);

        case configure[msg]:
          this.configure(msg.surface_id, msg.serial);

        case pointer_enter[msg]:
          this.enter(msg.surface_id, msg.serial);

        case error[msg]:
          std::print("error response - ", msg.code);
      }
    });

    if (!result)
    {
      std::print("client error - ", cast<zidl::errc>(-cast<i32>(result)));

      loop.cancel_wait(wait);
      this.endpoint.close();
    }
  }

  desktop(shell::shell mut &shell)
    : shell(&shell)
  {
  }

  pub ~desktop() = default;
}

pub fn create(shell::shell mut &shell) throws -> desktop
{
  return desktop(&mut shell);
}

//
// lamina
//

import std.stdio;
import std.function;
import app.loop;
import zidl.zaos_sys;
import shell;
import desktop;

struct service
{
  app::loop loop;

  std::delegate<(zidl::string_view, zidl::channel) -> void> on_connect;

  service() = default;
  ~service() = default;
}

fn initialise(service mut &service) -> i32
{
  if (var rc = app::initialise(&mut service.loop); rc < 0)
    std::panic("winton: unable to init loop - ", cast<std::errc>(-rc));

  service.loop.connect_handler = &cast<fn (app::loop mut &, zidl::string_view, zidl::channel) -> void>(connect_handler);

  return 0;
}

fn connect_handler(app::loop mut &loop, zidl::string_view uri, zidl::channel channel) -> void
{
  var service = cast<service mut *>(cast<uintptr>(&loop) - offsetof(service::loop));

  service.on_connect(uri, &move channel);
}

fn run(service mut &service) -> void
{
  service.loop.run();
}

fn main() -> int
{
  var service = service();

  if (var rc = initialise(&mut service); rc < 0)
    std::panic("newton: unable to initialise - ", cast<std::errc>(-rc));

  try
  {
    var shell = shell::create();

    service.on_connect = |uri, channel| {
      shell.accept(uri, &move channel);
    };

    shell.connect();

    var desktop = desktop::create(&mut shell);

    desktop.connect();

    service.run();
  }
  catch(std::error e)
  {
    std::print("error - ", e);
  }

  return 0;
}

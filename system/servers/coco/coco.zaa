//
// coco
//

import std.stdio;
import display;
import terminal;
import seat;
import env;
import tab;

fn main()
{
  var seat = seat::create();
  if (var rc = seat::initialise(&mut seat); rc < 0)
    std::print("coco: failed to initialise input - ", cast<std::errc>(-rc));

  var display = display::create();
  if (var rc = display::initialise(&mut display); rc < 0)
    std::print("coco: failed to initialise display - ", cast<std::errc>(-rc));

  var terminal = terminal::create(&mut seat, &mut display);
  if (var rc = terminal::initialise(&mut terminal); rc < 0)
    std::print("coco: failed to initialise terminal - ", cast<std::errc>(-rc));

  if (var rc = terminal.set_font("/zaos/boot/unifont-14.0.03.hex"); rc < 0)
    std::print("coco: failed to set terminal font - ", cast<std::errc>(-rc));

  terminal.print(std::string_view("ZaOS Extended Colour Console\r\n\r\n"));
  terminal.render();

  var env = env::create();

  while (true)
  {
    var username = [0; 128];

    terminal.write("login: ");

    if (terminal.read(&mut username) > 0)
    {
      var password = [0; 128];

      terminal.write("password: ");

      if (terminal.read_pass(&mut password) > 0)
      {
        if (env.login(username, password) == 0)
        {
          terminal.write("\nOK\n");

          break;
        }
      }
    }
  }

  while (true)
  {
    var completer = tab::completer();

    switch (terminal.read_line(&completer))
    {
      case enter[cmdline]:
        var args = cmdline.words;

        if (!args.empty)
        {
          var result = -2;

          if (args.front == "ls")
          {
            import ls : *;
            result = ls(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "cd")
          {
            import cd : *;
            result = cd(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "cat")
          {
            import cat : *;
            result = cat(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "cp")
          {
            import cp : *;
            result = cp(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "pwd")
          {
            import pwd : *;
            result = pwd(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "stat")
          {
            import stat : *;
            result = stat(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "mkdir")
          {
            import mkdir : *;
            result = mkdir(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "rm")
          {
            import rm : *;
            result = rm(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "rename")
          {
            import rename : *;
            result = rename(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "symlink")
          {
            import symlink : *;
            result = symlink(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "ps")
          {
            import ps : *;
            result = ps(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "start")
          {
            import start : *;
            result = start(&mut terminal, &mut env, cmdline);
          }

          if (args.front == "test")
          {
            import test : *;
            result = test(&mut terminal, &mut env, cmdline);
          }

          terminal.flush();

          if (terminal.x != 0)
            terminal.write("\x1b[36m%\x1b[0m\n");

          switch (result)
          {
            case 0:
              terminal.write("OK\n");

            case -2:
              terminal.write("?NOTFOUND\n");

            case -17:
              terminal.write("?EXISTS\n");

            else:
              terminal.write("?ERROR\n");
          }
        }

      else:
        terminal.write("?CANCELLED\n");
    }
  }
}

//
// start
//

import std.stdio;
import sys.path;
import os.zaos.sched;
import terminal;
import chrono;
import env;

extern fn thread_ring() -> os::ioring mut &;

fn exists(std::string &path) -> bool
{
  using os;

  var fd = open(&mut thread_ring, os::string(path.data, path.len), O_NOFOLLOW, 0);

  if (fd < 0)
    return false;

  close(&mut thread_ring, fd);

  return true;
}

pub fn start(terminal::terminal mut &terminal, env::env mut &env, std::string &cmdline) -> i32
{
  using os;

  var path = std::string();

  if (var name = cmdline.words.front; !name.contains(sys::sep_byte))
  {
    if (var test = sys::path::join("/zaos/bin", name); exists(test))
      path = test;

    if (path.empty)
      return -2;
  }
  else
  {
    path = name;

    if (sys::path::is_relative(path))
      path = sys::path::normalise(sys::path::join(env.working_directory, path));

    if (!exists(path))
      return -2;
  }

  var user = std::format("USER={}", env.username);
  var cwd = std::format("CWD={}", env.working_directory);

  var argv = std::vector<os::arg>();
  var envp = std::vector<os::arg>();
  var attrs = std::vector<os::attr>();

  argv.push_back(os::arg(path.data, path.len));

  for (var arg : cmdline.words.drop_n(1))
  {
    argv.push_back(os::arg(arg.data, arg.len));
  }

  envp.push_back(os::arg(user.data, user.len));
  envp.push_back(os::arg(cwd.data, cwd.len));

  attrs.push_back(os::attr(attr::stdin, terminal.pty.slave));
  attrs.push_back(os::attr(attr::stdout, terminal.pty.slave));
  attrs.push_back(os::attr(attr::stderr, terminal.pty.slave));
  attrs.push_back(os::attr(attr::stdroot, STDROOT_FILENO));
  attrs.push_back(os::attr(attr::stdcwd, STDCWD_FILENO));

  var pid = process_create(argv.data, argv.len, envp.data, envp.len, attrs.data, attrs.len, 0);

  if (pid < 0)
    return pid;

  while (true)
  {
    terminal.pump(chrono::milliseconds(125));

    var pollset = [ os::pollevt(pid, POLLTHREAD, POLLIN, 0) ];

    if (select(&mut thread_ring, pollset.data, pollset.len, 0) != 0)
      break;
  }

  var rval = 0;
  if (var rc = wait(pid, &rval, 0); rc < 0)
    return rc;

  return 0;
}

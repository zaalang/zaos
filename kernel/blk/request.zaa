//
// blk request
//

import std.atomic;
import std.vector;
import vm;
import io;
import blk;
import slab : slab_allocator;
import support.rc : Rc;

pub struct request
{
  pub enum status
  {
    pending,
    running,
    success,
    errored,
    cancelled,
  }

  pub status status;

  pub enum type
  {
    read,
    write
  }

  pub Rc<blk::blkdev> device;

  pub type type;
  pub u64 position;
  pub usize length;

  pub std::vector<vm::physrange, N:8> host;

  pub Rc<io::iocb> cb;

  pub request mut *next;

  u8[32] reserved;

  fn allocator()
  {
    static allocator = #slab_allocator<request>();

    return &allocator;
  }

  pub fn create() -> request mut *
  {
    return allocator.allocate();
  }

  pub fn ref(this mut &) -> void
  {
    std::atomic_add(&this.refcnt, 1);
  }

  pub fn unref(this mut &) -> void
  {
    if (std::atomic_sub(&this.refcnt, 1) == 1)
      destroy(&this);
  }

  i32 refcnt;

  pub request() = default;
  pub ~request() = default;
}

fn destroy(request mut *rq) -> void
{
  std::assert(!rq.next);
  std::assert(!rq.device);
  std::assert(!rq.cb);

  rq.status = request::status::pending;
  rq.host.clear();

  request::allocator.free(rq);
}

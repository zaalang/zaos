//
// blk
//

import std.stdio;
import blk.blkdev;
import blk.request;
import vm;
import io;
import cpu;
import dev;
import vfs;
import platform;
import scheduler;
import thread as _ : thread;
import process as _ : process;
import semaphore as _ : semaphore;
import mutex as _ : mutex;
import support.rc : Rc;

struct io_queue
{
  mutex lock;

  request mut *head;
  request mut * mut *last;

  fn take(this mut &) -> (request mut *, request mut * mut *)
  {
    var guard = std::lock_guard(&mut this.lock);

    var result = (this.head, this.last);

    this.head = null;
    this.last = &this.head;

    return result;
  }

  fn append(this mut &, request mut *rq) -> void
  {
    var guard = std::lock_guard(&mut this.lock);

    *this.last = rq;
    this.last = &rq.next;
  }

  fn prepend(this mut &, (request mut *, request mut * mut *) mut &entries) -> void
  {
    var guard = std::lock_guard(&mut this.lock);

    *entries.1 = this.head;

    if (!this.head)
      this.last = entries.1;

    this.head = entries.0;
  }

  fn remove(this mut &, request mut *rq) -> bool
  {
    var guard = std::lock_guard(&mut this.lock);

    for (var curr = &this.head; *curr; curr = &curr.next)
    {
      if (*curr == rq)
      {
        *curr = curr.next;

        if (!*curr)
          this.last = curr;

        rq.next = null;

        return true;
      }
    }

    return false;
  }

  io_queue() = default;
  io_queue(#io_queue&) = default;
  ~io_queue() = default;
}

fn dump(io_queue &this) -> void
{
  std::print("[io queue]");

  for (var rq = this.head; rq; rq = rq.next)
  {
    std::print("  ", rq.type, " ", rq.position, " ", rq.length);
  }
}

struct blkdev_manager
{
  io_queue ioqueue;

  semaphore doorbell;
  thread mut *kblockd;

  fn instance() -> blkdev_manager mut &
  {
    static instance = #blkdev_manager();

    return &instance;
  }

  blkdev_manager() = default;
  blkdev_manager(#blkdev_manager&) = default;
  ~blkdev_manager() = default;
}

fn blkman() -> blkdev_manager mut &
{
  return &blkdev_manager::instance;
}

pub fn open(blkdev mut *device, vfs::fd mut &fd, u64 flags, u32 mode) -> blk::result
{
  return ok;
}

pub fn read(blkdev mut *device, u64 position, void mut *buffer, usize length) -> blk::result
{
  var iovec = vm::iovec();

  if (var result = vm::lock(vm::virtrange(buffer, length), vm::protection::readwrite, &mut iovec); !result)
    return cast(result);

  var response = io::response();

  io::initiate(&mut response.cb, 1);

  blk::read(device, &mut response.cb, position, iovec, 0, length);

  if (response.wait(); !response)
    return cast(response.result);

  return cast(length);
}

pub fn write(blkdev mut *device, u64 position, void *buffer, usize length) -> blk::result
{
  var iovec = vm::iovec();

  if (var result = vm::lock(vm::virtrange(buffer, length), vm::protection::readonly, &mut iovec); !result)
    return cast(result);

  var response = io::response();

  io::initiate(&mut response.cb, 1);

  blk::write(device, &mut response.cb, position, iovec, 0, length);

  if (response.wait(); !response)
    return cast(response.result);

  return cast(length);
}

pub fn read(blkdev mut *device, Rc<io::iocb> mut &cb, u64 position, vm::iovec &buffer, usize offset, usize length) -> void
{
  var rq = request::create();
  rq.device = device;
  rq.type = request::type::read;
  rq.position = position;
  rq.length = length;
  rq.cb = cb;
  rq.ref();

  buffer.foreach_region_in(offset, length, |region| {
    rq.host.push_back(region);
  });

  switch (rq.device.enqueue(rq))
  {
    case blk::result::ok:
      ;

    case blk::result::device_busy:

      blkman.ioqueue.append(rq);

      if (blkman.ioqueue.head == rq)
        blkman.doorbell.release();

    else:
      complete(rq, blk::request::status::errored);
  }
}

pub fn write(blkdev mut *device, Rc<io::iocb> mut &cb, u64 position, vm::iovec &buffer, usize offset, usize length) -> void
{
  var rq = request::create();
  rq.device = device;
  rq.type = request::type::write;
  rq.position = position;
  rq.length = length;
  rq.cb = cb;
  rq.ref();

  buffer.foreach_region_in(offset, length, |region| {
    rq.host.push_back(region);
  });

  blkman.ioqueue.append(rq);

  if (blkman.ioqueue.head == rq)
    blkman.doorbell.release();
}

pub fn ioctl(blkdev mut *dev, u32 op, vm::iovec &buffer) -> result
{
  return dev.ioctl(op, buffer);
}

pub fn complete(request mut *rq, request::status status) -> void
{
  switch (status)
  {
    case request::status::success:
      io::complete(&mut rq.cb, rq.length);

    case request::status::errored:
      io::complete(&mut rq.cb, blk::result::io_error);

    case request::status::cancelled:
      io::complete(&mut rq.cb, blk::result::cancelled);

    else:
      std::panic("bad_status");
  }

  rq.cb = null;
  rq.status = status;
  rq.device = null;
  rq.next = null;

  rq.unref();
}

pub fn wake_from_stall() -> void
{
  blkman.doorbell.release();
}

fn kblockd(void*) -> void
{
  for (;;)
  {
    var entries = blkman.ioqueue.take();

    for (var entry = &entries.0; *entry; )
    {
      var rq = *entry;

      if (rq.cb.result < 0)
      {
        *entry = entry.next;

        if (!*entry)
          entries.1 = entry;

        complete(rq, blk::request::status::cancelled);
      }
      else
      {
        entry = &entry.next;
      }
    }

    while (entries.0)
    {
      var rq = entries.0;
      entries.0 = entries.0.next;

      switch (rq.device.enqueue(rq))
      {
        case blk::result::ok:
          ;

        case blk::result::device_busy:
          entries.0 = rq;
          break;

        else:
          complete(rq, blk::request::status::errored);
      }
    }

    if (entries.0)
      blkman.ioqueue.prepend(&mut entries);

    blkman.doorbell.wait();
  }
}

pub fn initialise() -> void
{
  blkman.ioqueue.last = &blkman.ioqueue.head;

  blkman.kblockd = create_thread(process::current, &cast<(void mut *) -> void>(kblockd), null);

  scheduler::enqueue(blkman.kblockd);

  spawn_plumber();
}

pub fn enumerate(var &&callback) -> void
{
  dev::enumerate(|id, dev| [callback] {
    switch (dev)
    {
      case blkdev[dev]:
        callback(id, dev);
    }
  });
}

//
// blk dev
//

import std.atomic;
import blk.result;
import blk.request;
import vm;
import process as _ : process;
import support.rc : Rc;

pub enum query
{
  device_path,
  device_part,
  device_uuid,
}

pub struct blkdev
{
  pub usize block_size;
  pub int block_shift;
  pub u64 block_count;

  pub fn create<T>(var && ...args) -> Rc<T>
  {
    var dev = std::allocator::new<T>(&&args...);

    dev.destroy = fn (blkdev mut *dev) { std::allocator::delete(cast<T mut *>(dev)); };

    return Rc(dev);
  }

  pub fn query(this &, blk::query query) -> std::string
  {
    var result = std::string();

    this.ops.query(this, query, &mut result);

    return result;
  }

  pub fn ioctl(this mut &, u32 op, vm::iovec &buffer) -> blk::result
  {
    return this.ops.ioctl(&mut this, op, buffer);
  }

  pub fn enqueue(this mut &, blk::request mut *request) -> blk::result
  {
    return this.ops.enqueue(&mut this, request);
  }

  pub fn cancel(this mut &, blk::request mut *request) -> blk::result
  {
    return this.ops.cancel(&mut this, request);
  }

  pub blkdev(device_operations &ops)
    : ops(&ops)
  {
  }

  pub fn ref(this mut &) -> void
  {
    std::atomic_add(&this.refcnt, 1);
  }

  pub fn unref(this mut &) -> void
  {
    if (std::atomic_sub(&this.refcnt, 1) == 1)
      destroy(&this);
  }

  pub ~blkdev() = default;

  i32 refcnt;
  device_operations &ops;
  fn (*destroy)(blkdev mut *) -> void;
}

pub vtable device_operations
{
  pub fn query(this &, blk::query query, std::string mut &result) -> blk::result;

  pub fn ioctl(this mut &, u32 op, vm::iovec &buffer) -> blk::result;

  pub fn enqueue(this mut &, blk::request mut *request) -> blk::result;
  pub fn cancel(this mut &, blk::request mut *request) -> blk::result;
}

fn destroy(blkdev mut *device) -> void
{
  if (device.destroy)
    device.destroy(device);
}

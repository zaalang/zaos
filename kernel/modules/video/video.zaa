//
// boot frame buffer
//

import std.stdio;
import std.vector;
import io;
import dev;
import chr.chrdev;
import sys;
import vm : physrange;
import vfs;
import process as _ : process;
import support.rc : Rc;

enum fbio
{
  const screeninfo = 0x80034600;
}

struct screeninfo
{
  u64 caps;
  usize width;
  usize height;
  usize depth;
  usize pitch;

  screeninfo() = default;
  ~screeninfo() = default;
}

pub struct bootfb : pub chr::chrdev
{
  pub bootfb(sys::frame_buffer &fb)
    : super(&impl this),
      fb(fb)
  {
    std::printf("boot frame buffer {}x{}x{}\n", fb.width, fb.height, fb.depth);
  }

  pub fn query(this &, chr::query query, std::string mut &result) override -> chr::result
  {
    switch (query)
    {
      case device_path:
        result = "fb0";
    }

    return ok;
  }

  pub fn open(this mut &, vfs::fd mut &fd, process mut *process, u64 flags, u32 mode) override -> chr::result
  {
    return ok;
  }

  pub fn ioctl(this mut &, u32 op, vm::iovec &iovec) override -> chr::result
  {
    switch (op)
    {
      case fbio::screeninfo:
        if (iovec.length != sizeof<screeninfo>)
          return invalid_argument;

        var screeninfo = screeninfo();
        screeninfo.caps = 0;
        screeninfo.width = this.fb.width;
        screeninfo.height = this.fb.height;
        screeninfo.depth = this.fb.depth;
        screeninfo.pitch = this.fb.pitch;

        if (var result = vm::memcpy(iovec, 0, &screeninfo, sizeof<screeninfo>); !result)
          return cast(result);

        return ok;
    }

    return not_supported;
  }

  pub fn poll(this mut &, Rc<io::iocb> mut &readable, Rc<io::iocb> mut &writeable) override -> chr::result
  {
    return not_supported;
  }

  pub fn read(this mut &, vm::iovec &iovec, usize offset, usize length) override -> chr::result
  {
    return not_supported;
  }

  pub fn write(this mut &, vm::iovec &iovec, usize offset, usize length) override -> chr::result
  {
    return not_supported;
  }

  pub fn mmap(this mut &, vm::virtrange range, u64 offset, vm::protection prot, vm::usage use) override -> chr::result
  {
    if (offset != 0)
      return invalid_argument;

    if (range.size != this.fb.pitch * this.fb.height)
      return invalid_argument;

    if (use != vm::usage::shared)
      return device_busy;

    var framebuffer = std::vector<physrange, N:1>::from([ physrange(this.fb.address, range.size) ]);

    if (var result = vm::create_physical_region(range, framebuffer, prot, vm::usage::shared | vm::usage::foreign); !result)
      return cast(result);

    if (var result = vm::set_memory_type(range, vm::mtype::write_combine); !result)
      return cast(result);

    return ok;
  }

  pub ~bootfb() = default;

  sys::frame_buffer fb;
}

pub fn initialise() -> void
{
  var dev = chr::chrdev::create<bootfb>(sys::boot_frame_buffer);

  dev::register(dev::dev_t(), dev);
}

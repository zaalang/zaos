//
// ioapic
//

import std.stdio;
import std.atomic;
import acpi.madt;
import platform : PHYSICAL_BASE;
import sys;
import io;

pub enum trigger
{
  bus = 0,
  edge = 0,
  level = 1,
}

pub enum polarity
{
  bus = 0,
  active_high = 0,
  active_low = 1,
}

pub struct override
{
  pub u8 bus;
  pub u8 bus_irq;
  pub u32 gsi;
  pub polarity polarity;
  pub trigger triggermode;

  pub override() = default;
  pub override(override &) = default;
  pub fn =(override mut &, override &) -> override mut & = default;
  pub ~override() = default;
}

struct interrupt_controller
{
  uintptr ioapic;
  u32 gsi_base;
  u32 gsi_count;
  (u8, u8) vectors;

  std::vector<override> overrides;

  fn instance() -> interrupt_controller mut &
  {
    static instance = #interrupt_controller();

    return &instance;
  }

  interrupt_controller() = default;
  interrupt_controller(#interrupt_controller&) = default;
  ~interrupt_controller() = default;
}

fn ic() -> interrupt_controller mut &
{
  return &interrupt_controller::instance;
}

fn ioapic_read(uintptr base, u32 register) -> u32
{
  std::volatile_store(cast<u32 mut *>(PHYSICAL_BASE + base), register);

  return std::volatile_load(cast<u32*>(PHYSICAL_BASE + base + 0x10));
}

fn ioapic_write(uintptr base, u32 register, u32 value) -> void
{
  std::volatile_store(cast<u32 mut *>(PHYSICAL_BASE + base), register);

  std::volatile_store(cast<u32 mut *>(PHYSICAL_BASE + base + 0x10), value);
}

fn add_src_override(interrupt_controller mut &ic, acpi::interrupt_source_override *apic) -> void
{
  var override = override();

  override.bus = apic.bus;
  override.bus_irq = apic.source;
  override.gsi = apic.interrupt;

  switch (apic.flags & 0x3)
  {
    case 0:
      override.polarity = polarity::bus;

    case 1:
      override.polarity = polarity::active_high;

    case 3:
      override.polarity = polarity::active_low;
  }

  switch ((apic.flags & 0xc) >> 2)
  {
    case 0:
      override.triggermode = trigger::bus;

    case 1:
      override.triggermode = trigger::edge;

    case 3:
      override.triggermode = trigger::level;
  }

  ic.overrides.push_back(override);
}

pub fn resolve(u32 irq) -> u8
{
  var gsi = irq;

  if (var j = ic.overrides.find_if(|override| override.bus == 0 && cast(override.bus_irq) == irq); j != ic.overrides.end)
    gsi = ic.overrides[j].gsi;

  if (gsi < ic.gsi_base || gsi >= ic.gsi_base + ic.gsi_count)
    return 0;

  return ic.vectors.0 + cast<u8>(gsi - ic.gsi_base);
}

pub extern fn enable_io_vector(u8 irq) -> void
{
  var idx = cast<u32>(irq - ic.vectors.0);

  var entry = ioapic_read(ic.ioapic, 0x10 + 2*idx);

  ioapic_write(ic.ioapic, 0x10 + 2*idx, entry & ~0x10000);
}

pub extern fn disable_io_vector(u8 irq) -> void
{
  var idx = cast<u32>(irq - ic.vectors.0);

  var entry = ioapic_read(ic.ioapic, 0x10 + 2*idx);

  ioapic_write(ic.ioapic, 0x10 + 2*idx, entry | 0x10000);
}

pub fn initialise() -> void
{
  var madt = acpi::find_madt(PHYSICAL_BASE, sys::acpi_root);

  if (!acpi::validate_madt(madt))
    std::panic("bad_acpi_madt");

  for (var apic : madt.entries)
  {
    switch (apic.type)
    {
      case io_apic:

        var io_apic = cast<acpi::io_apic*>(apic);

        ic.ioapic = cast<uintptr>(io_apic.apic_address);

        ic.gsi_base = io_apic.interrupt_base;
        ic.gsi_count = (ioapic_read(ic.ioapic, 0x1) >> 16) & 0xff + 1;

      case interrupt_source_override:

        ic.add_src_override(cast<acpi::interrupt_source_override*>(apic));
    }
  }

  ic.vectors = io::allocate_vectors(cast<usize>(ic.gsi_count));

  for (var idx = 0; idx < ic.gsi_count; ++idx)
  {
    var vector = cast<u32>(ic.vectors.0) + idx;
    var polarity = polarity::bus;
    var triggermode = trigger::bus;

    if (var j = ic.overrides.find_if(|override| override.gsi == ic.gsi_base + idx); j != ic.overrides.end)
    {
      polarity = ic.overrides[j].polarity;
      triggermode = ic.overrides[j].triggermode;
    }

    ioapic_write(ic.ioapic, 0x10 + 2*idx, vector | cast<u32>(polarity) << 13 | cast<u32>(triggermode) << 15 | 0x10900);
    ioapic_write(ic.ioapic, 0x10 + 2*idx + 1, 0xff000000);
  }

  std::print("ioapic: interrupts ", ic.gsi_base, " through ", ic.gsi_base + ic.gsi_count - 1);

  for (var &override : ic.overrides)
    std::print("ioapic: override bus ", override.bus, " irq ", override.bus_irq, " to gsi ", override.gsi, " ", override.polarity, " ", override.triggermode);
}

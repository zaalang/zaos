//
// ps2 mouse
//

import std.stdio;
import std.atomic;
import io;
import ps2;
import dev;
import chr;
import vfs;
import input;
import vm : physrange;
import support.rc : Rc;

pub struct mouse : pub chr::chrdev
{
  pub mouse(ps2::port mut &port)
    : super(&impl this),
      port(&port)
  {
  }

  pub fn query(this &, chr::query query, std::string mut &result) -> chr::result
  {
    switch (query)
    {
      case device_name:
        result = "input/mouse/ps2/0";
    }

    return ok;
  }

  pub fn open(this mut &, vfs::fd mut &fd, u64 flags, u32 mode) -> chr::result
  {
    return ok;
  }

  pub fn ioctl(this mut &, u32 op, vm::iovec &buffer) -> chr::result
  {
    return not_supported;
  }

  pub fn poll(this mut &, Rc<io::iocb> mut &readable, Rc<io::iocb> mut &writeable) -> chr::result
  {
    readable = this.port.readable.cb;

    return ok;
  }

  pub fn read(this mut &, vm::iovec &buffer, usize offset, usize length) -> chr::result
  {
    var count = 0;

    while (count + sizeof<input::event> <= length)
    {
      var event = input::event(void);

      if (!this.port.pop(&mut event))
        break;

      if (var result = vm::memcpy(buffer, offset, &event, sizeof(event)); !result)
        return cast(result);

      count += sizeof(event);
      offset += sizeof(event);
    }

    if (count == 0)
      return would_block;

    return cast(count);
  }

  pub fn write(this mut &, vm::iovec &buffer, usize offset, usize length) -> chr::result
  {
    return not_supported;
  }

  pub fn mmap(this mut &, vm::virtrange range, u64 offset, vm::protection prot, vm::usage use) -> chr::result
  {
    return not_supported;
  }

  pub ~mouse() = default;

  ps2::port mut &port;
}

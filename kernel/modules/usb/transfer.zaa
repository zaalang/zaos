//
// usb transfer
//

import std.atomic;
import std.vector;
import std.function;
import vm;
import io;
import usb.result;
import slab : slab_allocator;
import support.rc : Rc;

pub struct transfer
{
  pub enum type
  {
    control = 0,
    isochronous = 1,
    bulk = 2,
    interrupt = 3,
  }

  pub type type;

  pub u8 address;
  pub u8 request;
  pub u16 value;
  pub u16 index;
  pub usize stream;
  pub usize length;

  pub std::vector<vm::physrange, N:8> host;

  pub Rc<io::iocb> cb;

  pub std::delegate<(usb::result) -> void> callback;

  u8[16] reserved;

  fn allocator()
  {
    static allocator = #slab_allocator<transfer>();

    return &allocator;
  }

  pub fn create() -> Rc<transfer>
  {
    return allocator.allocate();
  }

  pub fn ref(this mut &) -> void
  {
    std::atomic_add(&this.refcnt, 1);
  }

  pub fn unref(this mut &) -> void
  {
    if (std::atomic_sub(&this.refcnt, 1) == 1)
      destroy(&this);
  }

  i32 refcnt;

  pub transfer() = default;
  pub ~transfer() = default;
}

fn destroy(transfer mut *tx) -> void
{
  std::assert(!tx.cb);
  std::assert(!tx.callback);

  tx.host.clear();

  transfer::allocator.free(tx);
}

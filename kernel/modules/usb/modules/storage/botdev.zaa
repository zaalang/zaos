//
// usb mass storage
//

import std.stdio;
import std.atomic;
import dev;
import blk;
import usb;
import io;
import vm;
import usb.modules.storage.bot as bot;
import support.rc : Rc;

pub struct botdev : pub blk::blkdev
{
  pub botdev(bot::bot_unit mut *unit, u32 block_size, u64 block_count)
    : super(&impl this),
      unit(unit)
  {
    this.block_size = cast(block_size);
    this.block_count = cast(block_count);
    this.block_shift = std::ctz(this.block_size);
  }

  pub fn name(this &) -> std::string
  {
    return this.unit.name;
  }

  pub fn query(this &, blk::query query, std::string mut &result) override -> blk::result
  {
    switch (query)
    {
      case device_path:
        result = std::format("disk/{}", this.name);

      case device_part:
        result = "0";

      case device_uuid:
        result = "";
    }

    return ok;
  }

  pub fn ioctl(this mut &, u32 op, vm::iovec &iovec) override -> blk::result
  {
    return not_supported;
  }

  pub fn enqueue(this mut &, blk::request mut *request) override -> blk::result
  {
    if (var result = this.unit.enqueue(request); !result)
      return cast<blk::result>(result);

    return ok;
  }

  pub fn cancel(this mut &, blk::request mut *request) override -> blk::result
  {
    if (var result = this.unit.cancel(request); !result)
      return cast<blk::result>(result);

    return ok;
  }

  pub ~botdev() = default;

  Rc<bot::bot_unit> unit;
}

//
// bulk only transfer
//

import std.stdio;
import std.atomic;
import std.byteconv;
import std.box;
import vm;
import io;
import dev;
import blk;
import cpu;
import scheduler;
import usb;
import usb.usbdev;
import usb.modules.storage.scsi as scsi;
import usb.modules.storage.botdev as storage.botdev;
import support.rc : Rc;

enum request
{
  const get_request = 0xfc;
  const put_request = 0xfd;
  const get_maxlun = 0xfe;
}

enum cbw
{
  const signature = [ 0x43, 0x42, 0x53, 0x55 ];
}

struct bot_command
{
  u8[31] cmd;
  u8[13] sts;
  u8[20] pad;

  bot_command() = default;
  ~bot_command() = default;
}

pub struct bot_unit
{
  const CLSZ = 1;

  pub bot_unit(usb::usbdev mut *device, u8[2] &endpoints, u8 lun)
    : device(device), endpoints(endpoints), lun(lun)
  {
    if (var result = vm::lock(vm::virtrange(cl.data, sizeof(cl)), vm::protection::readwrite, &mut clvec); !result)
      std::panic("bot_clvec_lock");
  }

  fn find_slot(this mut &) -> usize
  {
    for (;;)
    {
      var mask = std::volatile_load(&this.slots);

      if (mask == 1 << CLSZ - 1)
        return CLSZ;

      var slot = std::ctz(~mask);

      if (std::atomic_cmpxchg_weak(&this.slots, mask, mask | (1 << slot)))
        return cast(slot);
    }
  }

  pub fn name(this &) -> std::string
  {
    return std::format("{}/{}", this.device.query(usb::query::device_name), this.lun);
  }

  pub fn ref(this mut &) -> void
  {
    std::atomic_add(&this.refcnt, 1);
  }

  pub fn unref(this mut &) -> void
  {
    if (std::atomic_sub(&this.refcnt, 1) == 1)
      destroy(&this);
  }

  i32 refcnt;

  pub ~bot_unit() = default;

  u8 lun;
  u8[2] endpoints;

  u32 slots;
  bot_command[CLSZ] cl;
  vm::iovec clvec;

  bool removable;

  Rc<blk::blkdev> media;
  Rc<usb::usbdev> device;
}

pub struct bot
{
  pub bot(usb::usbdev mut *device)
    : device(device)
  {
    device.unplugged = || unplugged(&this);
  }

  pub ~bot() = default;

  std::vector<Rc<bot_unit>> units;

  Rc<usb::usbdev> device;
}

fn unplugged(bot mut *bot) -> usb::result
{
  for (var unit : bot.units)
  {
    if (unit.media)
      detach(bot, unit);
  }

  std::allocator::delete(bot);

  return ok;
}

fn attach(bot mut *bot, bot_unit mut *unit) -> usb::result
{
  var buffer = std::vector<u8>::with_size(512);

  if (var result = read_capacity(unit.device, unit.endpoints, unit.lun, &mut buffer); !result)
    return result;

  var block_size = cast<scsi::read_capacity_16_response*>(buffer.data).block_size;
  var block_count = cast<scsi::read_capacity_16_response*>(buffer.data).block_count;

  std::print("usb-storage (bot) device on ", unit.name);

  var dev = blk::blkdev::create<storage::botdev>(unit, block_size, block_count);

  dev::register(dev::dev_t(), dev);

  blk::scan_for_partitions(dev);

  unit.media = dev;

  return ok;
}

fn detach(bot mut *bot, bot_unit mut *unit) -> usb::result
{
  dev::remove(unit.media);

  unit.media = null;

  return ok;
}

fn destroy(bot_unit mut *unit) -> void
{
  std::allocator::delete(unit);
}

fn report_luns(usb::usbdev mut *device, u8 interface_number, std::vector<u8> mut &buffer) -> usb::result
{
  if (var result = usb::submit(device, usb::request::direction::device_to_host, usb::request::type::klass, usb::request::recipient::interface, request::get_maxlun, 0, cast<u16>(interface_number), buffer.data, 1); !result)
    return result;

  return ok;
}

fn inquiry(usb::usbdev mut *device, u8[2] &endpoints, u8 lun, std::vector<u8> mut &buffer) -> usb::result
{
  var cmd = [u8(0); 6];
  cmd[0] = scsi::op::inquiry_6;
  cmd[4] = sizeof<scsi::inquiry_6_response>;

  if (var result = execute(device, endpoints, lun, std::span(cmd), buffer.data, sizeof<scsi::inquiry_6_response>); !result)
    return result;

  return ok;
}

fn test_unit_ready(usb::usbdev mut *device, u8[2] &endpoints, u8 lun, std::vector<u8> mut &buffer) -> usb::result
{
  var cmd = [u8(0); 6];
  cmd[0] = scsi::op::test_unit_ready_6;

  if (var result = execute(device, endpoints, lun, std::span(cmd), buffer.data, 0); !result)
  {
    cmd[0] = scsi::op::sense_6;
    cmd[4] = sizeof<scsi::sense_6_response>;

    execute(device, endpoints, lun, std::span(cmd), buffer.data, sizeof<scsi::sense_6_response>);

    return result;
  }

  return ok;
}

fn read_capacity(usb::usbdev mut *device, u8[2] &endpoints, u8 lun, std::vector<u8> mut &buffer) -> usb::result
{
  var cmd = [u8(0); 16];
  cmd[0] = scsi::op::read_capacity_16;
  cmd[1] = 0x10;
  cmd[13] = sizeof<scsi::read_capacity_16_response>;

  if (var result = execute(device, endpoints, lun, std::span(cmd), buffer.data, sizeof<scsi::read_capacity_16_response>); !result)
    return result;

  return ok;
}

fn execute(usb::usbdev mut *device, u8[2] &endpoints, u8 lun, std::span<u8> cmd, void mut *buffer, usize length) -> usb::result
{
  var cl = std::box<bot_command>();

  cl.cmd[0] = cbw::signature[3];
  cl.cmd[1] = cbw::signature[2];
  cl.cmd[2] = cbw::signature[1];
  cl.cmd[3] = cbw::signature[0];
  cl.cmd[8] = cast(length >> 0 & 0xff);
  cl.cmd[9] = cast(length >> 8 & 0xff);
  cl.cmd[10] = cast(length >> 16 & 0xff);
  cl.cmd[11] = cast(length >> 24 & 0xff);
  cl.cmd[12] = 0x80;
  cl.cmd[13] = lun;
  cl.cmd[14] = cast(cmd.len);

  std::memcpy(&cl.cmd[15], cmd.data, cmd.len);

  if (var result = usb::submit(device, usb::endpoint::type::bulk, endpoints[1], cl.cmd.data, cl.cmd.len); !result)
    return result;

  if (length != 0)
  {
    if (var result = usb::submit(device, usb::endpoint::type::bulk, endpoints[0], buffer, length); !result)
      return result;
  }

  if (var result = usb::submit(device, usb::endpoint::type::bulk, endpoints[0], cl.sts.data, cl.sts.len); !result)
    return result;

  if (cl.sts[12] != 0)
    return io_error;

  return ok;
}

pub fn initialise(usb::usbdev mut *device, std::span<u8> descriptors) -> usb::result
{
  var interface = cast<usb::interface_descriptor*>(descriptors.data);

  if (interface.interface_protocol != 0x50)
    return not_supported;

  if (interface.interface_subclass != 0x06)
    return not_supported;

  var bot = std::allocator::new<bot>(device);

  var endpoints = [ 0, 0 ];

  for (var offset = 0; offset < descriptors.len; )
  {
    switch (descriptors[offset + 1])
    {
      case usb::descriptor::type::endpoint:
        var endpoint = cast<usb::endpoint_descriptor*>(descriptors.data + offset);

        if (endpoint.type == usb::endpoint::type::bulk && endpoint.direction == usb::endpoint::direction::in)
          endpoints[0] = endpoint.endpoint_address;

        if (endpoint.type == usb::endpoint::type::bulk && endpoint.direction == usb::endpoint::direction::out)
          endpoints[1] = endpoint.endpoint_address;
    }

    offset += cast(descriptors[offset]);
  }

  if (endpoints[0] == 0 || endpoints[1] == 0)
    return invalid_argument;

  var buffer = std::vector<u8>::with_size(512);

  if (var result = report_luns(device, interface.interface_number, &mut buffer); !result)
    return result;

  var maxlun = buffer[0];

  for (var lun = 0; lun <= maxlun; ++lun)
  {
    bot.units.push_back() = std::allocator::new<bot_unit>(device, endpoints, lun);
  }

  for (var unit : bot.units)
  {
    if (var result = inquiry(device, endpoints, unit.lun, &mut buffer); !result)
      return result;

    unit.removable = cast<scsi::inquiry_6_response*>(buffer.data).removable != 0;

    for (var k = 0;; ++k)
    {
      scheduler::sleep_until(cpu::system_time + k * 10_000_000);

      if (var result = test_unit_ready(device, endpoints, unit.lun, &mut buffer); !result)
      {
        if (k < 16)
          continue;

        break;
      }

      attach(bot, unit);

      break;
    }
  }

  return ok;
}

pub fn enqueue(bot_unit mut &unit, blk::request mut *request) -> usb::result
{
  var slot = unit.find_slot();

  if (slot == bot_unit::CLSZ)
    return device_busy;

  var lun = unit.lun;
  var position = request.position >> request.device.block_shift;
  var length = request.length >> request.device.block_shift;

  var mut &cl = unit.cl[slot];

  cl.cmd[0] = cbw::signature[3];
  cl.cmd[1] = cbw::signature[2];
  cl.cmd[2] = cbw::signature[1];
  cl.cmd[3] = cbw::signature[0];
  cl.cmd[4] = cast(slot + 1);
  cl.cmd[8] = cast(request.length >> 0 & 0xff);
  cl.cmd[9] = cast(request.length >> 8 & 0xff);
  cl.cmd[10] = cast(request.length >> 16 & 0xff);
  cl.cmd[11] = cast(request.length >> 24 & 0xff);
  cl.cmd[13] = lun;
  cl.cmd[14] = 16;

  switch (request.type)
  {
    case read:
      cl.cmd[12] = 0x80;
      cl.cmd[15] = scsi::op::read_16;

    case write:
      cl.cmd[12] = 0x00;
      cl.cmd[15] = scsi::op::write_16;
  }

  cl.cmd[17] = cast<u8>((position >> 56) & 0xff);
  cl.cmd[18] = cast<u8>((position >> 48) & 0xff);
  cl.cmd[19] = cast<u8>((position >> 40) & 0xff);
  cl.cmd[20] = cast<u8>((position >> 32) & 0xff);
  cl.cmd[21] = cast<u8>((position >> 24) & 0xff);
  cl.cmd[22] = cast<u8>((position >> 16) & 0xff);
  cl.cmd[23] = cast<u8>((position >> 8) & 0xff);
  cl.cmd[24] = cast<u8>((position >> 0) & 0xff);
  cl.cmd[25] = cast<u8>((length >> 24) & 0xff);
  cl.cmd[26] = cast<u8>((length >> 16) & 0xff);
  cl.cmd[27] = cast<u8>((length >> 8) & 0xff);
  cl.cmd[28] = cast<u8>((length >> 0) & 0xff);

  io::initiate(&mut request.cb, 3);

  request.status = blk::request::status::running;

  var stage1 = |result| [var request = request, var unit = &unit, var slot = slot] {

    var stage2 = |result| [var request = request, var unit = unit, var slot = slot] {

      var stage3 = |result| [var request = request, var unit = unit, var slot = slot] {

        if (unit.cl[slot].sts[12] != 0)
          result = usb::result::io_error;

        blk::complete(request, result ? blk::request::status::success : blk::request::status::errored);

        if (std::atomic_and(&unit.slots, ~(1 << slot)) == 1 << bot_unit::CLSZ - 1)
          blk::wake_from_stall();
      };

      var mut &cl = unit.cl[slot];

      usb::submit(unit.device, &mut request.cb, usb::endpoint::type::bulk, unit.endpoints[0], unit.clvec, slot * sizeof<bot_command> + cl.cmd.len, cl.sts.len, std::delegate<(usb::result) -> void>(stage3));
    };

    var dat = (request.type == blk::request::type::read) ? 0 : 1;

    usb::submit(unit.device, &mut request.cb, usb::endpoint::type::bulk, unit.endpoints[dat], 0, request.host, request.length, std::delegate<(usb::result) -> void>(stage2));
  };

  usb::submit(unit.device, &mut request.cb, usb::endpoint::type::bulk, unit.endpoints[1], unit.clvec, slot * sizeof<bot_command> + 0, cl.cmd.len, std::delegate<(usb::result) -> void>(stage1));

  return ok;
}

pub fn cancel(bot_unit mut &unit, blk::request mut *request) -> usb::result
{
  while (std::volatile_load(&request.status) == blk::request::status::running)
    scheduler::sleep_until(cpu::system_time + 1_000_000);

  return ok;
}

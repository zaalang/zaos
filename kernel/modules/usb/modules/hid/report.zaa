//
// hid report
//

import std.stdlib;
import std.span : Span;

pub enum errc : u32
{
  internal_error = 1,
  item_not_supported,
  invalid_main_item_tag,
  invalid_global_item_tag,
  invalid_local_item_tag,
  unexpected_end_of_descriptor,

  pub fn bool(errc code) -> bool
  {
    return cast<u32>(code) != 0;
  }
}

enum item_type : u8
{
  main = 0,
  global = 1,
  local = 2,
  reserved = 3,
}

enum main_item_tag : u8
{
  input = 8,
  output = 9,
  feature = 11,
  collection = 10,
  end_collection = 12,
}

enum global_item_tag : u8
{
  usage_page = 0,
  logical_minimum = 1,
  logical_maximum = 2,
  physical_minimum = 3,
  physical_maximum = 4,
  unit_exponent = 5,
  unit = 6,
  report_size = 7,
  report_id = 8,
  report_count = 9,
  push = 10,
  pop = 11,
}

enum local_item_tag : u8
{
  usage = 0,
  usage_minimum = 1,
  usage_maximum = 2,
  designator_index = 3,
  designator_minimum = 4,
  designator_maximum = 5,
  string_index = 7,
  string_minimum = 8,
  string_maximum = 9,
  delimiter = 10,
}

pub struct report
{
  pub enum type : u8
  {
    pub const input = 0x1;
    pub const output = 0x2;
    pub const feature = 0x4;
  }

  pub enum flags
  {
    pub const constant = 0x1;
    pub const variable = 0x2;
    pub const relative = 0x4;
    pub const wrap = 0x8;
    pub const nonlinear = 0x10;
  }

  pub u8 type;
  pub u32 flags;

  pub u32 id;
  pub u32 field_size;
  pub u32 field_count;

  pub i32 logical_minimum;
  pub u32 logical_maximum;

  pub i32 physical_minimum;
  pub u32 physical_maximum;

  pub u32 unit_exponent;
  pub u32 unit;

  pub std::vector<(u32, u32), N:8> usages;

  pub fn usage(this &, u32 index) -> std::optional<u32>
  {
    for (var &usage : this.usages)
    {
      if (index <= usage.1 - usage.0)
        return usage.0 + index;

      index -= usage.1 - usage.0 + 1;
    }

    return None;
  }

  pub fn bit_len(this &) -> usize
  {
    return cast<usize>(this.field_size) * cast<usize>(this.field_count);
  }

  pub fn byte_len(this &) -> usize
  {
    return (cast<usize>(this.field_size) * cast<usize>(this.field_count) + 7) / 8;
  }

  pub report() = default;
  pub report(report &&) = default;
  pub fn = (report mut &, report &&) -> report mut & = default;
  pub ~report() = default;
}

pub fn extract(report &report, u32 index, std::vector<u8> &buffer, usize byte, usize bits, i64 mut &value, u32 mut &usage) -> bool
{
  var data = u32();

  if (report.usages.empty)
    return false;

  if (buffer.len < byte + (bits >> 3) + 4)
    return false;

  std::memcpy(&data, buffer.data + byte + (bits >> 3), 4);

  value = cast<i64>(data >> (bits & 0x7)) & (1 << report.field_size - 1);

  if (report.logical_minimum < 0)
    value = std::signextend<i64>(value, 1 << (report.field_size - 1));

  if (value < cast(report.logical_minimum) || value > cast(report.logical_maximum))
    return false;

  switch (report.flags & report::flags::variable)
  {
    case report::flags::variable:
      usage = report.usage(index)?!;

    case 0:
      usage = report.usage(cast<u32>(value))?!;
      value = 1;
  }

  return true;
}

pub struct collection
{
  pub enum type : u8
  {
    pub const physical = 0;
    pub const application = 1;
    pub const logical = 2;
    pub const report = 3;
    pub const named_array = 4;
    pub const usage_switch = 5;
    pub const usage_modifier = 6;
  }

  pub u8 type;
  pub u32 usage;
  pub std::vector<report> reports;
  pub std::vector<collection> children;

  pub collection() = default;
  pub collection(collection &&) = default;
  pub fn = (collection mut &, collection &&) -> collection mut & = default;
  pub ~collection() = default;
}

pub struct report_view
{
  collection *collection;

  pub const range_adaptor_type = true;

  pub report_view(collection &collection)
    : collection(&collection)
  {
  }

  pub struct report_iterator
  {
    report_iterator(collection *beg, collection *end)
      : end(end)
    {
      stack.push_back(beg);

      if (beg.reports.empty)
        ++this;
    }

    report_iterator(collection *end)
      : end(end)
    {
      stack.push_back(end);
    }

    pub report_iterator() = default;
    pub report_iterator(report_iterator &&) = default;
    pub fn =(report_iterator mut &this, report_iterator &&) -> report_iterator mut & = default;
    pub ~report_iterator() = default;

    #[lifetime(poison(this), depend(*this))]
    pub fn ++(report_iterator mut &this) -> report_iterator mut &
    {
      this.index += 1;

      while (this.index >= this.stack.back.reports.len)
      {
        this.index = 0;

        if (this.stack.back.children.empty)
        {
          while (this.stack.len > 1 && this.stack.back == &this.stack[this.stack.len - 2].children.back)
            this.stack.pop_back();

          this.stack.back += 1;
        }
        else
        {
          this.stack.push_back(&this.stack.back.children[0]);
        }

        if (this.stack.back == this.end)
          break;
      }

      return &this;
    }

    usize index;
    std::vector<collection*, N:4> stack;
    collection *end;
  }

  pub fn ==(report_iterator &lhs, report_iterator &rhs) -> bool
  {
    return lhs.stack.back == rhs.stack.back && lhs.index == rhs.index;
  }

  #[lifetime(depend(this))]
  pub fn begin(this &)
  {
    return report_iterator(this.collection, this.collection + 1);
  }

  #[lifetime(depend(this))]
  pub fn end(this &)
  {
    return report_iterator(this.collection + 1);
  }

  #[lifetime(repose(iter, this), depend(this))]
  pub fn [](this &, report_iterator &iter)
  {
    return &iter.stack.back.reports[iter.index];
  }

  pub report_view(report_view &&) = default;
  pub ~report_view() = default;
}

pub fn byte_len(collection &collection, u8 type) -> usize
{
  var bits = 0;

  for (var &report : report_view(collection))
  {
    if (type == 0 || report.type == type)
      bits += report.bit_len;
  }

  return (bits + 7) / 8;
}

struct global_item_state
{
  u16 usage_page;
  i32 logical_minimum;
  u32 logical_maximum;
  i32 physical_minimum;
  u32 physical_maximum;
  u32 unit_exponent;
  u32 unit;
  u32 report_size;
  u32 report_id;
  u32 report_count;

  global_item_state() = default;
  global_item_state(global_item_state &&) = default;
  fn =(global_item_state mut &, global_item_state &&) -> global_item_state mut & = default;
  ~global_item_state() = default;
}

struct local_item_state
{
  std::vector<(u32, u32), N:8> usages;
  std::optional<u32> usage_minimum;
  std::optional<u32> usage_maximum;

  local_item_state() = default;
  local_item_state(local_item_state &&) = default;
  fn = (local_item_state mut &, local_item_state &&) -> local_item_state mut & = default;
  ~local_item_state() = default;
}

pub struct report_descriptor_result
{
  pub errc error;
  pub std::vector<collection> collections;

  pub report_descriptor_result() = default;
  pub report_descriptor_result(report_descriptor_result&) = default;
  pub fn =(report_descriptor_result mut &, report_descriptor_result&) -> report_descriptor_result mut & = default;
  pub ~report_descriptor_result() = default;
}

fn parse_report_descriptor(report_descriptor_result mut &ctx, std::span<u8> descriptor) -> errc
{
  var local_state = local_item_state();
  var global_state = global_item_state();
  var global_stack = std::vector<global_item_state>();

  for (var ch = descriptor.begin, var end = descriptor.end; ch != end; )
  {
    var item_type = cast<item_type>((*ch >> 2) & 0x03);
    var item_size = 0;
    var item_data = 0;

    switch (*ch & 0x3)
    {
      case 1:
        item_size = 1;
        item_data = cast<u32>(*(ch + 1));

      case 2:
        item_size = 2;
        item_data = cast<u32>(*(ch + 2)) << 8 | cast<u32>(*(ch + 1));

      case 3:
        item_size = 4;
        item_data = cast<u32>(*(ch + 4)) << 24 | cast<u32>(*(ch + 3)) << 16 | cast<u32>(*(ch + 2)) << 8 | cast<u32>(*(ch + 1));
    }

    switch (item_type)
    {
      case main:

        switch (cast<main_item_tag>((*ch >> 4) & 0x0f))
        {
          case input:
          case output:
          case feature:
            var report = report();

            switch (cast<main_item_tag>((*ch >> 4) & 0x0f))
            {
              case input:
                report.type = report::type::input;

              case output:
                report.type = report::type::output;

              case feature:
                report.type = report::type::feature;
            }

            report.flags = item_data;
            report.id = global_state.report_id;
            report.field_size = global_state.report_size;
            report.field_count = global_state.report_count;
            report.logical_minimum = global_state.logical_minimum;
            report.logical_maximum = global_state.logical_maximum;
            report.physical_minimum = global_state.physical_minimum;
            report.physical_maximum = global_state.physical_maximum;
            report.unit_exponent = global_state.unit_exponent;
            report.unit = global_state.unit;
            report.usages = &move local_state.usages;

            ctx.collections.back.reports.push_back(&move report);

          case collection:
            var mut &collection = ctx.collections.push_back();

            collection.type = cast<u8>(item_data);
            collection.usage = local_state.usages.front.0;

          case end_collection:
            var collection = ctx.collections.take_back();

            if (collection.type == collection::type::application)
              ctx.collections.push_back(&move collection);
            else
              ctx.collections.back.children.push_back(&move collection);

          else:
            return invalid_main_item_tag;
        }

        local_state = local_item_state();

      case global:

        switch (cast<global_item_tag>((*ch >> 4) & 0x0f))
        {
          case usage_page:
            global_state.usage_page = cast<u16>(item_data);

          case logical_minimum:
            global_state.logical_minimum = std::signextend<i32>(item_data, 1 << (item_size * 8 - 1));

          case logical_maximum:
            global_state.logical_maximum = item_data;

          case physical_minimum:
            global_state.physical_minimum = std::signextend<i32>(item_data, 1 << (item_size * 8 - 1));

          case physical_maximum:
            global_state.physical_maximum = item_data;

          case unit_exponent:
            global_state.unit_exponent = item_data;

          case unit:
            global_state.unit = item_data;

          case report_size:
            global_state.report_size = item_data;

          case report_id:
            global_state.report_id = item_data;

          case report_count:
            global_state.report_count = item_data;

          case push:
            global_stack.push_back(global_state);

          case pop:
            global_state = global_stack.take_back();

          else:
            return invalid_global_item_tag;
        }

      case local:

        switch (cast<local_item_tag>((*ch >> 4) & 0x0f))
        {
          case usage:
            if (item_size != 4)
              item_data |= cast<u32>(global_state.usage_page) << 16;

            local_state.usages.push_back((item_data, item_data));

          case usage_minimum:
            if (item_size != 4)
              item_data |= cast<u32>(global_state.usage_page) << 16;

            local_state.usage_minimum = item_data;

          case usage_maximum:
            if (item_size != 4)
              item_data |= cast<u32>(global_state.usage_page) << 16;

            local_state.usage_maximum = item_data;

            local_state.usages.push_back((local_state.usage_minimum.value, local_state.usage_maximum.value));

          else:
            return invalid_local_item_tag;
        }

      else:
        return item_not_supported;
    }

    ch += 1 + item_size;
  }

  return cast(0);
}

pub fn parse_report_descriptor(Span<u8> &descriptor) -> report_descriptor_result
{
  var result = report_descriptor_result();

  if (var err = parse_report_descriptor(&mut result, std::span(descriptor)); err)
    result.error = err;

  return result;
}

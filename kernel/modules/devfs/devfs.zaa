//
// devfs
//

import std.alloc;
import std.flat_hash_map;
import std.string : String;
import blk;
import vfs.node;
import vfs.stat;
import vfs.fs;
import vfs.fd;
import blk;
import chr;
import dev;
import vm;
import io;
import mutex as _ : shared_mutex;
import process as _ : process;
import support.rc : Rc;
import chrono;

struct inode : pub vfs::node
{
  u32 uid;
  u32 gid;
  u32 mode;

  i64 btime;

  devfs mut *fs;
  Rc<vfs::node> parent;

  inode(devfs mut *fs, vfs::node mut *parent, u32 uid, u32 gid, u32 mode)
    : fs(fs), parent(parent), uid(uid), gid(gid), mode(mode)
  {
    this.btime = chrono::system_clock::now.time_since_epoch.count;
  }

  ~inode() = default;
}

struct directory : pub inode
{
  std::flat_hash_map<std::string, Rc<vfs::node>> contents;

  fn create(devfs mut *fs, vfs::node mut *parent, u32 uid, u32 gid, u32 mode) -> Rc<vfs::node>
  {
    return std::allocator::new<directory>(fs, parent, uid, gid, mode);
  }

  fn destroy(vfs::node mut *node) -> void
  {
    std::allocator::delete(cast<directory mut *>(node));
  }

  #[lifetime(depend())]
  directory(devfs mut *fs, vfs::node mut *parent, u32 uid, u32 gid, u32 mode)
    : super(fs, parent, uid, gid, mode)
  {
    vfs::node::init(&this, vfs::node::type::directory, vfs::node::ops::directory(&impl this));
  }

  ~directory() = default;
}

struct symlink : pub inode
{
  std::string target;

  fn create(devfs mut *fs, vfs::node mut *parent, std::string_view target, u32 uid, u32 gid, u32 mode) -> Rc<vfs::node>
  {
    return std::allocator::new<symlink>(fs, parent, target, uid, gid, mode);
  }

  fn destroy(vfs::node mut *node) -> void
  {
    std::allocator::delete(cast<symlink mut *>(node));
  }

  #[lifetime(depend())]
  symlink(devfs mut *fs, vfs::node mut *parent, std::string_view target, u32 uid, u32 gid, u32 mode)
    : super(fs, parent, uid, gid, mode),
      target(target)
  {
    vfs::node::init(&this, vfs::node::type::symlink, vfs::node::ops::symlink(&impl this));
  }

  ~symlink() = default;
}

struct device : pub inode
{
  dev::dev_t id;

  fn create_blkdev(devfs mut *fs, vfs::node mut *parent, dev::dev_t id, u32 uid, u32 gid, u32 mode) -> Rc<vfs::node>
  {
    return std::allocator::new<device>(fs, vfs::node::type::volume, parent, id, uid, gid, mode);
  }

  fn create_chrdev(devfs mut *fs, vfs::node mut *parent, dev::dev_t id, u32 uid, u32 gid, u32 mode) -> Rc<vfs::node>
  {
    return std::allocator::new<device>(fs, vfs::node::type::device, parent, id, uid, gid, mode);
  }

  fn destroy(vfs::node mut *node) -> void
  {
    std::allocator::delete(cast<device mut *>(node));
  }

  #[lifetime(depend())]
  device(devfs mut *fs, vfs::node::type type, vfs::node mut *parent, dev::dev_t id, u32 uid, u32 gid, u32 mode)
    : super(fs, parent, uid, gid, mode),
      id(id)
  {
    switch (type)
    {
      case device:
        vfs::node::init(&this, vfs::node::type::device, vfs::node::ops::device(&impl this));

      case volume:
        vfs::node::init(&this, vfs::node::type::volume, vfs::node::ops::volume(&impl this));
    }
  }

  ~device() = default;
}

pub struct devfs : pub vfs::file_system
{
  shared_mutex lock;
  Rc<vfs::node> root;

  fn instance() -> devfs mut * mut &
  {
    static instance = null<devfs mut *>();

    return &instance;
  }

  devfs()
    : super(&impl this)
  {
    root = directory::create(&this, null, 0, 0, 0o40755);
  }

  ~devfs() = default;
}

pub fn create(vfs::file_system_context &ctx = vfs::file_system_context()) -> devfs mut *
{
  if (!devfs::instance)
  {
    devfs::instance = new<devfs>(std::allocator().allocate(sizeof<devfs>, alignof<devfs>))();
  }

  return devfs::instance;
}

fn find(devfs mut &devfs, vfs::node mut *path, String &name) -> Rc<vfs::node>
{
  var mut &node = cast<directory mut &>(*path);

  if (var j = node.contents.find(name); j != node.contents.end)
    return node.contents[j].value;

  return null;
}

fn insert(devfs mut &devfs, vfs::node mut *path, std::string_view name, Rc<vfs::node> &entry) -> Rc<vfs::node>
{
  var mut &node = cast<directory mut &>(*path);

  node.contents.insert(name, entry);

  switch (entry.type)
  {
    case directory:
      vfs::notify(path, entry, vfs::notify::mkdir, name);

    else:
      vfs::notify(path, entry, vfs::notify::create, name);
  }

  return entry;
}

fn remove(devfs mut &devfs, vfs::node mut *path, std::string_view name) -> void
{
  var mut &node = cast<directory mut &>(*path);

  if (var j = node.contents.find(name); j != node.contents.end)
  {
    vfs::notify(path, node.contents[j].value, vfs::notify::unlink);

    node.contents.erase(j);
  }
}

fn mkpath(devfs mut &devfs, Rc<vfs::node> base, String &path) -> Rc<vfs::node>
{
  var ch = path.begin;
  var end = path.end;

  while (ch != end)
  {
    var beg = ch;

    ch += std::memchr(ch, cast('/'), end - ch);

    var j = devfs.find(base, std::string_view(beg, ch));

    if (!j)
      j = devfs.insert(base, std::string_view(beg, ch), directory::create(&devfs, base, 0, 0, 0o40755));

    if (j.type != vfs::node::type::directory)
      return null;

    base = &move j;

    while (ch != end && *ch == cast('/'))
      ++ch;
  }

  return base;
}

pub fn publish(dev::dev_t id, dev::device &device) -> void
{
  var devfs = devfs::instance;

  var guard = std::lock_guard(&mut devfs.lock);

  switch (device)
  {
    case blkdev[device]:

      var devpath = device.query(blk::query::device_path);
      var devname = device.query(blk::query::device_part);

      var parent = devfs.mkpath(devfs.root, devpath);

      if (parent.type != vfs::node::type::directory)
        return;

      devfs.insert(parent, std::string_view(devname), device::create_blkdev(devfs, parent, id, 0, 0, 0o60600));

    case chrdev[device]:

      var devname = device.query(chr::query::device_path);

      var parent = devfs.root;

      if (var j = std::memrchr(devname.data, cast('/'), devname.len); j != devname.len)
      {
        parent = devfs.mkpath(parent, devname.substr(0, j));

        devname = devname.substr(j + 1, devname.len);
      }

      if (parent.type != vfs::node::type::directory)
        return;

      devfs.insert(parent, std::string_view(devname), device::create_chrdev(devfs, parent, id, 0, 0, 0o20600));

    else:
      std::panic("unhandled device");
  }
}

pub fn remove(dev::dev_t id, dev::device &device) -> void
{
  var devfs = devfs::instance;

  var guard = std::lock_guard(&mut devfs.lock);

  switch (device)
  {
    case blkdev[device]:

      var devpath = device.query(blk::query::device_path);
      var devname = device.query(blk::query::device_part);

      var parent = devfs.mkpath(devfs.root, devpath);

      if (parent.type != vfs::node::type::directory)
        return;

      devfs.remove(parent, std::string_view(devname));

    case chrdev[device]:

      var devname = device.query(chr::query::device_path);

      var parent = devfs.root;

      if (var j = std::memrchr(devname.data, cast('/'), devname.len); j != devname.len)
      {
        parent = devfs.mkpath(parent, devname.substr(0, j));

        devname = devname.substr(j + 1, devname.len);
      }

      if (parent.type != vfs::node::type::directory)
        return;

      devfs.remove(parent, std::string_view(devname));

    else:
      std::panic("unhandled device");
  }
}

pub fn query(devfs *fs, vfs::query query, std::string mut &result) -> vfs::result
{
  switch (query)
  {
    case fs_type:
      result = "devfs";
  }

  return ok;
}

pub fn mount(devfs mut *fs, Rc<vfs::node> mut &dentry) -> vfs::result
{
  dentry = fs.root;

  return ok;
}

pub fn statfs(devfs mut *fs, vfs::statfs mut &statfs, u64 mask) -> vfs::result
{
  return not_supported;
}

pub fn lookup(vfs::node mut *path, std::string_view name) -> Rc<vfs::node>
{
  var fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<directory mut &>(*path);

  if (name == ".")
    return path;

  if (name == "..")
    return this.parent;

  var guard = std::lock_shared_guard(&mut fs.lock);

  if (var j = this.contents.find(name); j != this.contents.end)
    return this.contents[j].value;

  return null;
}

pub fn create(vfs::node mut *path, std::string_view name, Rc<vfs::node> mut &dentry, u32 uid, u32 gid, u32 mode) -> vfs::result
{
  return not_supported;
}

pub fn symlink(vfs::node mut *path, std::string_view name, std::string_view target, Rc<vfs::node> mut &dentry, u32 uid, u32 gid, u32 mode) -> vfs::result
{
  var fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<directory mut &>(*path);

  var guard = std::lock_guard(&mut fs.lock);

  if (this.contents.contains(name))
    return already_exists;

  dentry = symlink::create(fs, path, target, 0, 0, 0o120777);

  this.contents.insert(name, dentry);

  return ok;
}

pub fn mkdir(vfs::node mut *path, std::string_view name, Rc<vfs::node> mut &dentry, u32 uid, u32 gid, u32 mode) -> vfs::result
{
  var fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<directory mut &>(*path);

  var guard = std::lock_guard(&mut fs.lock);

  if (this.contents.contains(name))
    return already_exists;

  dentry = directory::create(fs, path, 0, 0, 0o40700);

  this.contents.insert(name, dentry);

  return ok;
}

pub fn rename(vfs::node mut *oldpath, std::string_view oldname, vfs::node mut *newpath, std::string_view newname) -> vfs::result
{
  return not_supported;
}

pub fn link(vfs::node mut *oldpath, std::string_view oldname, vfs::node mut *newpath, std::string_view newname) -> vfs::result
{
  return not_supported;
}

pub fn open(vfs::node mut *node, vfs::fd mut &fd, process mut *process, u64 flags, u32 mode) -> vfs::result
{
  switch (node.type)
  {
    case directory:
      return ok;

    case symlink:
      return ok;

    case volume:
    case device:
      var &node = cast<device &>(*node);

      switch (dev::get(node.id))
      {
        case blkdev[device]:
          return blk::open(device, &mut fd, process, flags, mode);

        case chrdev[device]:
          return chr::open(device, &mut fd, process, flags, mode);

        else:
          return no_such_device;
      }
  }

  return not_supported;
}

pub fn getstat(vfs::node mut *node, vfs::stat mut &stat, u64 mask) -> vfs::result
{
  var fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<inode mut &>(*node);

  stat.uid = this.uid;
  stat.gid = this.gid;
  stat.mode = this.mode;
  stat.ctime = this.btime;
  stat.mtime = this.btime;
  stat.btime = this.btime;
  stat.inode = cast<uintptr>(&this);
  stat.device = cast<uintptr>(&fs);

  switch (node.type)
  {
    case directory:
      stat.size = 0;

    case symlink:
      stat.size = cast(cast<symlink mut &>(*node).target.len);

    case volume:
    case device:
      var &node = cast<device &>(*node);

      switch (dev::get(node.id))
      {
        case blkdev[device]:
          stat.size = cast<u64>(device.block_count) * cast<u64>(device.block_size);

        case chrdev[device]:
          stat.size = 0;

        else:
          return no_such_device;
      }
  }

  return ok;
}

pub fn putstat(vfs::node mut *node, vfs::stat &stat, u64 mask) -> vfs::result
{
  return ok;
}

pub fn readdir(vfs::node mut *node, u64 mut &cursor, vm::iovec &iovec, usize offset, usize length) -> vfs::result
{
  var fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<directory mut &>(*node);

  var guard = std::lock_shared_guard(&mut fs.lock);

  var count = 0;

  if (cursor == 0)
  {
    fn emit[iovec, offset, count](vfs::filetype file_type, std::string_view name) -> vm::result
    {
      var head = [u8(); sizeof<vfs::dirent>];

      var dirent = cast<vfs::dirent mut *>(head.data);
      dirent.rec_len = cast(std::align_up(sizeof<vfs::dirent> + name.len, 16));
      dirent.type = file_type;
      dirent.name_len = cast(name.len);

      if (var result = vm::memcpy(iovec, offset, head.data, head.len); !result)
        return result;

      if (var result = vm::memcpy(iovec, offset + head.len, name.data, name.len); !result)
        return result;

      count += cast(dirent.rec_len);
      offset += cast(dirent.rec_len);

      return ok;
    }

    if (var result = emit(vfs::filetype::directory, std::string_view(".")); !result)
      return cast(result);

    if (var result = emit(vfs::filetype::directory, std::string_view("..")); !result)
      return cast(result);

    for (var &[name, node] : this.contents)
    {
      var file_type = vfs::filetype();

      switch (node.type)
      {
        case directory:
          file_type = vfs::filetype::directory;

        case symlink:
          file_type = vfs::filetype::symlink;

        case volume:
          file_type = vfs::filetype::block_device;

        case device:
          file_type = vfs::filetype::character_device;
      }

      if (var result = emit(file_type, std::string_view(name)); !result)
        return cast(result);
    }

    cursor = 1;
  }

  return cast(count);
}

pub fn readlink(vfs::node mut *node, std::string mut &buffer) -> vfs::result
{
  var fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<symlink mut &>(*node);

  var guard = std::lock_shared_guard(&mut fs.lock);

  buffer = this.target;

  return ok;
}

pub fn read(vfs::node mut *node, Rc<io::iocb> mut &cb, u64 position, vm::iovec &iovec, usize offset, usize length) -> vfs::result
{
  var mut &this = cast<device mut &>(*node);

  var device = dev::get(this.id);

  if (!device)
    return no_such_device;

  var size = device.blkdev.block_count << device.blkdev.block_shift;

  if (position > size)
    return invalid_argument;

  if (position + cast(length) > size)
    length = cast<usize>(size - position);

  io::initiate(&mut cb, 1);

  blk::read(device.blkdev, &mut cb, position, iovec, offset, length);

  return ok;
}

pub fn write(vfs::node mut *node, Rc<io::iocb> mut &cb, u64 position, vm::iovec &iovec, usize offset, usize length) -> vfs::result
{
  var mut &this = cast<device mut &>(*node);

  var device = dev::get(this.id);

  if (!device)
    return no_such_device;

  var size = device.blkdev.block_count << device.blkdev.block_shift;

  if (position + cast(length) > size)
    return invalid_argument;

  io::initiate(&mut cb, 1);

  blk::write(device.blkdev, &mut cb, position, iovec, offset, length);

  return ok;
}

pub fn poll(vfs::node mut *node, Rc<io::iocb> mut &readable, Rc<io::iocb> mut &writeable) -> vfs::result
{
  var mut &this = cast<device mut &>(*node);

  switch (dev::get(this.id))
  {
    case chrdev[device]:
      return chr::poll(device, &mut readable, &mut writeable);

    else:
      return no_such_device;
  }

  return not_supported;
}

pub fn read(vfs::node mut *node, vm::iovec &iovec, usize offset, usize length) -> vfs::result
{
  var mut &this = cast<device mut &>(*node);

  switch (dev::get(this.id))
  {
    case chrdev[device]:
      return chr::read(device, iovec, offset, length);

    else:
      return no_such_device;
  }

  return not_supported;
}

pub fn write(vfs::node mut *node, vm::iovec &iovec, usize offset, usize length) -> vfs::result
{
  var mut &this = cast<device mut &>(*node);

  switch (dev::get(this.id))
  {
    case chrdev[device]:
      return chr::write(device, iovec, offset, length);

    else:
      return no_such_device;
  }

  return not_supported;
}

pub fn ioctl(vfs::node mut *node, u32 op, vm::iovec &iovec) -> vfs::result
{
  var mut &this = cast<device mut &>(*node);

  switch (dev::get(this.id))
  {
    case blkdev[device]:
      return blk::ioctl(device, op, iovec);

    case chrdev[device]:
      return chr::ioctl(device, op, iovec);

    else:
      return no_such_device;
  }

  return not_supported;
}

pub fn mmap(vfs::node mut *node, vm::virtrange range, u64 offset, vm::protection prot, vm::usage use) -> vfs::result
{
  var mut &this = cast<device mut &>(*node);

  var device = dev::get(this.id);

  if (!device)
    return no_such_device;

  return chr::mmap(device.chrdev, range, offset, prot, use);
}

pub fn unlink(vfs::node mut *path, std::string_view name) -> vfs::result
{
  var fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<directory mut &>(*path);

  var guard = std::lock_guard(&mut fs.lock);

  var j = this.contents.find(name);

  if (j == this.contents.end)
    return invalid_argument;

  switch (var &node = this.contents[j].value; node.type)
  {
    case directory:
      var &node = cast<directory &>(*node);

      if (!node.contents.empty)
        return directory_not_empty;

      this.contents.erase(j);

    case symlink:
      this.contents.erase(j);

    else:
      return invalid_argument;
  }

  return ok;
}

pub fn notify(vfs::node mut *path, vfs::node mut *node, u64 mask, std::string_view name) -> vfs::result
{
  var fs = cast<inode mut &>(*path).fs;

  vfs::notify(node, mask, cast<uintptr>(node));
  vfs::notify(fs.root, path, mask, cast<uintptr>(node), cast<uintptr>(path), name);

  return ok;
}

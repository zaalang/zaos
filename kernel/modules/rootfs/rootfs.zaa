//
// rootfs
//

import std.alloc;
import std.flat_hash_map;
import vfs.node;
import vfs.stat;
import vfs.fs;
import vm;
import io;
import mutex as _ : shared_mutex;
import process as _ : process;
import support.rc : Rc;
import chrono;

struct inode : pub vfs::node
{
  u32 uid;
  u32 gid;
  u32 mode;

  i64 btime;

  rootfs mut *fs;
  Rc<vfs::node> parent;

  inode(rootfs mut *fs, vfs::node mut *parent, u32 uid, u32 gid, u32 mode)
    : fs(fs), parent(parent), uid(uid), gid(gid), mode(mode)
  {
    this.btime = chrono::system_clock::now.time_since_epoch.count;
  }

  ~inode() = default;
}

struct directory : pub inode
{
  std::flat_hash_map<std::string, Rc<vfs::node>> contents;

  fn create(rootfs mut *fs, vfs::node mut *parent, u32 uid, u32 gid, u32 mode) -> Rc<vfs::node>
  {
    return std::allocator::new<directory>(fs, parent, uid, gid, mode);
  }

  fn destroy(vfs::node mut *node) -> void
  {
    std::allocator::delete(cast<directory mut *>(node));
  }

  #[lifetime(depend(*fs))]
  directory(rootfs mut *fs, vfs::node mut *parent, u32 uid, u32 gid, u32 mode)
    : super(fs, parent, uid, gid, mode)
  {
    vfs::node::init(&this, vfs::node::type::directory, vfs::node::ops::directory(&impl this));
  }

  ~directory() = default;
}

struct symlink : pub inode
{
  std::string target;

  fn create(rootfs mut *fs, vfs::node mut *parent, std::string_view target, u32 uid, u32 gid, u32 mode) -> Rc<vfs::node>
  {
    return std::allocator::new<symlink>(fs, parent, target, uid, gid, mode);
  }

  fn destroy(vfs::node mut *node) -> void
  {
    std::allocator::delete(cast<symlink mut *>(node));
  }

  #[lifetime(depend(*fs))]
  symlink(rootfs mut *fs, vfs::node mut *parent, std::string_view target, u32 uid, u32 gid, u32 mode)
    : super(fs, parent, uid, gid, mode),
      target(target)
  {
    vfs::node::init(&this, vfs::node::type::symlink, vfs::node::ops::symlink(&impl this));
  }

  ~symlink() = default;
}

pub struct rootfs : pub vfs::file_system
{
  shared_mutex lock;
  Rc<vfs::node> root;

  rootfs()
    : super(&impl this)
  {
    root = directory::create(&this, null, 0, 0, 0o40755);
  }

  ~rootfs() = default;
}

pub fn create(vfs::file_system_context &ctx = vfs::file_system_context()) -> rootfs mut *
{
  return new<rootfs>(std::allocator().allocate(sizeof<rootfs>, alignof<rootfs>))();
}

pub fn query(rootfs *fs, vfs::query query, std::string mut &result) -> vfs::result
{
  switch (query)
  {
    case fs_type:
      result = "rootfs";
  }

  return ok;
}

pub fn mount(rootfs mut *fs, Rc<vfs::node> mut &dentry) -> vfs::result
{
  dentry = fs.root;

  return ok;
}

pub fn statfs(rootfs mut *fs, vfs::statfs mut &statfs, u64 mask) -> vfs::result
{
  return not_supported;
}

pub fn lookup(vfs::node mut *path, std::string_view name) -> Rc<vfs::node>
{
  var mut &fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<directory mut &>(*path);

  if (name == ".")
    return path;

  if (name == "..")
    return this.parent;

  var guard = std::lock_shared_guard(&mut fs.lock);

  if (var j = this.contents.find(name); j != this.contents.end)
    return this.contents[j].value;

  return null;
}

pub fn create(vfs::node mut *path, std::string_view name, Rc<vfs::node> mut &dentry, u32 uid, u32 gid, u32 mode) -> vfs::result
{
  return not_supported;
}

pub fn symlink(vfs::node mut *path, std::string_view name, std::string_view target, Rc<vfs::node> mut &dentry, u32 uid, u32 gid, u32 mode) -> vfs::result
{
  var fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<directory mut &>(*path);

  var guard = std::lock_guard(&mut fs.lock);

  if (this.contents.contains(name))
    return already_exists;

  dentry = symlink::create(fs, path, target, uid, gid, vfs::S_IFLNK | (mode & vfs::S_IUMSK));

  this.contents.insert(name, dentry);

  return ok;
}

pub fn mkdir(vfs::node mut *path, std::string_view name, Rc<vfs::node> mut &dentry, u32 uid, u32 gid, u32 mode) -> vfs::result
{
  var fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<directory mut &>(*path);

  var guard = std::lock_guard(&mut fs.lock);

  if (this.contents.contains(name))
    return already_exists;

  dentry = directory::create(fs, path, uid, gid, vfs::S_IFDIR | (mode & vfs::S_IUMSK));

  this.contents.insert(name, dentry);

  return ok;
}

pub fn rename(vfs::node mut *oldpath, std::string_view oldname, vfs::node mut *newpath, std::string_view newname) -> vfs::result
{
  var fs = cast<inode mut &>(*oldpath).fs;
  var mut &olddir = cast<directory mut &>(*oldpath);
  var mut &newdir = cast<directory mut &>(*newpath);

  var guard = std::lock_guard(&mut fs.lock);

  var j = olddir.contents.find(oldname);

  if (j == olddir.contents.end)
    return invalid_argument;

  var dentry = olddir.contents[j].value;

  for (var parent = newpath; parent; parent = cast<inode&>(*parent).parent)
    if (parent == dentry)
      return invalid_argument;

  if (var i = newdir.contents.find(newname); i != newdir.contents.end)
  {
    var &entry = newdir.contents[i].value;

    if (entry.type == vfs::node::type::directory)
    {
      if (!cast<directory&>(*entry).contents.empty)
        return directory_not_empty;
    }
  }

  olddir.contents.erase(j);
  newdir.contents.insert_or_assign(newname, dentry);

  return ok;
}

pub fn link(vfs::node mut *oldpath, std::string_view oldname, vfs::node mut *newpath, std::string_view newname) -> vfs::result
{
  return not_supported;
}

pub fn open(vfs::node mut *node, vfs::fd mut &fd, process mut *process, u64 flags, u32 mode) -> vfs::result
{
  switch (node.type)
  {
    case directory:
      return ok;

    case symlink:
      return ok;
  }

  return not_supported;
}

pub fn getstat(vfs::node mut *node, vfs::stat mut &stat, u64 mask) -> vfs::result
{
  var fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<inode mut &>(*node);

  stat.uid = this.uid;
  stat.gid = this.gid;
  stat.mode = this.mode;
  stat.ctime = this.btime;
  stat.mtime = this.btime;
  stat.btime = this.btime;
  stat.inode = cast<uintptr>(&this);
  stat.device = cast<uintptr>(&fs);

  switch (node.type)
  {
    case directory:
      stat.size = 0;

    case symlink:
      stat.size = cast(cast<symlink mut &>(this).target.len);
  }

  return ok;
}

pub fn putstat(vfs::node mut *node, vfs::stat &stat, u64 mask) -> vfs::result
{
  var fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<inode mut &>(*node);

  if (mask & vfs::stats::mode == vfs::stats::mode)
    this.mode = (this.mode & ~0xfff) | (stat.mode & 0xfff);

  if (mask & vfs::stats::uid == vfs::stats::uid)
    this.uid = stat.uid;

  if (mask & vfs::stats::gid == vfs::stats::gid)
    this.gid = stat.gid;

  return ok;
}

pub fn readdir(vfs::node mut *node, u64 mut &cursor, vm::iovec &iovec, usize offset, usize length) -> vfs::result
{
  var mut &fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<directory mut &>(*node);

  var guard = std::lock_shared_guard(&mut fs.lock);

  var count = 0;

  if (cursor == 0)
  {
    fn emit[iovec, offset, count](vfs::filetype file_type, std::string_view name) -> vm::result
    {
      var head = [u8(); sizeof<vfs::dirent>];

      var dirent = cast<vfs::dirent mut *>(head.data);
      dirent.rec_len = cast(std::align_up(sizeof<vfs::dirent> + name.len, 16));
      dirent.type = file_type;
      dirent.name_len = cast(name.len);

      if (var result = vm::memcpy(iovec, offset, head.data, head.len); !result)
        return result;

      if (var result = vm::memcpy(iovec, offset + head.len, name.data, name.len); !result)
        return result;

      count += cast(dirent.rec_len);
      offset += cast(dirent.rec_len);

      return ok;
    }

    if (var result = emit(vfs::filetype::directory, std::string_view(".")); !result)
      return cast(result);

    if (this.parent)
    {
      if (var result = emit(vfs::filetype::directory, std::string_view("..")); !result)
        return cast(result);
    }

    for (var &[name, node] : this.contents)
    {
      var file_type = vfs::filetype();

      switch (node.type)
      {
        case directory:
          file_type = vfs::filetype::directory;

        case symlink:
          file_type = vfs::filetype::symlink;
      }

      if (var result = emit(file_type, std::string_view(name)); !result)
        return cast(result);
    }

    cursor = 1;
  }

  return cast(count);
}

pub fn readlink(vfs::node mut *node, std::string mut &buffer) -> vfs::result
{
  var mut &fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<symlink mut &>(*node);

  var guard = std::lock_shared_guard(&mut fs.lock);

  buffer = this.target;

  return ok;
}

pub fn unlink(vfs::node mut *path, std::string_view name) -> vfs::result
{
  var mut &fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<directory mut &>(*path);

  var guard = std::lock_guard(&mut fs.lock);

  var j = this.contents.find(name);

  if (j == this.contents.end)
    return invalid_argument;

  switch (var &node = this.contents[j].value; node.type)
  {
    case directory:
      var &node = cast<directory&>(*node);

      if (!node.contents.empty)
        return directory_not_empty;

      this.contents.erase(j);

    case symlink:
      this.contents.erase(j);

    else:
      return invalid_argument;
  }

  return ok;
}

pub fn notify(vfs::node mut *path, vfs::node mut *node, u64 mask, std::string_view name) -> vfs::result
{
  var mut &fs = cast<inode mut &>(*path).fs;

  vfs::notify(node, mask, cast<uintptr>(node));
  vfs::notify(fs.root, path, mask, cast<uintptr>(node), cast<uintptr>(path), name);

  return ok;
}

//
// sata dev
//

import std.stdio;
import std.byteconv;
import vm;
import blk;
import ahci;
import platform;

pub struct satadev : pub blk::blkdev
{
  pub satadev(ahci::port mut &port)
    : super(&impl this),
      port(&port)
  {
    var buffer = vm::allocate_physical_pages(512);

    if (port.identify(buffer.addr))
    {
      var ident = cast<u8[512]*>(buffer.addr.ptr);

      std::assert(ident[99] & 0x3 != 0); // lba);
      std::assert(ident[167] & 0x44 == 0x44); // lba 48);
      std::assert(ident[213] & 0x50 == 0x40); // 512 byte sectors);

      this.block_size = 512;
      this.block_shift = std::ctz(this.block_size);
      this.block_count = std::load_le_u64(&ident[200]);
    }

    vm::release_physical_pages(buffer);
  }

  pub fn name(this &) -> std::string
  {
    return this.port.name;
  }

  pub fn query(this &, blk::query query, std::string mut &result) override -> blk::result
  {
    switch (query)
    {
      case device_path:
        result = std::format("disk/{}", this.name);

      case device_part:
        result = "0";

      case device_uuid:
        result = "";
    }

    return ok;
  }

  pub fn ioctl(this mut &, u32 op, vm::iovec &buffer) override -> blk::result
  {
    return not_supported;
  }

  pub fn enqueue(this mut &, blk::request mut *request) override -> blk::result
  {
    if (var result = this.port.enqueue(request); !result)
      return cast<blk::result>(result);

    return ok;
  }

  pub fn cancel(this mut &, blk::request mut *request) override -> blk::result
  {
    if (var result = this.port.cancel(request); !result)
      return cast<blk::result>(result);

    return ok;
  }

  pub ~satadev() = default;

  ahci::port mut &port;
}

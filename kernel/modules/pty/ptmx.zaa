//
// pty ptmx
//

import std.stdio;
import dev;
import chr.chrdev;
import io;
import vm;
import vfs;
import pty.ptm;
import support.rc : Rc;

pub struct ptmx : pub chr::chrdev
{
  pub ptmx()
    : super(&impl this)
  {
    std::print("ptmx inited");
  }

  pub fn query(this &, chr::query query, std::string mut &result) -> chr::result
  {
    switch (query)
    {
      case device_name:
        result = "pts/ptmx";
    }

    return ok;
  }

  pub fn open(this mut &, vfs::fd mut &fd, u64 flags, u32 mode) -> chr::result
  {
    if (flags & 0x3 != 0)
    {
      static n = 1;

      var ptty = chr::chrdev::create<pty::ptty>(n++);
      var ptm = pty::ptm::create(ptty);

      fd = vfs::file_descriptor::create(ptm);

      if (var result = ptm.node_operations.open(ptm, &mut fd, flags, mode); !result)
        return cast(result);

      dev::register(dev::dev_t(), ptty);
    }

    return ok;
  }

  pub fn ioctl(this mut &, u32 op, vm::iovec &buffer) -> chr::result
  {
    return not_supported;
  }

  pub fn poll(this mut &, Rc<io::iocb> mut &readable, Rc<io::iocb> mut &writeable) -> chr::result
  {
    return not_supported;
  }

  pub fn read(this mut &, vm::iovec &buffer, usize offset, usize length) -> chr::result
  {
    return not_supported;
  }

  pub fn write(this mut &, vm::iovec &buffer, usize offset, usize length) -> chr::result
  {
    return not_supported;
  }

  pub fn mmap(this mut &, vm::virtrange range, u64 offset, vm::protection prot, vm::usage use) -> chr::result
  {
    return not_supported;
  }

  pub ~ptmx() = default;
}

//
// ext2fs
//

import std.alloc;
import std.flat_hash_map;
import ext2fs.volume;
import ext2 : ext2_ino_t, ext2_super_block, ext2_group_descriptor, ext2_inode, ext2_dir_entry, ext2_ftype;
import vfs.node;
import vfs.stat;
import vfs.fs;
import blk;
import vm;
import io;
import slab : slab_allocator;
import mutex as _ : mutex, shared_mutex;
import process as _ : process;
import support.rc : Rc;

struct inode : pub vfs::node
{
  ext2fs mut *fs;
  ext2_ino_t ino;
  shared_mutex lock;

  vfs::result status;

  u16 mode;
  u32 uid;
  u32 gid;

  u64 size;

  i64 ctime;
  i64 mtime;

  u64 blocks;
  u32[15] contents;

  bool unlinked;

  u8[16] reserved;

  fn allocator()
  {
    static allocator = #slab_allocator<inode>();

    return &allocator;
  }

  fn create() -> Rc<inode>
  {
    return allocator.allocate();
  }

  inode() = default;
  ~inode() = default;
}

pub struct ext2fs : pub vfs::file_system
{
  shared_mutex lock;
  volume volume;
  Rc<vfs::node> dev;
  std::string source;
  Rc<vfs::node> root;
  std::flat_hash_map<ext2_ino_t, Rc<inode>> node_cache;

  ext2fs(vfs::node mut *dev, std::string &source)
    : super(&impl this), dev(dev), source(source)
  {
  }

  ~ext2fs() = default;
}

pub fn create(vfs::file_system_context &ctx) -> ext2fs mut *
{
  var dev = vfs::lookup(colonel, vfs::root, ctx.source);

  return new<ext2fs>(std::allocator().allocate(sizeof<ext2fs>, alignof<ext2fs>))(dev, ctx.source);
}

fn get_node(ext2fs mut &fs, Rc<vfs::node> mut &node, ext2_ino_t ino) -> vfs::result
{
  fs.lock.lock_shared();

  if (var j = fs.node_cache.find(ino); j != fs.node_cache.end)
  {
    node = fs.node_cache[j].value;

    fs.lock.unlock_shared();

    var inode = cast<inode mut *>(node);

    if (inode.status <= cast(0))
      return inode.status;

    var guard = std::lock_guard(&mut inode.lock);

    return inode.status;
  }

  fs.lock.unlock_shared();

  fs.lock.lock();

  if (var j = fs.node_cache.find(ino); j != fs.node_cache.end)
  {
    node = fs.node_cache[j].value;

    fs.lock.unlock();

    var inode = cast<inode mut *>(node);
    var guard = std::lock_guard(&mut inode.lock);

    return inode.status;
  }

  var inode = inode::create();
  var guard = std::lock_guard(&mut inode.lock);

  inode.fs = &fs;
  inode.ino = ino;
  inode.status = cast(1);

  fs.node_cache.insert(ino, inode);

  fs.lock.unlock();

  var rawinode = fs.volume.fetch_inode(fs.dev, ino);

  if (!rawinode.result)
    return (inode.status = rawinode.result);

  inode.mode = rawinode.ptr.mode;
  inode.uid = rawinode.ptr.uid;
  inode.gid = rawinode.ptr.gid;

  inode.size = rawinode.ptr.size;

  inode.ctime = cast(rawinode.ptr.i_ctime) * 1_000_000_000;
  inode.mtime = cast(rawinode.ptr.i_mtime) * 1_000_000_000;

  inode.blocks = std::ceil_div(inode.size, cast(fs.volume.bsize));
  inode.contents = rawinode.ptr.i_contents;

  inode.unlinked = (rawinode.ptr.i_links == 0);

  switch (rawinode.ptr.type)
  {
    case regular:
      vfs::node::init(inode, vfs::node::type::file, vfs::node_file_operations());

    case directory:
      vfs::node::init(inode, vfs::node::type::directory, vfs::node_directory_operations());

    case symlink:
      vfs::node::init(inode, vfs::node::type::symlink, vfs::node_symlink_operations());

    else:
      return (inode.status = not_supported);
  }

  inode.status = vfs::result::ok;

  node = inode;

  return ok;
}

fn unlink_node(ext2fs mut &fs, Rc<vfs::node> mut &node, ext2_inode mut *dir, ext2_dir_entry mut *entry) -> vfs::result
{
  var mut &node = cast<inode mut &>(*node);

  var guard = std::lock_guard(&mut node.lock);

  var result = fs.volume.unlink(fs.dev, dir, entry);

  if (cast<i32>(result) == 0)
  {
    var guard = std::lock_guard(&mut fs.lock);

    fs.node_cache.erase(node.ino);

    node.unlinked = true;
  }

  return result;
}

pub fn query(ext2fs *fs, vfs::query query, std::string mut &result) -> vfs::result
{
  switch (query)
  {
    case fs_type:
      result = "ext2";

    case fs_source:
      result = fs.source;
  }

  return ok;
}

pub fn mount(ext2fs mut *fs, Rc<vfs::node> mut &dentry) -> vfs::result
{
  if (!fs.dev)
    return invalid_argument;

  var flags = volume::flags();

  if (var result = fs.volume.mount(fs.dev, flags); !result)
    return result;

  if (var result = fs.get_node(&mut fs.root, EXT2_ROOT_NODE); !result)
    return result;

  dentry = fs.root;

  return ok;
}

pub fn statfs(ext2fs mut *fs, vfs::statfs mut &statfs, u64 mask) -> vfs::result
{
  statfs.bsize = cast(fs.volume.bsize);
  statfs.blocks = cast(fs.volume.blocks);
  statfs.free_blocks = cast(fs.volume.free_blocks);

  return ok;
}

pub fn lookup(vfs::node mut *path, std::string_view name) -> Rc<vfs::node>
{
  var fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<inode mut &>(*path);

  var guard = std::lock_shared_guard(&mut this.lock);

  for (var position = 0; position < this.size; )
  {
    var block = fs.volume.fetch_block(fs.dev, this.contents, position);

    if (!block.result)
      return null;

    for (var entry = cast<ext2_dir_entry*>(block.ptr); entry < cast<ext2_dir_entry*>(block.ptr + block.length); )
    {
      if (entry.rec_len == 0)
        break;

      if (entry.ino != 0 && entry.name == name)
      {
        var node = Rc<vfs::node>();
        if (var result = fs.get_node(&mut node, entry.ino); !result)
          return null;

        return node;
      }

      entry = cast<ext2_dir_entry*>(cast<uintptr>(entry) + cast<usize>(entry.rec_len));
    }

    position += cast(block.length);
  }

  return null;
}

pub fn create(vfs::node mut *path, std::string_view name, Rc<vfs::node> mut &dentry, u32 uid, u32 gid, u32 mode) -> vfs::result
{
  var fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<inode mut &>(*path);

  if (fs.volume.is_readonly)
    return readonly_file_system;

  if (name.len >= EXT2_NAME_LENGTH)
    return name_too_long;

  var guard = std::lock_guard(&mut this.lock);

  var rawinode = fs.volume.fetch_inode(fs.dev, this.ino);

  if (!rawinode.result)
    return rawinode.result;

  if (rawinode.ptr.i_links == 0)
    return not_found;

  if (var entry = fs.volume.find(fs.dev, rawinode.ptr, name); entry.result)
  {
    if (var result = fs.get_node(&mut dentry, entry.ptr.ino); !result)
      return result;

    return already_exists;
  }

  var entry = fs.volume.create(fs.dev, rawinode.ptr, name, uid, gid, cast<u16>(mode));

  if (!entry.result)
    return entry.result;

  this.size = rawinode.ptr.size;
  this.contents = rawinode.ptr.i_contents;

  rawinode.commit(rawinode.ptr, sizeof<ext2_inode>);

  fs.volume.flush(fs.dev);

  if (var result = fs.get_node(&mut dentry, entry.ptr.ino); !result)
    return result;

  return ok;
}

pub fn symlink(vfs::node mut *path, std::string_view name, std::string_view target, Rc<vfs::node> mut &dentry, u32 uid, u32 gid, u32 mode) -> vfs::result
{
  var fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<inode mut &>(*path);

  if (fs.volume.is_readonly)
    return readonly_file_system;

  if (name.len >= EXT2_NAME_LENGTH)
    return name_too_long;

  if (target.len >= 4096)
    return name_too_long;

  var guard = std::lock_guard(&mut this.lock);

  var rawinode = fs.volume.fetch_inode(fs.dev, this.ino);

  if (!rawinode.result)
    return rawinode.result;

  if (rawinode.ptr.i_links == 0)
    return not_found;

  if (var entry = fs.volume.find(fs.dev, rawinode.ptr, name); entry.result)
  {
    if (var result = fs.get_node(&mut dentry, entry.ptr.ino); !result)
      return result;

    return already_exists;
  }

  var entry = fs.volume.symlink(fs.dev, rawinode.ptr, name, target, uid, gid, cast<u16>(mode));

  if (!entry.result)
    return entry.result;

  this.size = rawinode.ptr.size;
  this.contents = rawinode.ptr.i_contents;

  rawinode.commit(rawinode.ptr, sizeof<ext2_inode>);

  fs.volume.flush(fs.dev);

  if (var result = fs.get_node(&mut dentry, entry.ptr.ino); !result)
    return result;

  return ok;
}

pub fn mkdir(vfs::node mut *path, std::string_view name, Rc<vfs::node> mut &dentry, u32 uid, u32 gid, u32 mode) -> vfs::result
{
  var fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<inode mut &>(*path);

  if (fs.volume.is_readonly)
    return readonly_file_system;

  if (name.len >= EXT2_NAME_LENGTH)
    return name_too_long;

  var guard = std::lock_guard(&mut this.lock);

  var rawinode = fs.volume.fetch_inode(fs.dev, this.ino);

  if (!rawinode.result)
    return rawinode.result;

  if (rawinode.ptr.i_links == 0)
    return not_found;

  if (var entry = fs.volume.find(fs.dev, rawinode.ptr, name); entry.result)
  {
    if (var result = fs.get_node(&mut dentry, entry.ptr.ino); !result)
      return result;

    return already_exists;
  }

  var entry = fs.volume.mkdir(fs.dev, rawinode.ptr, name, uid, gid, cast<u16>(mode));

  if (!entry.result)
    return entry.result;

  this.size = rawinode.ptr.size;
  this.contents = rawinode.ptr.i_contents;

  rawinode.commit(rawinode.ptr, sizeof<ext2_inode>);

  fs.volume.flush(fs.dev);

  if (var result = fs.get_node(&mut dentry, entry.ptr.ino); !result)
    return result;

  return ok;
}

pub fn rename(vfs::node mut *oldpath, std::string_view oldname, vfs::node mut *newpath, std::string_view newname) -> vfs::result
{
  var fs = cast<inode mut &>(*oldpath).fs;
  var mut &olddir = cast<inode mut &>(*oldpath);
  var mut &newdir = cast<inode mut &>(*newpath);

  if (oldname ==  "." || oldname == "..")
    return not_permitted;

  if (newname ==  "." || newname == "..")
    return not_permitted;

  if (newname.len >= EXT2_NAME_LENGTH)
    return name_too_long;

  if (newpath == oldpath)
  {
    if (oldname == newname)
      return ok;
  }

  if (newpath != oldpath)
  {
    var dentry = lookup(oldpath, oldname);

    for (var parent = newpath; parent != fs.root; )
    {
      if (!parent)
        return io_error;

      if (parent == dentry)
        return invalid_argument;

      parent = lookup(parent, std::string_view(".."));
    }
  }

  var guard = std::lock_guard(&mut newdir.lock);

  var newdirinode = fs.volume.fetch_inode(fs.dev, newdir.ino);

  if (!newdirinode.result)
    return newdirinode.result;

  if (var entry = fs.volume.find(fs.dev, newdirinode.ptr, newname); entry.result)
  {
    var node = Rc<vfs::node>();
    if (var result = fs.get_node(&mut node, entry.ptr.ino); !result)
      return result;

    if (var result = fs.unlink_node(&mut node, newdirinode.ptr, entry.ptr); !result)
      return result;

    entry.commit(entry.ptr, entry.len);
  }

  if (newpath == oldpath)
  {
    if (var result = fs.volume.rename(fs.dev, newdirinode.ptr, oldname, newname); !result)
      return result;
  }

  if (newpath != oldpath)
  {
    var guard = std::lock_guard(&mut olddir.lock);

    var olddirinode = fs.volume.fetch_inode(fs.dev, olddir.ino);

    if (!olddirinode.result)
      return olddirinode.result;

    if (var result = fs.volume.rename(fs.dev, olddirinode.ptr, oldname, newdirinode.ptr, newname); !result)
      return result;

    olddir.size = olddirinode.ptr.size;
    olddir.contents = olddirinode.ptr.i_contents;

    olddirinode.commit(olddirinode.ptr, sizeof<ext2_inode>);
  }

  newdir.size = newdirinode.ptr.size;
  newdir.contents = newdirinode.ptr.i_contents;

  newdirinode.commit(newdirinode.ptr, sizeof<ext2_inode>);

  fs.volume.flush(fs.dev);

  return ok;
}

pub fn link(vfs::node mut *oldpath, std::string_view oldname, vfs::node mut *newpath, std::string_view newname) -> vfs::result
{
  return not_supported;
}

pub fn open(vfs::node mut *node, vfs::fd mut &fd, process mut *process, u64 flags, u32 mode) -> vfs::result
{
  switch (node.type)
  {
    case file:
      return ok;

    case directory:
      return ok;

    case symlink:
      return ok;
  }

  return not_supported;
}

pub fn getattr(vfs::node mut *node, vfs::stat mut &stat, u64 mask) -> vfs::result
{
  var fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<inode mut &>(*node);

  var guard = std::lock_shared_guard(&mut this.lock);

  stat.uid = this.uid;
  stat.gid = this.gid;
  stat.mode = cast(this.mode);
  stat.size = this.size;
  stat.ctime = this.ctime;
  stat.mtime = this.mtime;
  stat.inode = cast<uintptr>(this.ino);
  stat.device = cast<uintptr>(&fs);

  return ok;
}

pub fn setattr(vfs::node mut *node, vfs::stat &stat, u64 mask) -> vfs::result
{
  var fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<inode mut &>(*node);

  if (fs.volume.is_readonly)
    return readonly_file_system;

  var guard = std::lock_guard(&mut this.lock);

  if (mask != 0)
  {
    var rawinode = fs.volume.fetch_inode(fs.dev, this.ino);

    if (!rawinode.result)
      return rawinode.result;

    if (mask & vfs::stats::size == vfs::stats::size)
    {
      if (stat.size < std::align_down(this.size, fs.volume.bsize))
      {
        var last = std::ceil_div(stat.size, cast(fs.volume.bsize));

        if (var result = fs.volume.recover(fs.dev, rawinode.ptr, last); !result)
          return result;

        this.blocks = last;
        this.contents = rawinode.ptr.i_contents;
      }

      if (stat.size > std::align_up(this.size, fs.volume.bsize))
      {
        var last = std::ceil_div(stat.size, cast(fs.volume.bsize));

        if (var result = fs.volume.grow(fs.dev, rawinode.ptr, this.blocks, last); !result)
        {
          fs.volume.recover(fs.dev, rawinode.ptr, this.blocks);

          return result;
        }

        this.blocks = last;
        this.contents = rawinode.ptr.i_contents;
      }

      rawinode.ptr.size = stat.size;
    }

    if (mask & vfs::stats::mode == vfs::stats::mode)
      rawinode.ptr.mode = (rawinode.ptr.mode & ~0xfff) | cast(stat.mode & 0xfff);

    if (mask & vfs::stats::uid == vfs::stats::uid)
      rawinode.ptr.uid = stat.uid;

    if (mask & vfs::stats::gid == vfs::stats::gid)
      rawinode.ptr.gid = stat.gid;

    if (mask & vfs::stats::mtime == vfs::stats::mtime)
      rawinode.ptr.i_mtime = cast(stat.mtime / 1_000_000_000);

    if (mask & vfs::stats::ctime == vfs::stats::ctime)
      rawinode.ptr.i_ctime = cast(stat.ctime / 1_000_000_000);

    this.mode = rawinode.ptr.mode;
    this.uid = rawinode.ptr.uid;
    this.gid = rawinode.ptr.gid;
    this.size = rawinode.ptr.size;
    this.ctime = cast(rawinode.ptr.i_ctime) * 1_000_000_000;
    this.mtime = cast(rawinode.ptr.i_mtime) * 1_000_000_000;

    rawinode.commit(rawinode.ptr, sizeof<ext2_inode>);

    fs.volume.flush(fs.dev);
  }

  return ok;
}

pub fn readdir(vfs::node mut *node, u64 mut &cursor, vm::iovec &iovec, usize offset, usize length) -> vfs::result
{
  var fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<inode mut &>(*node);

  var guard = std::lock_shared_guard(&mut this.lock);

  var count = 0;

  var block_mask = cast<u64>(fs.volume.bsize - 1);

  for (var position = cursor & ~block_mask; position < this.size; )
  {
    var block = fs.volume.fetch_block(fs.dev, this.contents, position);

    if (!block.result)
      return block.result;

    for (var entry = cast<ext2_dir_entry*>(block.ptr + cast(cursor & block_mask)); entry < cast<ext2_dir_entry*>(block.ptr + block.length); )
    {
      if (entry.rec_len == 0)
        break;

      cursor += cast(entry.rec_len);

      if (entry.ino != 0)
      {
        fn emit[iovec, offset, count](vfs::filetype file_type, std::string_view name) -> vm::result
        {
          var head = [u8(); sizeof<vfs::dirent>];

          var dirent = cast<vfs::dirent mut *>(head.data);
          dirent.rec_len = cast(std::align_up(sizeof<vfs::dirent> + name.len, 16));
          dirent.type = file_type;
          dirent.name_len = cast(name.len);

          if (var result = vm::memcpy(iovec, offset, head.data, head.len); !result)
            return result;

          if (var result = vm::memcpy(iovec, offset + head.len, name.data, name.len); !result)
            return result;

          count += cast(dirent.rec_len);
          offset += cast(dirent.rec_len);

          return ok;
        }

        var file_type = vfs::filetype();

        switch (entry.type)
        {
          case regular:
            file_type = vfs::filetype::regular;

          case directory:
            file_type = vfs::filetype::directory;

          case symlink:
            file_type = vfs::filetype::symlink;
        }

        if (var result = emit(file_type, entry.name); !result)
          return (count != 0) ? cast(count) : cast(result);
      }

      entry = cast<ext2_dir_entry*>(cast<uintptr>(entry) + cast<usize>(entry.rec_len));
    }

    position += cast(block.length);
  }

  return cast(count);
}

pub fn readlink(vfs::node mut *node, std::string mut &buffer) -> vfs::result
{
  var fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<inode mut &>(*node);

  var guard = std::lock_shared_guard(&mut this.lock);

  if (this.size < EXT2_SHORT_SYMLINK_LENGTH)
  {
    buffer = std::string_view(cast<u8*>(this.contents.data), cast<usize>(this.size));

    return cast(buffer.len);
  }

  buffer.clear();

  for (var position = 0; position < this.size; )
  {
    var block = fs.volume.fetch_block(fs.dev, this.contents, position);

    if (!block.result)
      return block.result;

    var bytes = std::min(block.length, cast(this.size - position));

    buffer += std::string_view(block.ptr, bytes);

    position += cast(bytes);
  }

  return cast(buffer.len);
}

pub fn read(vfs::node mut *node, Rc<io::iocb> mut &cb, u64 position, vm::iovec &iovec, usize offset, usize length) -> vfs::result
{
  var fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<inode mut &>(*node);

  if (position % cast(fs.volume.bsize) != 0)
    return invalid_argument;

  if (length % cast(fs.volume.bsize) != 0)
    return invalid_argument;

  var guard = std::lock_shared_guard(&mut this.lock);

  if (position > this.size)
    return invalid_argument;

  if (position + cast(length) > this.size)
    length = std::align_up(cast<usize>(this.size - position), fs.volume.bsize);

  for (var remaining = length; remaining != 0; )
  {
    var block = fs.volume.lookup_block(fs.dev, this.contents, position);

    if (!block.result)
      return block.result;

    var bytes = std::min(block.length, remaining);

    if (var result = fs.dev.file_operations.read(fs.dev, &mut cb, block.offset, iovec, offset, bytes); !result)
      return result;

    remaining -= bytes;
    position += cast(bytes);
    offset += bytes;
  }

  return cast(length);
}

pub fn write(vfs::node mut *node, Rc<io::iocb> mut &cb, u64 position, vm::iovec &iovec, usize offset, usize length) -> vfs::result
{
  var fs = cast<inode mut &>(*node).fs;
  var mut &this = cast<inode mut &>(*node);

  if (fs.volume.is_readonly)
    return readonly_file_system;

  var guard = std::lock_shared_guard(&mut this.lock);

  if (position > this.size)
    length = 0;

  if (position + cast(length) > std::align_up(this.size, fs.volume.bsize))
    return invalid_argument;

  for (var remaining = length; remaining != 0; )
  {
    var block = fs.volume.lookup_block(fs.dev, this.contents, position);

    if (!block.result)
      return block.result;

    var bytes = std::min(block.length - cast(position & cast(fs.volume.bsize - 1)), remaining);

    if (var result = fs.dev.file_operations.write(fs.dev, &mut cb, block.offset + (position & cast(fs.volume.bsize - 1)), iovec, offset, bytes); !result)
      return result;

    remaining -= bytes;
    position += cast(bytes);
    offset += bytes;
  }

  return cast(length);
}

pub fn unlink(vfs::node mut *path, std::string_view name) -> vfs::result
{
  var fs = cast<inode mut &>(*path).fs;
  var mut &this = cast<inode mut &>(*path);

  if (fs.volume.is_readonly)
    return readonly_file_system;

  if (name ==  "." || name == "..")
    return not_permitted;

  if (name.len >= EXT2_NAME_LENGTH)
    return name_too_long;

  var guard = std::lock_guard(&mut this.lock);

  var rawinode = fs.volume.fetch_inode(fs.dev, this.ino);

  if (!rawinode.result)
    return rawinode.result;

  var entry = fs.volume.find(fs.dev, rawinode.ptr, name);

  if (!entry.result)
    return entry.result;

  var node = Rc<vfs::node>();
  if (var result = fs.get_node(&mut node, entry.ptr.ino); !result)
    return result;

  if (var result = fs.unlink_node(&mut node, rawinode.ptr, entry.ptr); !result)
    return result;

  entry.commit(entry.ptr, entry.len);

  rawinode.commit(rawinode.ptr, sizeof<ext2_inode>);

  fs.volume.flush(fs.dev);

  return ok;
}

pub fn notify(vfs::node mut *path, vfs::node mut *node, u64 mask, std::string_view name) -> vfs::result
{
  var fs = cast<inode mut &>(*path).fs;

  vfs::notify(node, mask, cast<uintptr>(cast<inode mut &>(*node).ino));
  vfs::notify(fs.root, path, mask, cast<uintptr>(cast<inode mut &>(*node).ino), cast<uintptr>(cast<inode mut &>(*path).ino), name);

  return ok;
}

fn destroy(vfs::node mut *node) -> void
{
  var inode = cast<inode mut *>(node);

  if (inode.unlinked)
  {
    if (var result = inode.fs.volume.delete(inode.fs.dev, inode.ino); !result)
      std::print("ext2: error delete inode ", inode.ino, " - ", result);
  }

  inode.ino = 0;
  inode::allocator.free(inode);
}

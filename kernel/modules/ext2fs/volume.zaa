//
// ext2fs
//

import std.alloc;
import std.span;
import vfs;
import blk.cache;
import std.memory;
import ext2 : ext2_ino_t, ext2_super_block, ext2_group_descriptor, ext2_inode, ext2_dir_entry, ext2_ftype;
import mutex as _ : mutex;
import chrono;

pub struct volume
{
  pub enum flags
  {
    readonly = 1,

    pub const fn ~(flags lhs) -> flags { return cast<flags>(~cast<u64>(lhs)); }
    pub const fn &(flags lhs, flags rhs) -> flags { return cast<flags>(cast<u64>(lhs) & cast<u64>(rhs)); }
    pub const fn |(flags lhs, flags rhs) -> flags { return cast<flags>(cast<u64>(lhs) | cast<u64>(rhs)); }
  }

  flags flags;

  int block_shift;
  usize block_count;
  usize group_count;
  usize group_descriptor_size;
  u64 inode_size;
  u32 inodes_per_group;
  u64 blocks_per_group;
  u64 first_data_block;
  ext2_super_block superblock;
  std::vector<u8> group_descriptor_table;

  mutex inode_allocator_lock;
  mutex block_allocator_lock;

  pub fn is_readonly(this&) -> bool { return this.flags & flags::readonly == flags::readonly; }

  pub fn blocksize(this&) -> usize { return 1 << this.block_shift; }

  pub volume() = default;
  pub ~volume() = default;
}

fn incompat_supported(ext2_super_block &superblock) -> bool
{
  const supported = ext2::incompat::file_type | ext2::incompat::x64bit;

  return superblock.s_incompatible_features & ~supported == cast(0);
}

fn rocompat_supported(ext2_super_block &superblock) -> bool
{
  const supported = ext2::rocompat::sparse_super | ext2::rocompat::large_file;

  return superblock.s_readonly_features & ~supported == cast(0);
}

fn identify(vfs::node_ptr &dev, ext2_super_block mut &superblock) -> vfs::result
{
  if (var result = vfs::read(dev, EXT2_SUPER_BLOCK_OFFSET, &superblock, sizeof(superblock)); !result)
    return result;

  if (superblock.s_magic != EXT2_SUPER_BLOCK_MAGIC)
    return format_error;

  return ok;
}

pub fn mount(volume mut &this, vfs::node_ptr &dev, volume::flags flags) -> vfs::result
{
  var mut &superblock = this.superblock;

  if (var result = identify(dev, &mut superblock); !result)
    return result;

  if (!incompat_supported(superblock))
    return not_supported;

  if (!rocompat_supported(superblock) && (flags & volume::flags::readonly) != volume::flags::readonly)
    return not_supported;

  if (superblock.s_block_shift > 12)
    return not_supported;

  if (superblock.s_blocks_per_group == 0 || superblock.s_blocks_per_group != superblock.s_fragments_per_group)
    return not_supported;

  if (superblock.s_inode_size < 128)
    return not_supported;

  this.flags = flags;

  this.block_shift = superblock.block_shift;

  this.inode_size = cast(superblock.s_inode_size);
  this.block_count = cast(superblock.blocks);
  this.inodes_per_group = cast(superblock.s_inodes_per_group);
  this.blocks_per_group = cast(superblock.s_blocks_per_group);
  this.first_data_block = cast(superblock.s_first_data_block);
  this.group_count = std::ceil_div(this.block_count, cast(superblock.s_blocks_per_group));

  this.group_descriptor_size = 32;
  if (superblock.is64bit)
    this.group_descriptor_size = cast(superblock.s_group_descriptor_size);

  this.group_descriptor_table.resize(std::align_up(this.group_count * this.group_descriptor_size, 1 << this.block_shift));

  var gdt_offset = cast<u64>(this.first_data_block + 1) << this.block_shift;

  if (var result = vfs::read(dev, gdt_offset, this.group_descriptor_table.data, this.group_descriptor_table.len); !result)
    return result;

  return ok;
}

pub fn flush(volume mut &this, vfs::node_ptr &dev) -> vfs::result
{
  var mut &superblock = this.superblock;

  var gdt_offset = cast<u64>(this.first_data_block + 1) << this.block_shift;

  if (var result = vfs::write(dev, gdt_offset, this.group_descriptor_table.data, this.group_descriptor_table.len); !result)
    return result;

  if (var result = vfs::write(dev, EXT2_SUPER_BLOCK_OFFSET, &superblock, sizeof(superblock)); !result)
    return result;

  return ok;
}

struct inode_info
{
  u64 offset;
  vfs::result result;

  inode_info(vfs::result result)
    : result(result)
  {
  }

  inode_info() = default;
  inode_info(inode_info&) = default;
  fn =(inode_info mut &, inode_info&) -> inode_info mut & = default;
  ~inode_info() = default;
}

pub fn lookup_inode(volume mut &this, vfs::node_ptr &dev, ext2_ino_t ino) -> inode_info
{
  var info = inode_info();

  var mut &superblock = this.superblock;

  if ((ino < superblock.s_first_inode || ino >= superblock.s_inodes) && ino != EXT2_ROOT_NODE)
    info.result = vfs::result::invalid_argument;

  if (info.result)
  {
    var group = (ino - 1) / superblock.s_inodes_per_group;
    var groupdesc = cast<ext2_group_descriptor*>(this.group_descriptor_table.data + cast(group) * this.group_descriptor_size);
    var inodetable = get_inode_table(&superblock, groupdesc);

    info.offset = inodetable << this.block_shift + cast<u64>((ino - 1) % this.inodes_per_group) * this.inode_size;
  }

  return info;
}

struct inode_result : pub inode_info
{
  ext2_inode mut *ptr;
  blk::block_ptr block;

  pub fn commit(this mut &, void *data, usize len) -> void
  {
    this.block.commit(data, len);
  }

  inode_result() = default;
  inode_result(inode_result&) = default;
  fn =(inode_result mut &, inode_result&) -> inode_result mut & = default;
  ~inode_result() = default;
}

pub fn fetch_inode(volume mut &this, vfs::node_ptr &dev, ext2_ino_t ino) -> inode_result
{
  var inode = inode_result();
  inode.super = this.lookup_inode(dev, ino);

  if (inode.result)
  {
    inode.block = blk::fetch(dev, inode.offset);

    if (inode.block.wait(); !inode.block)
      inode.result = cast(inode.block.result);

    inode.ptr = cast<ext2_inode mut *>(inode.block.ptr(inode.offset));
  }

  return inode;
}

struct block_info
{
  u64 offset;
  usize length;
  vfs::result result;

  block_info(vfs::result result)
    : result(result)
  {
  }

  block_info() = default;
  block_info(block_info&) = default;
  fn =(block_info mut &, block_info&) -> block_info mut & = default;
  ~block_info() = default;
}

pub fn lookup_block(volume &this, vfs::node_ptr &dev, u32[15] &contents, u64 offset) -> block_info
{
  var info = block_info();

  let k0 = EXT2_DIRECT_BLOCKS;
  let k1 = k0 + this.blocksize / sizeof<u32>;
  let k2 = k1 + std::pow(this.blocksize / sizeof<u32>, 2);
  let k3 = k2 + std::pow(this.blocksize / sizeof<u32>, 3);

  var index = cast<usize>(offset >> this.block_shift);

  if (index < k0)
  {
    var table = std::span(contents.data, k0);

    info.offset = cast<u64>(table[index]) << this.block_shift;

    for (var current = table[index]; index < table.len && table[index] == current; ++index, ++current)
      info.length += this.blocksize;
  }
  else if (index < k1)
  {
    var pos0 = cast<u64>(contents[EXT2_DIRECT_BLOCKS]) << this.block_shift;

    var block0 = blk::fetch(dev, pos0);

    if (block0.wait(); !block0)
      info.result = cast(block0.result);

    if (info.result)
    {
      index -= k0;

      var table0 = std::span(cast<u32*>(block0.ptr(pos0)), k1 - k0);

      info.offset = cast<u64>(table0[index]) << this.block_shift;

      for (var current = table0[index]; index < table0.len && table0[index] == current; ++index, ++current)
        info.length += this.blocksize;
    }
  }
  else if (index < k2)
  {
    var pos0 = cast<u64>(contents[EXT2_DIRECT_BLOCKS + 1]) << this.block_shift;

    var block0 = blk::fetch(dev, pos0);

    if (block0.wait(); !block0)
      info.result = cast(block0.result);

    if (info.result)
    {
      index -= k1;

      var pos1 = cast<u64>(*(cast<u32*>(block0.ptr(pos0)) + index / (k1 - k0))) << this.block_shift;

      var block1 = blk::fetch(dev, pos1);

      if (block1.wait(); !block1)
        info.result = cast(block1.result);

      if (info.result)
      {
        index &= (k1 - k0) - 1;

        var table = std::span(cast<u32*>(block1.ptr(pos1)), k1 - k0);

        info.offset = cast<u64>(table[index]) << this.block_shift;

        for (var current = table[index]; index < table.len && table[index] == current; ++index, ++current)
          info.length += this.blocksize;
      }
    }
  }
  else if (index < k3)
  {
    var pos0 = cast<u64>(contents[EXT2_DIRECT_BLOCKS + 2]) << this.block_shift;

    var block0 = blk::fetch(dev, pos0);

    if (block0.wait(); !block0)
      info.result = cast(block0.result);

    if (info.result)
    {
      index -= k2;

      var pos1 = cast<u64>(*(cast<u32*>(block0.ptr(pos0)) + index / (k2 - k1))) << this.block_shift;

      var block1 = blk::fetch(dev, pos1);

      if (block1.wait(); !block1)
        info.result = cast(block1.result);

      if (info.result)
      {
        index &= (k2 - k1) - 1;

        var pos2 = cast<u64>(*(cast<u32*>(block1.ptr(pos1)) + index / (k1 - k0))) << this.block_shift;

        var block2 = blk::fetch(dev, pos2);

        if (block2.wait(); !block2)
          info.result = cast(block2.result);

        if (info.result)
        {
          index &= (k1 - k0) - 1;

          var table = std::span(cast<u32*>(block1.ptr(pos1)), k1 - k0);

          info.offset = cast<u64>(table[index]) << this.block_shift;

          for (var current = table[index]; index < table.len && table[index] == current; ++index, ++current)
            info.length += this.blocksize;
        }
      }
    }
  }
  else
  {
    info.result = vfs::result::invalid_argument;
  }

  return info;
}

struct block_result : pub block_info
{
  u8 mut *ptr;
  usize length;
  blk::block_ptr block;

  pub fn commit(this mut &, void *data, usize len) -> void
  {
    this.block.commit(data, len);
  }

  block_result() = default;
  block_result(block_result&) = default;
  fn =(block_result mut &, block_result&) -> block_result mut & = default;
  ~block_result() = default;
}

pub fn fetch_block(volume &this, vfs::node_ptr &dev, u32[15] &contents, u64 offset) -> block_result
{
  var block = block_result();
  block.super = this.lookup_block(dev, contents, offset);

  if (block.result)
  {
    block.block = blk::fetch(dev, block.offset);

    if (block.block.wait(); !block.block)
      block.result = cast(block.block.result);

    block.ptr = block.block.ptr(block.offset);
    block.length = std::min(block.super.length, block.block.size);
  }

  return block;
}

fn now() -> u32
{
  return cast<u32>(chrono::system_clock::now.time_since_epoch.floor<chrono::seconds>.count & 0xffffffff);
}

fn acquire_bits(volume mut &this, vfs::node_ptr &dev, u64 bitmapblock, u64 wanted, u64 mut &idx, u64 mut &count) -> vfs::result
{
  var block_shift = this.block_shift;
  var bitmap_size = 1 << block_shift;

  var block0 = blk::fetch(dev, bitmapblock << block_shift);

  if (block0.wait(); !block0)
    return cast(block0.result);

  var bitmap = block0.ptr(bitmapblock << block_shift);

  for (var i = 0; i < bitmap_size; ++i)
  {
    if (*(bitmap + i) != 255)
    {
      var base = cast<u64>(i << 3);
      var first = cast<u64>(std::ctz(~*(bitmap + i)));
      var last = cast<u64>(std::ctz(*(bitmap + i) & ~((1 << first) - 1)));

      if (last == 8)
      {
        for (i += 1; i < bitmap_size - 1 && *(bitmap + i) == 0; ++i)
          last += 8;

        last += cast<u64>(std::ctz(*(bitmap + i)));
      }

      if (last - first > count)
      {
        idx = base + first;
        count = std::min(last - first, wanted);

        if (count == wanted)
          break;
      }
    }
  }

  for (var i = cast<usize>(idx); i < cast<usize>(idx + count); ++i)
  {
    *(bitmap + (i >> 3)) |= 1 << (i & 0x7);
  }

  block0.commit(bitmap + cast<usize>(idx >> 3), 1 + cast<usize>(count >> 3));

  return ok;
}

fn release_bits(volume mut &this, vfs::node_ptr &dev, u64 bitmapblock, u64 idx, u64 count) -> vfs::result
{
  var block_shift = this.block_shift;
  var bitmap_size = 1 << block_shift;

  var block0 = blk::fetch(dev, bitmapblock << block_shift);

  if (block0.wait(); !block0)
    return cast(block0.result);

  var bitmap = block0.ptr(bitmapblock << block_shift);

  for (var i = cast<usize>(idx); i < cast<usize>(idx + count); ++i)
  {
    if (*(bitmap + (i >> 3)) & (1 << (i & 0x7)) == 0)
      return argument_out_of_domain;
  }

  for (var i = cast<usize>(idx); i < cast<usize>(idx + count); ++i)
  {
    *(bitmap + (i >> 3)) &= ~(1 << (i & 0x7));
  }

  block0.commit(bitmap + cast<usize>(idx >> 3), 1 + cast<usize>(count >> 3));

  return ok;
}

fn allocate_inode(volume mut &this, vfs::node_ptr &dev, ext2_ino_t mut &ino, u16 mode) -> vfs::result
{
  var guard = std::lock_guard(&mut this.inode_allocator_lock);

  for (var group = 0; group < this.group_count; ++group)
  {
    var groupdesc = cast<ext2_group_descriptor mut *>(this.group_descriptor_table.data + cast(group) * this.group_descriptor_size);
    var inodebitmap = get_inode_bitmap(&this.superblock, groupdesc);

    var idx = 0;
    var count = 0;

    if (var n = get_free_inodes(&this.superblock, groupdesc); n == 0)
      continue;

    if (var result = this.acquire_bits(dev, inodebitmap, 1, &mut idx, &mut count); !result)
      return result;

    if (count != 0)
    {
      ino = cast(idx) + cast(group) * this.inodes_per_group + 1;

      if (mode & EXT2_IFMT == EXT2_IFDIR)
        consume_used_directories(&this.superblock, groupdesc, 1);

      consume_free_inodes(&this.superblock, groupdesc, 1);

      return ok;
    }
  }

  return no_space_remaining;
}

fn deallocate_inode(volume mut &this, vfs::node_ptr &dev, ext2_ino_t ino, u16 mode) -> vfs::result
{
  var guard = std::lock_guard(&mut this.inode_allocator_lock);

  if (ino < 1)
    return argument_out_of_domain;

  var group = (ino - 1) / this.inodes_per_group;
  var groupdesc = cast<ext2_group_descriptor mut *>(this.group_descriptor_table.data + cast(group) * this.group_descriptor_size);
  var inodebitmap = get_inode_bitmap(&this.superblock, groupdesc);

  if (var result = this.release_bits(dev, inodebitmap, cast<u64>((ino - 1) % this.inodes_per_group), 1); !result)
    return result;

  if (mode & EXT2_IFMT == EXT2_IFDIR)
    release_used_directories(&this.superblock, groupdesc, 1);

  release_free_inodes(&this.superblock, groupdesc, 1);

  return ok;
}

fn allocate_blocks(volume mut &this, vfs::node_ptr &dev, u64 wanted, u64 mut &block, u64 mut &count) -> vfs::result
{
  var guard = std::lock_guard(&mut this.block_allocator_lock);

  for (var k = 0; k < 2; ++k)
  {
    for (var group = 0; group < this.group_count; ++group)
    {
      var groupdesc = cast<ext2_group_descriptor mut *>(this.group_descriptor_table.data + cast(group) * this.group_descriptor_size);
      var blockbitmap = get_block_bitmap(&this.superblock, groupdesc);

      if (var n = get_free_blocks(&this.superblock, groupdesc); n == 0 || (k == 0 && n < 4*wanted))
        continue;

      if (var result = this.acquire_bits(dev, blockbitmap, wanted, &mut block, &mut count); !result)
        return result;

      if (count != 0)
      {
        block += cast(group) * this.blocks_per_group + this.first_data_block;

        consume_free_blocks(&this.superblock, groupdesc, count);

        return ok;
      }
    }
  }

  return no_space_remaining;
}

fn deallocate_blocks(volume mut &this, vfs::node_ptr &dev, u64 block, u64 count) -> vfs::result
{
  var guard = std::lock_guard(&mut this.block_allocator_lock);

  if (block < this.first_data_block)
    return argument_out_of_domain;

  var idx = block - this.first_data_block;

  var group = idx / this.blocks_per_group;
  var groupdesc = cast<ext2_group_descriptor mut *>(this.group_descriptor_table.data + cast(group) * this.group_descriptor_size);
  var blockbitmap = get_block_bitmap(&this.superblock, groupdesc);

  if (var result = this.release_bits(dev, blockbitmap, idx % this.blocks_per_group, count); !result)
    return result;

  release_free_blocks(&this.superblock, groupdesc, count);

  return ok;
}

fn free(volume mut &this, vfs::node_ptr &dev, std::mutable_span<u32> mut &table, usize beg, usize end) -> vfs::result
{
  for (var i = beg; i < end; )
  {
    if (var block = table[i]; block != 0)
    {
      var count = 0;
      for (var j = 0; i + j < end && table[i + j] == block + cast(j); ++j)
        count += 1;

      this.deallocate_blocks(dev, cast(block), count);

      for (var j = 0; j < count; ++j)
        table[i++] = 0;
    }
    else
      ++i;
  }

  return ok;
}

fn free_indirect(volume mut &this, vfs::node_ptr &dev, std::mutable_span<u32> mut &table, usize k0, usize dk, int block_shift, usize first, usize last) -> vfs::result
{
  for (var i = (first - k0) / dk, var k = k0 + i * dk; i < table.len && table[i] != 0; i += 1, k += dk)
  {
    var block0 = blk::fetch(dev, cast<u64>(table[i]) << block_shift);

    if (block0.wait(); !block0)
      return cast(block0.result);

    var table0 = std::mutable_span(cast<u32 mut *>(block0.ptr(cast<u64>(table[i]) << block_shift)), 1 << (block_shift - 2));

    if (var result = this.free(dev, &mut table0, std::max(first, k) - k, std::min(last, k + dk) - k); !result)
      return result;

    block0.commit(table0.data, 1 << block_shift);
  }

  if (var result = this.free(dev, &mut table, std::ceil_div(first - k0, dk), std::ceil_div(last - k0, dk)); !result)
    return result;

  return ok;
}

fn free_double_indirect(volume mut &this, vfs::node_ptr &dev, std::mutable_span<u32> mut &table, usize k0, usize dk, int block_shift, usize first, usize last) -> vfs::result
{
  for (var i = (first - k0) / dk, var k = k0 + i * dk; i < table.len && table[i] != 0; i += 1, k += dk)
  {
    var block1 = blk::fetch(dev, cast<u64>(table[i]) << block_shift);

    if (block1.wait(); !block1)
      return cast(block1.result);

    var table1 = std::mutable_span(cast<u32 mut *>(block1.ptr(cast<u64>(table[i]) << block_shift)), 1 << (block_shift - 2));

    if (var result = this.free_indirect(dev, &mut table1, k, dk >> (block_shift - 2), block_shift, std::max(first, k), std::min(last, k + dk)); !result)
      return result;

    block1.commit(table1.data, 1 << block_shift);
  }

  if (var result = this.free(dev, &mut table, std::ceil_div(first - k0, dk), std::ceil_div(last - k0, dk)); !result)
    return result;

  return ok;
}

fn free_triple_indirect(volume mut &this, vfs::node_ptr &dev, std::mutable_span<u32> mut &table, usize k0, usize dk, int block_shift, usize first, usize last) -> vfs::result
{
  for (var i = (first - k0) / dk, var k = k0 + i * dk; i < table.len && table[i] != 0; i += 1, k += dk)
  {
    var block2 = blk::fetch(dev, cast<u64>(table[i]) << block_shift);

    if (block2.wait(); !block2)
      return cast(block2.result);

    var table2 = std::mutable_span(cast<u32 mut *>(block2.ptr(cast<u64>(table[i]) << block_shift)), 1 << (block_shift - 2));

    if (var result = this.free_double_indirect(dev, &mut table2, k, dk >> (block_shift - 2), block_shift, std::max(first, k), std::min(last, k + dk)); !result)
      return result;

    block2.commit(table2.data, 1 << block_shift);
  }

  if (var result = this.free(dev, &mut table, std::ceil_div(first - k0, dk), std::ceil_div(last - k0, dk)); !result)
    return result;

  return ok;
}

pub fn recover(volume mut &this, vfs::node_ptr &dev, ext2_inode mut *inode, u64 last) -> vfs::result
{
  let k0 = EXT2_DIRECT_BLOCKS;
  let k1 = k0 + this.blocksize / sizeof<u32>;
  let k2 = k1 + std::pow(this.blocksize / sizeof<u32>, 2);
  let k3 = k2 + std::pow(this.blocksize / sizeof<u32>, 3);

  if (inode.islnk && inode.size < EXT2_SHORT_SYMLINK_LENGTH)
    return ok;

  var n = cast<usize>(last);

  var table = std::mutable_span(inode.i_contents.data, inode.i_contents.len);

  if (var result = this.free(dev, &mut table, n, k0); !result)
    return result;

  if (var result = this.free_indirect(dev, &mut table[EXT2_DIRECT_BLOCKS .. EXT2_DIRECT_BLOCKS + 1], k0, k1 - k0, this.block_shift, std::max(n, k0), k1); !result)
    return result;

  if (var result = this.free_double_indirect(dev, &mut table[EXT2_DIRECT_BLOCKS + 1 .. EXT2_DIRECT_BLOCKS + 2], k1, k2 - k1, this.block_shift, std::max(n, k1), k2); !result)
    return result;

  if (var result = this.free_triple_indirect(dev, &mut table[EXT2_DIRECT_BLOCKS + 2 .. EXT2_DIRECT_BLOCKS + 3], k2, k3 - k2, this.block_shift, std::max(n, k2), k3); !result)
    return result;

  inode.i_blocks = inode_block_usage(&this.superblock, cast(n));

  return ok;
}

fn alloc(volume mut &this, vfs::node_ptr &dev, std::mutable_span<u32> mut &table, usize beg, usize end) -> vfs::result
{
  for (var i = beg; i < end; )
  {
    var first = 0;
    var count = 0;

    if (var result = this.allocate_blocks(dev, cast<u64>(end - i), &mut first, &mut count); !result)
      return result;

    for (var j = 0; j < count; ++j)
      table[i++] = cast<u32>(first + j);
  }

  return ok;
}

fn alloc_indirect(volume mut &this, vfs::node_ptr &dev, std::mutable_span<u32> mut &table, usize k0, usize dk, int block_shift, usize first, usize last) -> vfs::result
{
  if (var result = this.alloc(dev, &mut table, std::ceil_div(first - k0, dk), std::ceil_div(last - k0, dk)); !result)
    return result;

  for (var i = (first - k0) / dk, var k = k0 + i * dk; i < table.len && k < last; i += 1, k += dk)
  {
    var block0 = blk::fetch(dev, cast<u64>(table[i]) << block_shift);

    if (block0.wait(); !block0)
      return cast(block0.result);

    var table0 = std::mutable_span(cast<u32 mut *>(block0.ptr(cast<u64>(table[i]) << block_shift)), 1 << (block_shift - 2));

    if (var result = this.alloc(dev, &mut table0, std::max(first, k) - k, std::min(last, k + dk) - k); !result)
      return result;

    for (var j = last - k; j < table0.len; ++j)
      table0[j] = 0;

    block0.commit(table0.data, 1 << block_shift);
  }

  return ok;
}

fn alloc_double_indirect(volume mut &this, vfs::node_ptr &dev, std::mutable_span<u32> mut &table, usize k0, usize dk, int block_shift, usize first, usize last) -> vfs::result
{
  if (var result = this.alloc(dev, &mut table, std::ceil_div(first - k0, dk), std::ceil_div(last - k0, dk)); !result)
    return result;

  for (var i = (first - k0) / dk, var k = k0 + i * dk; i < table.len && k < last; i += 1, k += dk)
  {
    var block1 = blk::fetch(dev, cast<u64>(table[i]) << block_shift);

    if (block1.wait(); !block1)
      return cast(block1.result);

    var table1 = std::mutable_span(cast<u32 mut *>(block1.ptr(cast<u64>(table[i]) << block_shift)), 1 << (block_shift - 2));

    if (var result = this.alloc_indirect(dev, &mut table1, k, dk >> (block_shift - 2), block_shift, std::max(first, k), std::min(last, k + dk)); !result)
      return result;

    for (var j = std::ceil_div(last - k, dk >> (block_shift - 2)); j < table1.len; ++j)
      table1[j] = 0;

    block1.commit(table1.data, 1 << block_shift);
  }

  return ok;
}

fn alloc_triple_indirect(volume mut &this, vfs::node_ptr &dev, std::mutable_span<u32> mut &table, usize k0, usize dk, int block_shift, usize first, usize last) -> vfs::result
{
  if (var result = this.alloc(dev, &mut table, std::ceil_div(first - k0, dk), std::ceil_div(last - k0, dk)); !result)
    return result;

  for (var i = (first - k0) / dk, var k = k0 + i * dk; i < table.len && k < last; i += 1, k += dk)
  {
    var block2 = blk::fetch(dev, cast<u64>(table[i]) << block_shift);

    if (block2.wait(); !block2)
      return cast(block2.result);

    var table2 = std::mutable_span(cast<u32 mut *>(block2.ptr(cast<u64>(table[i]) << block_shift)), 1 << (block_shift - 2));

    if (var result = this.alloc_double_indirect(dev, &mut table2, k, dk >> (block_shift - 2), block_shift, std::max(first, k), std::min(last, k + dk)); !result)
      return result;

    for (var j = std::ceil_div(last - k, dk >> (block_shift - 2)); j < table2.len; ++j)
      table2[j] = 0;

    block2.commit(table2.data, 1 << block_shift);
  }

  return ok;
}

pub fn grow(volume mut &this, vfs::node_ptr &dev, ext2_inode mut *inode, u64 first, u64 last) -> vfs::result
{
  let k0 = EXT2_DIRECT_BLOCKS;
  let k1 = k0 + this.blocksize / sizeof<u32>;
  let k2 = k1 + std::pow(this.blocksize / sizeof<u32>, 2);
  let k3 = k2 + std::pow(this.blocksize / sizeof<u32>, 3);

  var n = cast<usize>(first);
  var last = cast<usize>(last);

  var table = std::mutable_span(inode.i_contents.data, inode.i_contents.len);

  if (n < k0)
  {
    if (var result = this.alloc(dev, &mut table, n, std::min(last, k0)); !result)
      return result;
  }

  if (k0 < last && n < k1)
  {
    if (var result = this.alloc_indirect(dev, &mut table[EXT2_DIRECT_BLOCKS .. EXT2_DIRECT_BLOCKS + 1], k0, k1 - k0, this.block_shift, std::max(n, k0), std::min(last, k1)); !result)
      return result;
  }

  if (k1 < last && n < k2)
  {
    if (var result = this.alloc_double_indirect(dev, &mut table[EXT2_DIRECT_BLOCKS + 1 .. EXT2_DIRECT_BLOCKS + 2], k1, k2 - k1, this.block_shift, std::max(n, k1), std::min(last, k2)); !result)
      return result;
  }

  if (k2 < last && n < k3)
  {
    if (var result = this.alloc_triple_indirect(dev, &mut table[EXT2_DIRECT_BLOCKS + 2 .. EXT2_DIRECT_BLOCKS + 3], k2, k3 - k2, this.block_shift, std::max(n, k2), std::min(last, k3)); !result)
      return result;
  }

  inode.i_blocks = inode_block_usage(&this.superblock, cast(last));

  return ok;
}

struct entry_result
{
  ext2_dir_entry mut *ptr;
  blk::block_ptr block;
  vfs::result result;

  entry_result(vfs::result result)
    : result(result)
  {
  }

  pub fn len(this&) -> usize
  {
    return cast<usize>(this.ptr.rec_len);
  }

  pub fn set_type(this mut &, ext2_ftype type) -> void
  {
    this.ptr.file_type = cast(type);
  }

  pub fn set_name(this mut &, std::string_view name) -> void
  {
    std::memcpy(this.ptr.file_name.data, name.data, name.len);

    this.ptr.name_len = cast(name.len);
  }

  pub fn commit(this mut &, void *data, usize len) -> void
  {
    this.block.commit(data, len);
  }

  entry_result() = default;
  entry_result(entry_result&) = default;
  fn =(entry_result mut &, entry_result&) -> entry_result mut & = default;
  ~entry_result() = default;
}

pub fn find(volume &this, vfs::node_ptr &dev, ext2_inode mut *dir, std::string_view name) -> entry_result
{
  for (var position = 0; position < dir.size; )
  {
    var block = this.fetch_block(dev, dir.i_contents, position);

    if (!block.result)
      return block.result;

    for (var entry = cast<ext2_dir_entry mut *>(block.ptr); entry < cast<ext2_dir_entry*>(block.ptr + block.length); )
    {
      if (entry.rec_len == 0)
        break;

      if (entry.inode != 0 && entry.name == name)
      {
        var data = entry_result();

        data.ptr = entry;
        data.block = &move block.block;

        return data;
      }

      entry = cast<ext2_dir_entry mut *>(cast<uintptr>(entry) + cast<usize>(entry.rec_len));
    }

    position += cast(block.length);
  }

  return vfs::result::not_found;
}

fn dir_not_empty(volume &this, vfs::node_ptr &dev, ext2_inode mut *dir) -> bool
{
  for (var position = 0; position < dir.size; )
  {
    var block = this.fetch_block(dev, dir.i_contents, position);

    if (!block.result)
      break;

    for (var entry = cast<ext2_dir_entry mut *>(block.ptr); entry < cast<ext2_dir_entry*>(block.ptr + block.length); )
    {
      if (entry.rec_len == 0)
        break;

      if (entry.inode != 0 && entry.name != "." && entry.name != "..")
        return true;

      entry = cast<ext2_dir_entry mut *>(cast<uintptr>(entry) + cast<usize>(entry.rec_len));
    }

    position += cast(block.length);
  }

  return false;
}

fn allocate_dir_entry(volume mut &this, vfs::node_ptr &dev, ext2_inode mut *dir, u16 required_len) -> entry_result
{
  for (var position = 0;; )
  {
    if (position >= dir.size)
    {
      var block_shift = this.block_shift;

      if (var result = this.grow(dev, dir, dir.size >> block_shift, dir.size >> block_shift + 1); !result)
        return result;

      var block = this.fetch_block(dev, dir.i_contents, position);

      if (!block.result)
        return block.result;

      cast<ext2_dir_entry mut *>(block.ptr).inode = 0;
      cast<ext2_dir_entry mut *>(block.ptr).rec_len = (1 << block_shift);

      block.commit(block.ptr, sizeof<ext2_dir_entry>);

      dir.size = dir.size + (1 << block_shift);
    }

    var block = this.fetch_block(dev, dir.i_contents, position);

    if (!block.result)
      return block.result;

    for (var entry = cast<ext2_dir_entry mut *>(block.ptr); entry < cast<ext2_dir_entry*>(block.ptr + block.length); )
    {
      if (entry.rec_len == 0)
        break;

      if (entry.inode != 0 && entry.rec_len >= dentry_required_len(entry.name_len) + required_len)
      {
        var remaining = entry.rec_len - dentry_required_len(entry.name_len);

        entry.rec_len -= remaining;

        block.commit(entry, cast<usize>(entry.rec_len));

        entry = cast<ext2_dir_entry mut *>(cast<uintptr>(entry) + cast<usize>(entry.rec_len));

        entry.inode = 0;
        entry.rec_len = remaining;
      }

      if (entry.inode == 0 && entry.rec_len >= required_len)
      {
        var data = entry_result();

        data.ptr = entry;
        data.block = &move block.block;

        return data;
      }

      entry = cast<ext2_dir_entry mut *>(cast<uintptr>(entry) + cast<usize>(entry.rec_len));
    }

    position += cast(block.length);
  }
}

pub fn create(volume mut &this, vfs::node_ptr &dev, ext2_inode mut *dir, std::string_view name, u32 uid, u32 gid, u16 mode) -> entry_result
{
  var entry = this.allocate_dir_entry(dev, dir, dentry_required_len(cast(name.len)));

  if (!entry.result)
    return entry.result;

  entry.set_name(name);
  entry.set_type(ext2_ftype::regular);

  var ino = 0;
  if (var result = this.allocate_inode(dev, &mut ino, EXT2_IFREG); !result)
    return result;

  var inode = this.fetch_inode(dev, ino);

  if (!inode.result)
    return inode.result;

  std::memset(inode.ptr, 0, sizeof<ext2_inode>);

  inode.ptr.uid = uid;
  inode.ptr.gid = gid;
  inode.ptr.i_mode = EXT2_IFREG | cast(mode & 0xfff);
  inode.ptr.i_ctime = now();
  inode.ptr.i_atime = inode.ptr.i_ctime;
  inode.ptr.i_mtime = inode.ptr.i_ctime;
  inode.ptr.i_links = 1;

  inode.commit(inode.ptr, sizeof<ext2_inode>);

  entry.ptr.inode = ino;

  entry.commit(entry.ptr, entry.len);

  return entry;
}

pub fn symlink(volume mut &this, vfs::node_ptr &dev, ext2_inode mut *dir, std::string_view name, std::string_view target, u32 uid, u32 gid, u16 mode) -> entry_result
{
  var entry = this.allocate_dir_entry(dev, dir, dentry_required_len(cast(name.len)));

  if (!entry.result)
    return entry.result;

  entry.set_name(name);
  entry.set_type(ext2_ftype::symlink);

  var ino = 0;
  if (var result = this.allocate_inode(dev, &mut ino, EXT2_IFLNK); !result)
    return result;

  var inode = this.fetch_inode(dev, ino);

  if (!inode.result)
    return inode.result;

  std::memset(inode.ptr, 0, sizeof<ext2_inode>);

  inode.ptr.uid = uid;
  inode.ptr.gid = gid;
  inode.ptr.i_mode = EXT2_IFLNK | cast(mode & 0xfff);
  inode.ptr.i_ctime = now();
  inode.ptr.i_atime = inode.ptr.i_ctime;
  inode.ptr.i_mtime = inode.ptr.i_ctime;
  inode.ptr.i_links = 1;

  if (target.len < EXT2_SHORT_SYMLINK_LENGTH)
  {
    std::memcpy(inode.ptr.i_contents.data, target.data, target.len);
  }
  else
  {
    if (var result = this.grow(dev, inode.ptr, 0, cast(std::ceil_div(target.len, this.blocksize))); !result)
    {
      this.recover(dev, inode.ptr, 0);
      this.deallocate_inode(dev, ino, EXT2_IFLNK);

      return result;
    }

    for (var position = 0; position < target.len; )
    {
      var block = this.fetch_block(dev, inode.ptr.i_contents, cast(position));

      if (!block.result)
        return block.result;

      var bytes = std::min(block.length, target.len - position);

      std::memcpy(block.ptr, target.data + position, bytes);

      block.commit(block.ptr, bytes);

      position += bytes;
    }
  }

  inode.ptr.size = cast(target.len);

  inode.commit(inode.ptr, sizeof<ext2_inode>);

  entry.ptr.inode = ino;

  entry.commit(entry.ptr, entry.len);

  return entry;
}

pub fn mkdir(volume mut &this, vfs::node_ptr &dev, ext2_inode mut *dir, std::string_view name, u32 uid, u32 gid, u16 mode) -> entry_result
{
  var entry = this.allocate_dir_entry(dev, dir, dentry_required_len(cast(name.len)));

  if (!entry.result)
    return entry.result;

  entry.set_name(name);
  entry.set_type(ext2_ftype::regular);

  var ino = 0;
  if (var result = this.allocate_inode(dev, &mut ino, EXT2_IFDIR); !result)
    return result;

  var inode = this.fetch_inode(dev, ino);

  if (!inode.result)
    return inode.result;

  std::memset(inode.ptr, 0, sizeof<ext2_inode>);

  inode.ptr.uid = uid;
  inode.ptr.gid = gid;
  inode.ptr.i_mode = EXT2_IFDIR | cast(mode & 0xfff);
  inode.ptr.i_ctime = now();
  inode.ptr.i_atime = inode.ptr.i_ctime;
  inode.ptr.i_mtime = inode.ptr.i_ctime;
  inode.ptr.i_links = 1;

  if (var result = this.grow(dev, inode.ptr, 0, 1); !result)
  {
    this.recover(dev, inode.ptr, 0);
    this.deallocate_inode(dev, ino, EXT2_IFDIR);

    return result;
  }

  var block = this.fetch_block(dev, inode.ptr.i_contents, 0);

  if (!block.result)
    return block.result;

  var parent = this.find(dev, dir, std::string_view("."));

  if (!parent.result)
    return parent.result;

  var dotentry = cast<ext2_dir_entry mut *>(block.ptr);

  dotentry.inode = ino;
  dotentry.type = ext2_ftype::directory;
  dotentry.file_name[0] = cast('.');
  dotentry.name_len = 1;
  dotentry.rec_len = 12;

  inode.ptr.i_links += 1;

  var dotdotentry = cast<ext2_dir_entry mut *>(block.ptr + 12);

  dotdotentry.inode = parent.ptr.inode;
  dotdotentry.type = ext2_ftype::directory;
  dotdotentry.file_name[0] = cast('.');
  dotdotentry.file_name[1] = cast('.');
  dotdotentry.name_len = 2;
  dotdotentry.rec_len = cast(block.length) - 12;

  dir.i_links += 1;

  block.commit(block.ptr, 24);

  inode.ptr.size = cast(block.length);

  inode.commit(inode.ptr, sizeof<ext2_inode>);

  entry.ptr.inode = ino;

  entry.commit(entry.ptr, entry.len);

  return entry;
}

pub fn rename(volume mut &this, vfs::node_ptr &dev, ext2_inode mut *dir, std::string_view oldname, std::string_view newname) -> vfs::result
{
  var entry = this.find(dev, dir, oldname);

  if (!entry.result)
    return entry.result;

  var required_len = dentry_required_len(cast(newname.len));

  if (entry.ptr.rec_len < required_len)
  {
    var newentry = this.allocate_dir_entry(dev, dir, required_len);

    if (!newentry.result)
      return newentry.result;

    newentry.ptr.inode = entry.ptr.inode;
    newentry.ptr.file_type = entry.ptr.file_type;

    entry.ptr.inode = 0;
    entry.commit(entry.ptr, entry.len);

    entry = newentry;
  }

  entry.set_name(newname);

  entry.commit(entry.ptr, entry.len);

  return ok;
}

pub fn rename(volume mut &this, vfs::node_ptr &dev, ext2_inode mut *olddir, std::string_view oldname, ext2_inode mut *newdir, std::string_view newname) -> vfs::result
{
  var oldentry = this.find(dev, olddir, oldname);

  if (!oldentry.result)
    return oldentry.result;

  var newentry = this.allocate_dir_entry(dev, newdir, dentry_required_len(cast(newname.len)));

  if (!newentry.result)
    return newentry.result;

  newentry.ptr.inode = oldentry.ptr.inode;
  newentry.ptr.file_type = oldentry.ptr.file_type;
  newentry.set_name(newname);

  oldentry.ptr.inode = 0;
  oldentry.commit(oldentry.ptr, oldentry.len);

  newentry.commit(newentry.ptr, newentry.len);

  return ok;
}

pub fn unlink(volume mut &this, vfs::node_ptr &dev, ext2_inode mut *dir, ext2_dir_entry mut *entry) -> vfs::result
{
  var inode = this.fetch_inode(dev, entry.inode);

  if (!inode.result)
    return inode.result;

  if (inode.ptr.i_links == 0)
    return argument_out_of_domain;

  if (inode.ptr.isdir && this.dir_not_empty(dev, inode.ptr))
    return directory_not_empty;

  inode.ptr.i_links -= 1;

  if ((inode.ptr.isdir && inode.ptr.i_links == 1) || inode.ptr.i_links == 0)
  {
    inode.ptr.i_links = 0;

    if (inode.ptr.isdir)
      dir.i_links -= 1;
  }

  inode.commit(inode.ptr, sizeof<ext2_inode>);

  entry.inode = 0;

  return cast(inode.ptr.i_links);
}

pub fn delete(volume mut &this, vfs::node_ptr &dev, ext2_ino_t ino) -> vfs::result
{
  var inode = this.fetch_inode(dev, ino);

  if (!inode.result)
    return inode.result;

  if (var result = this.recover(dev, inode.ptr, 0); !result)
    return result;

  inode.ptr.size = 0;
  inode.ptr.i_dtime = now();

  inode.commit(inode.ptr, sizeof<ext2_inode>);

  this.deallocate_inode(dev, ino, inode.ptr.mode);

  return ok;
}

//
// console
//

import std.stdio;
import io;
import dev;
import chr.chrdev;
import vm : physrange;
import vfs;
import support.rc : Rc;

pub struct console : pub chr::chrdev
{
  pub console()
    : super(&impl this)
  {
    std::print("console inited");
  }

  pub fn query(this &, chr::query query, std::string mut &result) override -> chr::result
  {
    switch (query)
    {
      case device_path:
        result = "console";
    }

    return ok;
  }

  pub fn open(this mut &, vfs::fd mut &fd, u64 flags, u32 mode) override -> chr::result
  {
    return ok;
  }

  pub fn ioctl(this mut &, u32 op, vm::iovec &buffer) override -> chr::result
  {
    return not_supported;
  }

  pub fn poll(this mut &, Rc<io::iocb> mut &readable, Rc<io::iocb> mut &writeable) override -> chr::result
  {
    return not_supported;
  }

  pub fn read(this mut &, vm::iovec &buffer, usize offset, usize length) override -> chr::result
  {
    return not_supported;
  }

  pub fn write(this mut &, vm::iovec &buffer, usize offset, usize length) override -> chr::result
  {
    var fout = std::stdout.lock();

    buffer.foreach_region_in(offset, length, |region| {
      fout.puts(std::string_view(cast(region.addr.ptr), region.size));
    });

    return cast(length);
  }

  pub fn mmap(this mut &, vm::virtrange range, u64 offset, vm::protection prot, vm::usage use) override -> chr::result
  {
    return not_supported;
  }

  pub ~console() = default;
}

extern fn fd_writev(uintptr fd, std::ciovec *iovs, usize n) -> std::fd_result
{
  extern fn dbgln(uintptr fd, std::ciovec *iovs, usize n) -> std::fd_result;

  //import kprint;
  //kprint::kprintf("{}", std::string_view(iovs.data, iovs.len));

  return dbgln(1, iovs, n);
}

pub fn initialise() -> void
{
  var dev = chr::chrdev::create<console>();

  dev::register(dev::dev_t(), dev);
}

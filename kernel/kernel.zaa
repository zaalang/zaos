//
// kernel entry
//

import std.stdio;
import std.atomic;
import std.string;
import cpu;
import sys;
import heap;
import vm;
import vfs;
import scheduler;
import io;
import ioapic;
import blk;
import pty;
import video;
import console;
import thread as _ : thread, spawn_undertaker;
import process as _ : process, create_kernel_process;
import vm.reaper as _ : spawn_reaper;
import platform : BootInfo;
import support.rc : Rc;
import syscalls;
import ioring;
import cfg.acpi;

fn bootstrap_filesystem() -> void
{
  import ext2fs;

  var rootdev = Rc<blk::blkdev>();
  var rootuuid = sys::cmdline("root");

  blk::enumerate(|id, dev| [rootdev, rootuuid] {
    if (var uuid = dev.query(blk::query::device_uuid); uuid == rootuuid)
      rootdev = dev;
  });

  if (!rootdev)
  {
    std::print("unable to determine root file system, detected devices:");

    blk::enumerate(|id, dev| {
      if (var uuid = dev.query(blk::query::device_uuid); uuid != "")
        std::print("  ", uuid);
    });

    std::panic("no system device");
  }

  var ctx = vfs::file_system_context();
  ctx.source = std::string("/dev/") + rootdev.query(blk::query::device_path) + "/" + rootuuid;

  vfs::mkdir(vfs::root, "zaos", 0, 0, 0o755);
  vfs::mount(vfs::root, "zaos", ext2fs::create(ctx));
}

fn launch_init() -> void
{
  var srv = sys::cmdline("init", default: "/zaos/srv/coco");

  var init = create_process(process::current, vfs::basename(srv));

  process_push_cmdline(init, [ srv ]);

  init.new_fd(1, vfs::file_descriptor::create(vfs::lookup(colonel, vfs::root, "/dev/console")));
  init.new_fd(4, vfs::file_descriptor::create(vfs::root));

  process_push_ioring(init, 256);

  process_start(init, thread::priority::normal);
}

fn kernel_main(void*) -> void
{
  spawn_reaper();
  spawn_undertaker();

  blk::initialise();
  vfs::initialise();
  ioring::initialise();
  ioapic::initialise();
  pty::initialise();
  video::initialise();
  console::initialise();
  cfg::initialise();

  cfg::coldplug();

  bootstrap_filesystem();

  launch_init();
}

extern fn kernel_auxap(BootInfo &bootinfo, int cpu) -> void
{
  cpu::bootstrap(bootinfo, cpu);

  platform::finalise_boot(bootinfo, cpu);

  scheduler::start();
}

extern fn kernel_start(BootInfo &bootinfo, int cpu) -> void
{
  cpu::bootstrap(bootinfo, cpu);

  sys::bootstrap(bootinfo);
  heap::bootstrap(bootinfo);
  vm::bootstrap(bootinfo);

  platform::finalise_boot(bootinfo, cpu);

  create_kernel_process(&cast<(void mut *) -> void>(kernel_main), null);

  scheduler::start();
}

//
// cpu
//

import std.atomic;
import sys;
import scheduler : run_queue;
import thread as _ : thread;
import platform;

pub struct cpu_logical_core
{
  pub int id;
  pub thread mut *current_thread;

  pub u64 cyc2ns;
  pub u64 clockspeed;

  pub run_queue runqueue;

  pub usize process_counter_user_allocated_pages;

  cpu_logical_core() = default;
  cpu_logical_core(#cpu_logical_core&) = default;
  ~cpu_logical_core() = default;
}

fn self() -> cpu_logical_core mut &
{
  static thread_local self = #cpu_logical_core();

  return &self;
}

pub struct irq_lock
{
  bool state;

  pub fn lock(this mut &) -> void
  {
    this.state = platform::disable_interrupts();
  }

  pub fn unlock(this mut &) -> void
  {
    platform::restore_interrupts(this.state);
  }

  irq_lock() = default;
  irq_lock(#irq_lock&) = default;
  ~irq_lock() = default;
}

pub fn irqlock() -> irq_lock
{
  return irq_lock();
}

pub fn interrupts_disabled() -> bool
{
  return platform::interrupts_disabled;
}

pub fn current() -> int
{
  return self.id;
}

#[noinline]
pub fn runqueue() -> run_queue mut &
{
  std::assert(platform::interrupts_disabled);

  return &self.runqueue;
}

pub fn runqueue_inline() -> run_queue mut &
{
  std::assert(platform::interrupts_disabled);

  return &self.runqueue;
}

#[noinline]
pub fn current_thread() -> thread mut *
{
  std::assert(platform::interrupts_disabled);

  return self.current_thread;
}

pub fn current_thread_inline() -> thread mut *
{
  std::assert(platform::interrupts_disabled);

  return self.current_thread;
}

pub fn switch_current_thread(thread mut *thread) -> void
{
  std::assert(platform::interrupts_disabled);

  self.current_thread = thread;
}

pub fn process_counter_user_allocated_pages()
{
  std::assert(platform::interrupts_disabled);

  return &self.process_counter_user_allocated_pages;
}

pub fn process_counter_user_allocated_pages_inc()
{
  //var irqs = platform::disable_interrupts();
  //self.process_counter_user_allocated_pages += 1;
  //platform::restore_interrupts(irqs);

  __asm("inc qword ptr fs:$0@tpoff + $1", "s,n", &self, offsetof(cpu_logical_core::process_counter_user_allocated_pages));
}

pub fn tsc() -> u64
{
  return platform::rdtsc();
}

pub fn cyc2ns() -> u64
{
  return self.cyc2ns;
}

pub fn clockspeed() -> u64
{
  return self.clockspeed;
}

pub fn system_time() -> u64
{
  return std::mul_with_carry(tsc, self.cyc2ns).1;
}

pub fn bootstrap(platform::BootInfo &bootinfo, int cpu) -> void
{
  self.id = cpu;
  self.clockspeed = bootinfo.early_tsc_frequency;
  self.cyc2ns = ((1_000_000_000 << 32) / self.clockspeed) << 32;

  sys::add_cpu(cpu, &self);
}

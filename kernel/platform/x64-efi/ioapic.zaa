//
// x86 ioapic
//

import std.stdio;
import std.atomic;
import bootinfo : BootInfo;
import cpu;

const IO_INTERRUPT_BASE = 0x20;

struct interrupt_controller
{
  uintptr ioapic;
  u32 interrupt_base;
  u32 interrupt_count;

  u64[4] allocated;

  fn instance() -> interrupt_controller mut &
  {
    static instance = #interrupt_controller();

    return &instance;
  }

  interrupt_controller() = default;
  interrupt_controller(#interrupt_controller&) = default;
  ~interrupt_controller() = default;
}

fn ic() -> interrupt_controller mut &
{
  return &interrupt_controller::instance;
}

fn ioapic_read(uintptr base, u32 register) -> u32
{
  std::volatile_store(cast<u32 mut *>(base), register);

  return std::volatile_load(cast<u32*>(base + 0x10));
}

fn ioapic_write(uintptr base, u32 register, u32 value) -> void
{
  std::volatile_store(cast<u32 mut *>(base ), register);

  std::volatile_store(cast<u32 mut *>(base + 0x10), value);
}

fn disable_legacy_pic() -> void
{
  cpu::out8(0x20, 0x11); // ICW1
  cpu::out8(0xa0, 0x11);
  cpu::out8(0x21, 0xe0); // ICW2
  cpu::out8(0xa1, 0xe8);
  cpu::out8(0x21, 0x4);  // ICW3
  cpu::out8(0xa1, 0x2);
  cpu::out8(0x21, 0x1);  // ICW4
  cpu::out8(0xa1, 0x1);
  cpu::out8(0x21, 0xff); // mask interrupts
  cpu::out8(0xa1, 0xff);
}

pub fn setup(BootInfo &bootinfo, int cpu) -> void
{
  if (cpu != 0)
    return;

  disable_legacy_pic();

  ic.ioapic = cast<uintptr>(bootinfo.ioapic_address);
  ic.interrupt_base = bootinfo.ioapic_interrupt_base;
  ic.interrupt_count = (ioapic_read(ic.ioapic, 0x1) >> 16) & 0xff + 1;

  for (var irq = 0; irq < ic.interrupt_count; ++irq)
  {
    var vector = ic.interrupt_base + irq;

    ioapic_write(ic.ioapic, 0x10 + 2*irq, (vector + IO_INTERRUPT_BASE) | 0x10900);
    ioapic_write(ic.ioapic, 0x10 + 2*irq + 1, 0xff000000);

    ic.allocated[cast<usize>(vector) >> 6] |= 1 << (vector & 0x3f);
  }

  std::print("ioapic: interrupts ", ic.interrupt_base, " through ", ic.interrupt_base + ic.interrupt_count - 1);
}

extern fn io_vector_id(u8 irq) -> u8
{
  return irq + IO_INTERRUPT_BASE;
}

extern fn allocate_io_vectors(usize count) -> ( u8, u8 )
{
  for (var j = 0; j < 230 - count; ++j)
  {
    if (ic.allocated[j >> 6] & (1 << (j & 0x3f)) == 0)
    {
      var i = j;

      for (j += 1; j < i + count; ++j)
      {
        if (ic.allocated[j >> 6] & (1 << (j & 0x3f)) != 0)
          break;
      }

      if (j - i == count)
      {
        for (var k = i; k != j; ++k)
        {
          ic.allocated[k >> 6] |= 1 << (k & 0x3f);
        }

        return (cast<u8>(i), cast<u8>(j));
      }
    }
  }

  return (0, 0);
}

extern fn enable_io_vector(u8 irq) -> void
{
  var ioapic = ic.ioapic + PHYSICAL_BASE;

  var entry = ioapic_read(ioapic, 0x10 + 2*cast<u32>(irq));

  ioapic_write(ioapic, 0x10 + 2*cast<u32>(irq), entry & ~0x10000);
}

extern fn disable_io_vector(u8 irq) -> void
{
  var ioapic = ic.ioapic + PHYSICAL_BASE;

  var entry = ioapic_read(ioapic, 0x10 + 2*cast<u32>(irq));

  ioapic_write(ioapic, 0x10 + 2*cast<u32>(irq), entry | 0x10000);
}

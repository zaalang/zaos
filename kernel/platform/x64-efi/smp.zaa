//
// x86 smp
//

import std.memory;
import std.atomic;
import acpi;
import bootinfo : BootInfo;
import cpu;

pub fn initialise(BootInfo mut &bootinfo)
{
  const code_base = 0x8000;
  const stack_base = 0x10000;
  const stack_size = 64; // bytes per cpu

  var trampoline_base = extern(_trampoline);
  var trampoline_size = extern(trampoline_) - trampoline_base;

  std::memcpy(cast<void mut *>(code_base), cast<void*>(trampoline_base), trampoline_size);

  std::memcpy(cast<void mut *>(code_base + 0x10), &bootinfo.gdt, sizeof(bootinfo.gdt));
  std::memcpy(cast<void mut *>(code_base + 0x18), &bootinfo.pml4, sizeof(bootinfo.pml4));

  if (var apic_base = cpu::rdmsr(cpu::msr_index::apic_base); apic_base & 0x400 == 0)
    cpu::wrmsr(cpu::msr_index::apic_base, apic_base | 0x400); // x2apic enable

  for (var cpu = 1; cpu < bootinfo.cpu_count; ++cpu)
  {
    var apic = cast<uintptr>(bootinfo.apic_address);
    var apicid = cast<u32>(bootinfo.apic_ids[cpu]);

    var stack = cast<uintptr mut *>(stack_base - cast<usize>(apicid) * stack_size);

    *(stack - 1) = cast<uintptr>(cpu);
    *(stack - 2) = cast<uintptr>(&bootinfo);

    // clear apic errors
    cpu::wrmsr(cpu::msr_index::apic_esr, 0);

    // trigger INIT IPI
    cpu::wrmsr(cpu::msr_index::apic_isr, cast<u64>(apicid) << 32 | 0x04500);

    // deassert INIT IPI
    cpu::wrmsr(cpu::msr_index::apic_isr, cast<u64>(apicid) << 32 | 0x00500);

    // 10 millisecond pause
    cpu::spin(bootinfo.early_tsc_frequency / 100 + 1);

    // trigger STARTUP IPI (twice)
    for (var j = 0; j < 2; j++)
    {
      // clear apic errors
      cpu::wrmsr(cpu::msr_index::apic_esr, 0);

      // trigger STARTUP IPI for 0800:0000
      cpu::wrmsr(cpu::msr_index::apic_isr, cast<u64>(apicid) << 32 | 0x0c608);

      // wait 200 usec
      cpu::spin(bootinfo.early_tsc_frequency / 5000 + 1);
    }
  }
}

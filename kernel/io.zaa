//
// io
//

import std.stdio;
import acpi;
import sys;
import cpu;
import platform;
import scheduler;
import ioring;
import ioring.poll;
import mutex as _ : mutex;
import thread as _ : thread;
import slab : slab_allocator;
import waitqueue as _ : wait_queue;
import support.rc : Rc;

struct handler
{
  fn (*handler_routine)(void mut *) -> void;
  void mut *handler_argument;

  handler mut *next;

  handler() = default;
  ~handler() = default;
}

struct vector
{
  std::spin_lock lock;

  handler mut *head;

  vector() = default;
  vector(#vector&) = default;
  ~vector() = default;
}

struct interrupt_manager
{
  mutex lock;

  vector[256] vectors;

  fn instance()
  {
    static instance = #interrupt_manager();

    return &instance;
  }

  interrupt_manager() = default;
  interrupt_manager(#interrupt_manager&) = default;
  ~interrupt_manager() = default;
}

fn intman()
{
  return &interrupt_manager::instance;
}

extern fn enable_io_vector(u8 irq) -> void;
extern fn disable_io_vector(u8 irq) -> void;
extern fn allocate_io_vectors(usize count) -> (u8, u8);

pub fn allocate_vectors(usize count) -> (u8, u8)
{
  var guard = std::lock_guard(&mut intman.lock);

  return allocate_io_vectors(count);
}

pub fn install_handler(u8 irq, fn (*handler_routine)(void mut *) -> void, void mut *handler_argument) -> void
{
  var handler = std::allocator::new<handler>();

  handler.handler_routine = handler_routine;
  handler.handler_argument = handler_argument;

  var mut &vector = intman.vectors[cast(irq)];

  var guard = std::lock_guard(&mut cpu::irqlock, &mut vector.lock);

  handler.next = std::exchange(&mut vector.head, handler);

  if (!vector.head.next)
  {
    enable_io_vector(irq);
  }
}

pub fn remove_handler(u8 irq, fn (*handler_routine)(void mut *) -> void, void mut *handler_argument) -> void
{
  var mut &vector = intman.vectors[cast(irq)];

  var guard = std::lock_guard(&mut cpu::irqlock, &mut vector.lock);

  for (var curr = &vector.head; *curr; curr = &curr.next)
  {
    if (curr.handler_routine == handler_routine && curr.handler_argument == handler_argument)
    {
      var handler = std::exchange(&mut *curr, curr.next);

      std::allocator::delete(handler);

      break;
    }
  }

  if (!vector.head)
  {
    disable_io_vector(irq);
  }
}

extern fn io_dispatch(u8 irq) -> void
{
  var mut &vector = intman.vectors[cast(irq)];

  var guard = std::lock_guard(&mut vector.lock);

  for (var handler = vector.head; handler; handler = handler.next)
  {
    handler.handler_routine(handler.handler_argument);
  }
}

pub struct iocb
{
  i32 result;
  i32 outstanding;

  std::spin_lock lock;
  wait_queue waiters;
  std::vector<ioring::pollset mut *> pollsets;

  u8[0] reserved;

  fn allocator()
  {
    static allocator = #slab_allocator<iocb>();

    return &allocator;
  }

  fn create() -> Rc<iocb>
  {
    return allocator.allocate();
  }

  pub fn result(this &) -> i32
  {
    return std::atomic_load(&this.result);
  }

  pub fn ref(this mut &) -> void
  {
    std::atomic_add(&this.refcnt, 1);
  }

  pub fn unref(this mut &) -> void
  {
    if (std::atomic_sub(&this.refcnt, 1) == 1)
      destroy(&this);
  }

  i32 refcnt;

  pub iocb() = default;
  pub ~iocb() = default;
}

fn destroy(iocb mut *cb) -> void
{
  iocb::allocator.free(cb);
}

pub struct response
{
  pub fn bool(this &) -> bool
  {
    return this.result >= 0 && this.outstanding == 0;
  }

  pub fn ready(this &) -> bool
  {
    return this.outstanding <= 0;
  }

  pub fn result(this &) -> i32
  {
    return std::atomic_load(&this.cb.result);
  }

  pub fn outstanding(this &) -> i32
  {
    return std::atomic_load(&this.cb.outstanding);
  }

  pub fn refcnt(this &) -> i32
  {
    return std::atomic_load(&this.cb.refcnt);
  }

  pub Rc<iocb> cb;

  pub response(Rc<iocb> mut &cb)
    : cb(cb)
  {
  }

  pub response(var result = i32(0))
    : cb(iocb::create())
  {
    cb.result = cast(result);
    std::atomic_store(&cb.outstanding, 0);
  }

  pub response(response &&other) = default;
  pub fn =(response mut &lhs, response &&rhs) -> response mut & = default;
  pub ~response() = default;
}

pub fn wait(response mut &rq, bool interruptible = false) -> i32
{
  var guard = std::lock_guard(&mut cpu::irqlock, &mut rq.cb.lock);

  if (std::atomic_load(&rq.cb.outstanding) <= 0)
    return 0;

  return rq.cb.waiters.wait(&mut rq.cb.lock, interruptible);
}

pub fn wait_until(response mut &rq, u64 abstime, bool interruptible = false) -> i32
{
  var guard = std::lock_guard(&mut cpu::irqlock, &mut rq.cb.lock);

  if (std::atomic_load(&rq.cb.outstanding) <= 0)
    return 0;

  return rq.cb.waiters.wait_until(&mut rq.cb.lock, abstime, interruptible);
}

pub fn add_notify(Rc<iocb> mut &cb, ioring::pollset mut *pollset) -> void
{
  for (;;)
  {
    var tmp = std::vector<ioring::pollset mut *>::with_size(cb.pollsets.len + 1);

    {
      var guard = std::lock_guard(&mut cpu::irqlock, &mut cb.lock);

      if (tmp.len != cb.pollsets.len + 1)
        continue;

      std::memcpy(tmp.data, cb.pollsets.data, cb.pollsets.len * sizeof<ioring::pollset mut *>);

      std::swap(&mut cb.pollsets, &mut tmp);

      cb.pollsets.back = pollset;

      break;
    }
  }
}

pub fn remove_notify(Rc<iocb> mut &cb, ioring::pollset *pollset) -> void
{
  var tmp = std::vector<ioring::pollset mut *>();

  {
    var guard = std::lock_guard(&mut cpu::irqlock, &mut cb.lock);

    cb.pollsets.erase(pollset);

    if (cb.pollsets.empty)
      std::swap(&mut cb.pollsets, &mut tmp);
  }
}

pub fn initiate(Rc<iocb> mut &cb, usize count) -> void
{
  std::atomic_add(&cb.outstanding, cast(count));
}

pub fn complete(Rc<iocb> mut &cb, var result) -> void
{
  for (;;)
  {
    var current = std::volatile_load(&cb.result);

    if (current < 0)
      break;

    if (std::atomic_cmpxchg_weak(&cb.result, current, result < cast(0) ? cast(result) : current + cast(result)))
      break;
  }

  if (std::atomic_sub(&cb.outstanding, 1) == 1)
  {
    var guard = std::lock_guard(&mut cpu::irqlock, &mut cb.lock);

    for (var mut &pollset : cb.pollsets)
      ioring::trigger(pollset);

    ioring::workman.trigger();

    cb.waiters.wake_all();
  }
}

pub fn cancel(Rc<iocb> mut &cb, var result = i32(-125)) -> void
{
  std::atomic_store(&cb.result, cast(result));
}

pub fn reset(Rc<iocb> mut &cb, var result = i32(0)) -> void
{
  std::atomic_store(&cb.result, cast(result));
  std::atomic_store(&cb.outstanding, 0);
}

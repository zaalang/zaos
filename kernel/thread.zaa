//
// thread
//

import std.stdio;
import std.atomic;
import std.flat_hash_map;
import vm;
import cpu;
import sys;
import io;
import platform;
import process as _ : process;
import semaphore as _ : semaphore;
import slab : slab_allocator, slab_cache;
import mutex as _ : shared_mutex;
import scheduler : run_queue;
import support.rc : Rc;

pub struct thread
{
  pub using id = i32;

  pub enum state : int
  {
    invalid,
    ready,
    running,
    waiting,
    buried,
    dead,
  }

  pub enum priority : int
  {
    idle = 0,
    lowest = 1,
    low = 5,
    normal = 10,
    display = 15,
    high = 20,
    max = 50,

    pub fn level(this &) -> usize { return cast<usize>(this); }
    pub fn +(this &, int offset) -> priority { return cast<priority>(cast<int>(this) + offset); }
    pub fn -(this &, int offset) -> priority { return cast<priority>(cast<int>(this) - offset); }
  }

  pub id id;
  pub int cpu;
  pub state state;
  pub priority priority;

  pub u64 cpu_time;
  pub u64 tick_start_time;
  pub u64 quantum_used_time;

  pub run_queue mut *pinned;

  pub thread mut *next;
  pub thread mut *prev;

  pub fn (*start_routine)(void mut *) -> void;
  pub void mut *start_argument;

  pub vm::virtaddr ip;
  pub vm::virtaddr sp;

  pub i32 wait_status;
  pub u64 wait_abstime;
  pub thread mut *wakenext;

  pub Rc<process> process;
  pub thread mut *sibling;

  pub io::response rval;

  u8[72] reserved;

  pub platform::task task;

  pub fn current() -> thread mut *
  {
    return cast<thread mut *>(cast<uintptr>(platform::task_self()) - offsetof(thread::task));
  }

  pub fn find(thread::id id) -> Rc<thread>
  {
    var guard = std::lock_shared_guard(&mut threadman.lock);

    var j = threadman.threads.find(id);

    if (j == threadman.threads.end)
      return null;

    var thread = threadman.threads[j].value;

    for (;;)
    {
      var refcnt = std::volatile_load(&thread.refcnt);

      if (refcnt == 0)
        return null;

      if (std::atomic_cmpxchg_weak(&thread.refcnt, refcnt, refcnt + 1))
        break;
    }

    return Rc::adopt(thread);
  }

  fn allocator()
  {
    static allocator = #slab_allocator<thread>();

    return &allocator;
  }

  fn create() -> thread mut *
  {
    return allocator.allocate();
  }

  pub fn is_detached(thread &thread) -> bool
  {
    return thread.task.get(platform::task::flags::detached);
  }

  pub fn detach(thread mut &thread) -> void
  {
    if (thread.task.set(platform::task::flags::detached))
      thread.unref();
  }

  pub fn terminate(thread mut &thread) -> void
  {
    thread.task.set(platform::task::flags::killed);
  }

  #[noreturn]
  pub fn transition(vm::virtaddr entry, uintptr sp) -> void
  {
    platform::task_transition(&mut current.task, entry, sp);
  }

  #[noreturn]
  pub fn exit(i32 rval) -> void
  {
    platform::disable_interrupts();

    var thread = cpu::current_thread;

    io::complete(&mut thread.rval.cb, rval);

    scheduler::bury(&mut threadman.graveyard_doorbell, &mut threadman.graveyard);
  }

  pub fn ref(this mut &) -> void
  {
    std::atomic_add(&this.refcnt, 1);
  }

  pub fn unref(this mut &) -> void
  {
    if (std::atomic_sub(&this.refcnt, 1) == 1)
      destroy(&this);
  }

  i32 refcnt;

  pub thread() = default;
  pub ~thread() = default;
}

pub fn fmt(std::OutputStream mut &os, std::fmt_context mut &ctx, thread &thread) throws(std::error) -> void
{
  ctx.written += std::print_to(&mut os, "[process:", thread.process.id, "(", thread.process.name, "),thread:", thread.id, "] ");
}

struct thread_manager
{
  shared_mutex lock;

  thread::id nextid;
  std::flat_hash_map<thread::id, thread mut *> threads;

  thread mut *undertaker;
  thread mut *graveyard;
  semaphore graveyard_doorbell;

  fn instance()
  {
    static instance = #thread_manager();

    return &instance;
  }

  fn threadcache(thread_manager mut &)
  {
    static thread_local cache = #slab_cache<thread>();

    return &cache;
  }

  thread_manager() = default;
  thread_manager(#thread_manager&) = default;
  ~thread_manager() = default;
}

fn threadman()
{
  return &thread_manager::instance;
}

fn get(thread_manager mut &threadman)
{
  var guard = std::lock_guard(&mut cpu::irqlock);

  return threadman.threadcache.get();
}

fn put(thread_manager mut &threadman, thread mut *thread)
{
  var guard = std::lock_guard(&mut cpu::irqlock);

  return threadman.threadcache.put(thread);
}

fn allocate(thread_manager mut &threadman) -> thread mut *
{
  var thread = thread::create();

  var guard = std::lock_guard(&mut threadman.lock);

  for (;;)
  {
    thread.id = ++threadman.nextid;

    if (threadman.nextid == 2_147_483_647)
      threadman.nextid = 0;

    if (!threadman.threads.contains(thread.id))
      break;
  }

  threadman.threads.insert(thread.id, thread);

  return thread;
}

fn dump(thread_manager mut &threadman) -> void
{
  std::print("[thread list]");

  for (var &thread : threadman.threads)
  {
    std::print("  ", thread.key, " ", thread.value.state);
  }
}

pub fn create_zero_task(process mut *process, fn (*start_routine)(void mut *) -> void, void mut *start_argument) -> thread mut *
{
  var thread = thread::create();

  initialise(thread);

  thread.id = ++threadman.nextid;
  thread.start_routine = start_routine;
  thread.start_argument = start_argument;
  thread.process = process;
  thread.process.threadcount += 1;

  threadman.threads.insert(thread.id, thread);

  return thread;
}

pub fn create_thread(process mut *process, fn (*start_routine)(void mut *) -> void, void mut *start_argument) -> thread mut *
{
  var thread = threadman.get();

  if (!thread)
    thread = threadman.allocate();

  initialise(thread);

  thread.start_routine = start_routine;
  thread.start_argument = start_argument;

  process.lock.lock();

  thread.process = process;
  thread.sibling = std::exchange(&mut process.threads, thread);

  process.lock.unlock();

  std::atomic_add(&process.threadcount, 1);

  return thread;
}

fn initialise(thread mut *this) -> void
{
  this.state = thread::state::ready;
  this.priority = thread::priority::idle;
  this.quantum_used_time = 0;
  this.wait_status = 0;
  this.wait_abstime = 0;
  this.pinned = null;
  this.next = null;
  this.prev = null;
  this.cpu_time = 0;
  std::atomic_add(&this.refcnt, 2);

  io::reset(&mut this.rval.cb);
  io::initiate(&mut this.rval.cb, 1);

  platform::task_init(&mut this.task);
}

fn destroy(thread mut *thread) -> void
{
  var process = thread.process;

  //std::print(*thread, "done");

  process.lock.lock();

  var curr = &process.threads;

  while (*curr != thread)
    curr = &curr.sibling;

  *curr = thread.sibling;

  process.lock.unlock();

  thread.sibling = null;
  thread.process = null;
  thread.state = thread::state::dead;

  threadman.put(thread);
}

fn undertaker(void*) -> void
{
  for (;;)
  {
    for (var thread = std::atomic_xchg(&threadman.graveyard, null); thread; )
    {
      var next = thread.next;

      platform::disable_interrupts();

      sys::runqueue(thread.cpu).lock.lock();
      sys::runqueue(thread.cpu).lock.unlock();

      platform::enable_interrupts();

      var process = thread.process;

      if (std::atomic_sub(&process.threadcount, 1) == 1)
      {
        teardown(process);
      }

      thread.unref();

      thread = next;
    }

    threadman.graveyard_doorbell.wait();
  }
}

pub fn spawn_undertaker() -> void
{
  threadman.undertaker = create_thread(process::current, &cast<(void mut *) -> void>(undertaker), null);

  scheduler::enqueue(threadman.undertaker, thread::priority::high);
}

extern fn unhandled_exception(vm::virtaddr addr, platform::exception type, bool user) -> void
{
  std::print(*thread::current, "unhandled exception: ", type, " at ", addr);

  platform::disable_memory_protect();

  var rbp = cast<uintptr*>(__asm("mov $0, rbp", "=r"));

  for (var i = 0; i < 32; ++i)
  {
    if (!rbp)
      break;

    if (var mapping = platform::pagetable.query(vm::virtaddr(rbp)); !mapping.present)
      break;

    std::print("  ", cast<void*>(*(rbp + 1)));

    rbp = cast<uintptr*>(*rbp);
  }

  platform::enable_memory_protect();

  if (!user)
    std::panic("unhandled exception in kernel space");

  process::exit(-5);
}

extern fn terminate() -> void
{
  std::print(*thread::current, "killed by signal");

  thread::exit(-4);
}

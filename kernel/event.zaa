//
// event
//

import std.stdio;
import vm : virtaddr;
import io;
import vfs;
import cpu;
import mutex as _ : mutex;
import process as _ : process;
import support.rc : Rc;

pub struct event
{
  mutex lock;

  u64 value;
  u64 maxvalue;
  io::response readable;
  io::response writeable;

  vfs::node node;

  fn create() -> event mut *
  {
    return std::allocator::new<event>();
  }

  pub fn node(this mut &) -> Rc<vfs::node>
  {
    return &this.node;
  }

  pub event()
  {
    vfs::node::new(&node, vfs::node::type::event, vfs::node_stream_operations());
  }

  pub fn ref(this mut &) -> void
  {
    this.node.ref();
  }

  pub fn unref(this mut &) -> void
  {
    this.node.unref();
  }

  pub ~event() = default;
}

pub fn create_event(process mut *process) -> Rc<event>
{
  return event::create();
}

pub fn setup_event(Rc<event> mut &event, u64 value, u64 maxvalue) -> vfs::result
{
  event.value = value;
  event.maxvalue = maxvalue;

  if (value == 0)
    io::initiate(&mut event.readable.cb, 1);

  if (value == maxvalue)
    io::initiate(&mut event.writeable.cb, 1);

  return ok;
}

pub fn open(vfs::node mut *node, vfs::fd mut &fd, u64 flags, u32 mode) -> vfs::result
{
  return ok;
}

pub fn getattr(vfs::node mut *node, vfs::stat mut &stat, u64 mask) -> vfs::result
{
  return ok;
}

pub fn setattr(vfs::node mut *node, vfs::stat &stat, u64 mask) -> vfs::result
{
  return not_supported;
}

pub fn poll(vfs::node mut *node, Rc<io::iocb> mut &readable, Rc<io::iocb> mut &writeable) -> vfs::result
{
  var mut &event = *cast<event mut *>(cast<uintptr>(node) - offsetof(event::node));

  readable = event.readable.cb;
  writeable = event.writeable.cb;

  return ok;
}

pub fn read(vfs::node mut *node, vm::iovec &buffer, usize offset, usize length) -> vfs::result
{
  var mut &event = *cast<event mut *>(cast<uintptr>(node) - offsetof(event::node));

  var guard = std::lock_guard(&mut event.lock);

  if (event.value == 0)
    return would_block;

  if (var result = vm::memcpy(buffer, offset, &event.value, 8); !result)
    return cast(result);

  event.value -= 1;

  if (event.value == 0)
    io::initiate(&mut event.readable.cb, 1);

  if (event.value == event.maxvalue)
    io::complete(&mut event.writeable.cb, 0);

  return cast(8);
}

pub fn write(vfs::node mut *node, vm::iovec &buffer, usize offset, usize length) -> vfs::result
{
  var mut &event = *cast<event mut *>(cast<uintptr>(node) - offsetof(event::node));

  var guard = std::lock_guard(&mut event.lock);

  var addend = 0;

  if (var result = vm::memcpy(&addend, buffer, offset, 8); !result)
    return cast(result);

  if (addend > event.maxvalue)
    return invalid_argument;

  if (event.value > event.maxvalue - addend)
    return would_block;

  event.value += addend;

  if (event.value == addend)
    io::complete(&mut event.readable.cb, 0);

  if (event.value == event.maxvalue)
    io::initiate(&mut event.writeable.cb, 1);

  return cast(8);
}

fn destroy(vfs::node mut *node) -> void
{
  var event = cast<event mut *>(cast<uintptr>(node) - offsetof(event::node));

  std::allocator::delete(event);
}

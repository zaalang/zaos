//
// process syscalls
//

import std.stdlib;
import vm : virtaddr;
import vfs;
import thread as _ : thread;
import process as _ : process;
import result as _ : result;

enum flags
{
}

struct arg
{
  virtaddr beg;
  virtaddr end;

  fn len(this &) -> usize
  {
    return this.end - this.beg;
  }

  arg() = default;
  arg(arg&) = default;
  ~arg() = default;
}

struct attr
{
  const stdin = 0;
  const stdout = 1;
  const stderr = 2;
  const stdroot = 4;
  const stdcwd = 5;
  const fn dupfd(i32 fd) -> i32 { return fd; }
  const enddup = 255;

  i32 type;
  uintptr value;

  attr() = default;
  attr(attr&) = default;
  ~attr() = default;
}

extern fn sys_get_pid() -> process::id
{
  return process::current.id;
}

extern fn sys_get_uid() -> u32
{
  return 0;
}

extern fn sys_get_euid() -> u32
{
  return 0;
}

extern fn sys_get_gid() -> u32
{
  return 0;
}

extern fn sys_get_egid() -> u32
{
  return 0;
}

extern fn sys_process_create(virtaddr argvbuf, usize argc, virtaddr envpbuf, usize envc, virtaddr attrbuf, usize n, u64 flags) -> result
{
  if (argc < 1)
    return invalid_argument;

  var argv = std::vector<arg>::with_size(argc);

  if (var result = vm::read_process_memory(argvbuf, argv.data, argv.len * sizeof<arg>); !result)
    return result;

  for (var &arg : argv)
  {
    if (arg.end < arg.beg || arg.len > 4096)
      return invalid_argument;
  }

  var arg0 = std::string<N:256>::with_size(argv[0].len);

  if (var result = vm::read_process_memory(argv[0].beg, arg0.data, arg0.len); !result)
    return result;

  var envp = std::vector<arg>::with_size(envc);

  if (var result = vm::read_process_memory(envpbuf, envp.data, envp.len * sizeof<arg>); !result)
    return result;

  for (var &arg : envp)
  {
    if (arg.end < arg.beg || arg.end - arg.beg > 4096)
      return invalid_argument;
  }

  var attrs = std::vector<attr>::with_size(n);

  if (var result = vm::read_process_memory(attrbuf, attrs.data, attrs.len * sizeof<attr>); !result)
    return result;

  var process = create_process(process::current, vfs::basename(arg0));

  for (var &arg : argv)
  {
    var str = std::string<N:256>::with_size(arg.len);

    if (var result = vm::read_process_memory(arg.beg, str.data, str.len); !result)
      return result;

    process_push_cmdline(process, [ std::string_view(str) ]);
  }

  for (var &arg : envp)
  {
    var str = std::string<N:256>::with_size(arg.len);

    if (var result = vm::read_process_memory(arg.beg, str.data, str.len); !result)
      return result;

    process_push_environ(process, [ std::string_view(str) ]);
  }

  for (var &attr : attrs)
  {
    switch (attr.type)
    {
      case 0 ..= attr::enddup:

        var file = process::current.fd(cast(attr.value & 0x7fffffff));

        if (!file)
          return vfs::result::bad_descriptor;

        process.new_fd(attr.type, file);
    }
  }

  process_push_ioring(process, 256);

  return process_start(process, thread::priority::normal);
}

extern fn sys_process_exit(i32 rval) -> void
{
  process::exit(rval);
}

extern fn sys_process_kill(i32 id) -> result
{
  var thread = thread::find(id);

  if (!thread)
    return vm::result::no_such_process;

  var process = thread.process;

  var is_child = false;
  for (var ancestor = process.parent; ancestor; ancestor = ancestor.parent)
    if (ancestor == process::current)
      is_child = true;

  if (!is_child)
    return vm::result::no_such_process;

  process.terminate();

  return 0;
}

//
// sched syscalls
//

import std.stdlib;
import vm : virtaddr;
import io;
import cpu;
import result as _ : result;
import thread as _ : thread;
import process as _ : process;
import scheduler;
import futex;

enum flags
{
  const nohang = 0x1;
}

struct sched_param
{
  int sched_priority;

  sched_param() = default;
  ~sched_param() = default;
}

extern fn sys_wait(i32 id, virtaddr rvalbuf, u64 flags) -> result
{
  var thread = thread::find(id);

  if (!thread)
    return vm::result::no_such_process;

  if (thread.id == thread.process.id && thread.process.parent != process::current)
    return vm::result::no_such_process;

  if (thread.id != thread.process.id && thread.process != process::current)
    return vm::result::no_such_process;

  if (thread == thread::current)
    return vm::result::deadlock_avoided;

  if (thread.is_detached)
    return vm::result::deadlock_avoided;

  if (flags & flags::nohang == 0)
  {
    if (var rc = thread.rval.wait(interruptible: true); rc < 0)
      return rc;
  }

  if (thread.rval.ready)
  {
    if (rvalbuf != 0)
    {
      var rval = thread.rval.result;

      if (var result = vm::write_process_memory(rvalbuf, &rval, sizeof<i32>); !result)
        return result;
    }

    thread.detach();

    return id;
  }

  thread.detach();

  return 0;
}

extern fn sys_sleep(u64 abstime) -> result
{
  var thread = thread::current;

  thread.rval.wait_until(abstime, interruptible: true);

  return 0;
}

extern fn sys_futex_wait(virtaddr addr, u32 expected, u64 abstime) -> result
{
  if (addr == 0 || !vm::is_user_address(addr))
    return invalid_argument;

  if (var result = futex::wait(addr, expected, abstime); !result)
    return result;

  return 0;
}

extern fn sys_futex_wake(virtaddr addr, u32 count) -> result
{
  if (addr == 0 || !vm::is_user_address(addr))
    return invalid_argument;

  if (var result = futex::wake(addr, count); !result)
    return result;

  return 0;
}

extern fn sys_sched_get_param(i32 id, virtaddr parambuf) -> result
{
  var thread = thread::find(id);

  if (!thread)
    return vm::result::no_such_process;

  if (thread.process != process::current)
    return vm::result::no_such_process;

  var params = sched_param();

  params.sched_priority = cast<int>(thread.priority);

  if (var result = vm::write_process_memory(parambuf, &params, sizeof(params)); !result)
    return result;

  return 0;
}

extern fn sys_sched_set_param(i32 id, virtaddr parambuf) -> result
{
  var thread = thread::find(id);

  if (!thread)
    return vm::result::no_such_process;

  if (thread.process != process::current)
    return vm::result::no_such_process;

  var params = sched_param();

  if (var result = vm::read_process_memory(parambuf, &params, sizeof(params)); !result)
    return result;

  if (params.sched_priority <= 0 || params.sched_priority > 50)
    return invalid_argument;

  scheduler::set_priority(thread, cast(params.sched_priority));

  return 0;
}

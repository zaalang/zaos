//
// sched syscalls
//

import std.stdlib;
import vm : virtaddr;
import cpu;
import result as _ : result;
import thread as _ : thread;
import process as _ : process;
import futex;

enum flags
{
  const nohang = 0x1;
  const nowait = 0x2;
}

extern fn sys_wait(i32 id, virtaddr rvalbuf, u64 flags) -> result
{
  var thread = thread::find(id);

  if (!thread)
    return vm::result::no_such_process;

  if (thread.id == thread.process.id && thread.process.parent != process::current)
    return vm::result::no_such_process;

  if (thread.id != thread.process.id && thread.process != process::current)
    return vm::result::no_such_process;

  if (thread == thread::current)
    return vm::result::deadlock_avoided;

  if (thread.is_detached)
    return vm::result::deadlock_avoided;

  if (flags & flags::nohang == 0)
  {
    thread.rval.wait();
  }

  if (thread.rval.ready)
  {
    if (rvalbuf != 0)
    {
      var rval = thread.rval.result;

      if (var result = vm::write_process_memory(rvalbuf, &rval, sizeof<i32>); !result)
        return result;
    }

    if (flags & flags::nowait == 0)
    {
      thread.detach();
    }

    return id;
  }

  if (flags & flags::nowait == 0)
  {
    thread.detach();
  }

  return 0;
}

extern fn sys_futex_wait(virtaddr addr, u32 expected, u64 abstime) -> result
{
  if (addr == 0 || !vm::is_user_address(addr))
    return invalid_argument;

  if (var result = futex::wait(addr, expected, abstime); !result)
    return result;

  return 0;
}

extern fn sys_futex_wake(virtaddr addr, u32 count) -> result
{
  if (addr == 0 || !vm::is_user_address(addr))
    return invalid_argument;

  if (var result = futex::wake(addr, count); !result)
    return result;

  return 0;
}

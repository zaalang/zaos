//
// thread syscalls
//

import std.stdlib;
import vm : virtaddr;
import scheduler;
import ioring;
import vfs;
import result as _ : result;
import process as _ : process;
import thread as _ : thread;
import elf.auxvec;

enum flags
{
}

extern fn sys_get_tid() -> thread::id
{
  return thread::current.id;
}

fn thread_main(void *args) -> void
{
  thread::transition(thread::current.ip, thread::current.sp);
}

extern fn sys_thread_create(virtaddr stack, virtaddr start_routine, uintptr start_argument, i32 priority, virtaddr tidbuf, u64 flags) -> result
{
  if (stack == 0 || !vm::is_user_address(stack))
    return invalid_argument;

  if (start_routine == 0 || !vm::is_user_address(start_routine))
    return invalid_argument;

  if (priority < 1 || priority > 49)
    return invalid_argument;

  var process = process::current;

  var region = vm::lock_region(stack - 1);

  if (!region)
    return vm::result::bad_address;

  var auxv = std::vector<elf::auxval, N:8>();

  stack &= ~63;
  stack -= 256;

  var ring = ioring::create_ioring();

  if (var result = ioring::setup_ioring(ring, process, vm::virtrange(stack, 256)); !result)
    return cast(result);

  var ringfd = process.new_fd(vfs::file_descriptor::create(ring));

  auxv.push_back(elf::auxval::type::RINGHDR, stack);
  auxv.push_back(elf::auxval::type::RINGFD, cast<uintptr>(ringfd));
  auxv.push_back(elf::auxval::type::ROOTFD, 4);
  auxv.push_back(elf::auxval::type::NULL, 0);

  stack &= ~15;
  stack -= 8;

  stack -= auxv.len * sizeof<elf::auxval>;
  vm::write_process_memory(stack, auxv.data, auxv.len * sizeof<elf::auxval>);

  stack -= sizeof<uintptr>;
  vm::write_process_memory(stack, &start_argument, sizeof(start_argument));

  var thread = create_thread(process, &cast<(void mut *) -> void>(thread_main), null);

  thread.sp = stack;
  thread.ip = start_routine;

  region.unlock();

  if (var result = vm::write_process_memory(tidbuf, &thread.id, sizeof<i32>); !result)
    return result;

  scheduler::enqueue(thread, cast(priority));

  return thread.id;
}

extern fn sys_thread_munmap_exit(virtaddr addr, usize length) -> result
{
  if (!vm::is_user_address(addr))
    return vm::result::bad_address;

  if (var result = vm::munmap(vm::virtrange(addr, length)); !result)
    return result;

  thread::exit(0);
}

extern fn sys_thread_exit(i32 rval) -> void
{
  thread::exit(rval);
}

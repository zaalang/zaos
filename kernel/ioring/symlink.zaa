//
// symlink
//

import std.stdlib;
import ioring : ioring_ctx;
import vm : virtaddr;
import vfs;
import process as _ : process;
import result as _ : result;

pub fn sys_symlink(process mut *process, ioring_ctx mut &ctx, i32 dirfd, virtaddr pathbuf, usize pathlen, virtaddr targetbuf, usize targetlen, u64 flags) -> result
{
  if (pathbuf == 0 || pathlen == 0)
    return invalid_argument;

  if (pathlen > 4096)
    return vfs::result::name_too_long;

  var path = std::string<N:256>::with_size(pathlen);

  if (var result = vm::read_process_memory(process, pathbuf, path.data, path.len); !result)
    return result;

  if (targetbuf == 0 || targetlen == 0)
    return invalid_argument;

  if (targetlen > 4096)
    return vfs::result::name_too_long;

  var target = std::string<N:256>::with_size(targetlen);

  if (var result = vm::read_process_memory(process, targetbuf, target.data, target.len); !result)
    return result;

  var dir = process.fd(dirfd);

  if (!dir)
    return vfs::result::bad_descriptor;

  if (dir.node.type != vfs::node::type::directory)
    return vfs::result::not_a_directory;

  var base = dir.node;
  var node = vfs::lookup(&mut base, path);

  if (!base)
    return vfs::result::invalid_argument;

  if (var result = vfs::symlink(base, vfs::basename(path), target, &mut node, 0, 0, 0o777); !result)
    return result;

  return ok;
}

//
// open
//

import std.stdlib;
import ioring : ioring_ctx;
import vm : virtaddr;
import vfs;
import process as _ : process;
import result as _ : result;

enum flags
{
  const read = 0x1;
  const write = 0x2;

  const create = 0o100;
  const exclusive = 0o200;
  const truncate = 0o1000;
  const append = 0o2000;
  const symlink = 0o100000;
  const directory = 0o200000;
  const nofollow = 0o400000;
}

pub fn sys_open(process mut *process, ioring_ctx mut &ctx, i32 dirfd, usize pathlen, virtaddr pathbuf, u64 flags, u32 mode) -> result
{
  if (pathbuf == 0 && pathlen != 0)
    return invalid_argument;

  if (pathlen > 4096)
    return vfs::result::name_too_long;

  var path = std::string<N:256>::with_size(pathlen);

  if (var result = vm::read_process_memory(process, pathbuf, path.data, path.len); !result)
    return result;

  var dir = process.fd(dirfd);

  if (!dir)
    return vfs::result::bad_descriptor;

  if (dir.node.type != vfs::node::type::directory)
    return vfs::result::not_a_directory;

  var base = dir.node;
  var node = vfs::lookup(process, &mut base, path);

  if (flags & flags::create == flags::create)
  {
    if (flags & flags::directory == flags::directory)
      return vfs::result::invalid_argument;

    if (node && (flags & flags::exclusive == flags::exclusive))
      return vfs::result::already_exists;

    if (base && !node)
    {
      var name = vfs::basename(path);

      if (var result = vfs::create(base, name, &mut node, 0, 0, mode); !result)
        return result;

      vfs::notify(base, node, vfs::notify::create, name);
    }
  }

  if (!node)
    return vfs::result::not_found;

  if (flags & flags::nofollow != flags::nofollow)
  {
    if (var result = vfs::resolve(process, &mut base, &mut node); !result)
      return result;
  }

  if ((flags & flags::create == flags::create) && node.type == vfs::node::type::directory)
    return vfs::result::is_a_directory;

  if ((flags & flags::symlink == flags::symlink) && node.type != vfs::node::type::symlink)
    return vfs::result::invalid_argument;

  if ((flags & flags::directory == flags::directory) && node.type != vfs::node::type::directory)
    return vfs::result::not_a_directory;

  if (base == node)
    base = dir.parent;

  var fd = vfs::file_descriptor::create(base, node);

  if (var result = vfs::open(node, &mut fd, process, flags, mode); !result)
    return result;

  var stat = vfs::stat();
  if (var result = vfs::stat(node, &mut stat, vfs::stats::size); !result)
    return result;

  if (flags & (flags::write | flags::truncate) == (flags::write | flags::truncate))
  {
    stat.size = 0;
    if (var result = vfs::setattr(node, stat, vfs::stats::size); !result)
      return result;
  }

  if (flags & flags::append == flags::append)
  {
    fd.writecursor = stat.size;
  }

  return process.new_fd(fd);
}

//
// epoll
//

import std.stdlib;
import ioring : ioring_ctx;
import vm : virtaddr;
import io;
import cpu;
import vfs;
import mutex as _ : mutex;
import thread as _ : thread;
import process as _ : process;
import result as _ : result;
import support.rc : Rc;

enum op
{
  const add = 0x1;
  const modify = 0x2;
  const remove = 0x3;
}

enum type
{
  const fd = 0x1;
  const thread = 0x2;
}

enum events
{
  const pollin = 0x001;
  const pollout = 0x004;
}

struct pollevt
{
  i32 id;
  u16 type;
  u16 mask;
  uintptr user_data;

  pollevt(i32 id, u16 type, u16 mask, uintptr user_data)
    : id(id), type(type), mask(mask), user_data(user_data)
  {
  }

  pollevt() = default;
  pollevt(pollevt&) = default;
  ~pollevt() = default;
}

pub struct ioring_epoll : pub vfs::node
{
  pub io::response readable;

  struct event
  {
    i32 id;
    u16 type;
    u16 mask;
    uintptr user_data;

    io::response readable;
    io::response writeable;

    event() = default;
    event(event&) = default;
    ~event() = default;
  }

  mutex lock;
  std::vector<event> events;

  fn create() -> ioring_epoll mut *
  {
    return std::allocator::new<ioring_epoll>();
  }

  pub ioring_epoll() = default;
  pub ~ioring_epoll() = default;
}

pub fn create_epoll(process mut *process) -> vfs::node_ptr
{
  var epoll = ioring_epoll::create();

  return vfs::node::new(epoll, vfs::node::type::epoll, &vfs::node_operations());
}

fn add(ioring_epoll mut &this, process mut *process, pollevt &evt) -> result
{
  var guard = std::lock_guard(&mut this.lock);

  var event = ioring_epoll::event();

  switch (evt.type)
  {
    case type::fd:

      var file = process.fd(evt.id);

      if (!file)
        return vfs::result::bad_descriptor;

      switch (var &node = file.node; node.type)
      {
        case vfs::node::type::pipe:
        case vfs::node::type::device:

          if (var result = node.pipe_operations.poll(node, event.readable.cb, event.writeable.cb); !result)
            return result;

        case vfs::node::type::epoll:

          event.readable = cast<ioring_epoll mut &>(*node).readable;

        else:
          return vfs::result::bad_descriptor;
      }

    case type::thread:

      var thread = thread::find(evt.id);

      if (!thread)
        return vm::result::no_such_process;

      event.readable = thread.rval;

    else:
      return invalid_argument;
  }

  event.id = evt.id;
  event.type = evt.type;
  event.mask = evt.mask;
  event.user_data = evt.user_data;

  if (event.mask & events::pollin == events::pollin)
    io::add_notify(&mut event.readable.cb, &this);

  if (event.mask & events::pollout == events::pollout)
    io::add_notify(&mut event.writeable.cb, &this);

  this.events.push_back(event);

  return ok;
}

fn remove(ioring_epoll mut &this, pollevt &evt) -> result
{
  var guard = std::lock_guard(&mut this.lock);

  var j = std::find_if(this.events, |event| event.id == evt.id);

  if (j == this.events.end)
    return vfs::result::not_found;

  var mut &event = this.events[j];

  if (event.mask & events::pollin == events::pollin)
    io::remove_notify(&mut event.readable.cb, &this);

  if (event.mask & events::pollout == events::pollout)
    io::remove_notify(&mut event.writeable.cb, &this);

  this.events.erase(j);

  return ok;
}

fn clear(ioring_epoll mut &this) -> result
{
  var guard = std::lock_guard(&mut this.lock);

  for(var mut &event : this.events)
  {
    if (event.mask & events::pollin == events::pollin)
      io::remove_notify(&mut event.readable.cb, &this);

    if (event.mask & events::pollout == events::pollout)
      io::remove_notify(&mut event.writeable.cb, &this);
  }

  this.events.clear();

  return ok;
}

pub fn trigger(ioring_epoll mut *epoll) -> void
{
  io::complete(&mut epoll.readable.cb, 0);
}

pub fn sys_epoll_create(process mut *process, ioring_ctx mut &ctx, u64 flags) -> result
{
  var epoll = create_epoll(process::current);

  return process::current.new_fd(vfs::file_descriptor::create(epoll));
}

pub fn sys_epoll_ctl(process mut *process, ioring_ctx mut &ctx, i32 fd, i32 op, virtaddr evtbuf, u64 flags) -> result
{
  var file = process.fd(fd);

  if (!file)
    return vfs::result::bad_descriptor;

  if (file.node.type != vfs::node::type::epoll)
    return vfs::result::bad_descriptor;

  var evt = pollevt();

  if (var result = vm::read_process_memory(process, evtbuf, &evt, sizeof<pollevt>); !result)
    return result;

  var mut &epoll = cast<ioring_epoll mut &>(*file.node);

  switch (op)
  {
    case op::add:
      if (var result = epoll.add(process, evt); !result)
        return result;

    case op::remove:
      if (var result = epoll.remove(evt); !result)
        return result;

    else:
      return invalid_argument;
  }

  return 0;
}

pub fn sys_epoll_wait(process mut *process, ioring_ctx mut &ctx, i32 fd, virtaddr evtsbuf, usize n, u64 timeout) -> result
{
  var file = process.fd(fd);

  if (!file)
    return vfs::result::bad_descriptor;

  if (file.node.type != vfs::node::type::epoll)
    return vfs::result::bad_descriptor;

  var evts = std::vector<pollevt>();

  var mut &epoll = cast<ioring_epoll mut &>(*file.node);

  var guard = std::lock_guard(&mut epoll.lock);

  io::reset(&mut epoll.readable.cb);
  io::initiate(&mut epoll.readable.cb, 1);

  for(var &event : epoll.events)
  {
    var revents = 0;

    if (event.mask & events::pollin == events::pollin && event.readable.ready)
      revents |= events::pollin;

    if (event.mask & events::pollout == events::pollout && event.writeable.ready)
      revents |= events::pollout;

    if (revents != 0)
    {
      if (evts.len == n)
      {
        io::complete(&mut epoll.readable.cb, 0);

        break;
      }

      evts.push_back(event.id, event.type, revents, event.user_data);
    }
  }

  if (evts.len == 0)
  {
    ctx.wake_time = timeout;
    ctx.blockers.push_back(epoll.readable);

    if (timeout != 0 && timeout < cpu::system_time)
      return 0;

    return ioring::result::should_block;
  }

  if (var result = vm::write_process_memory(process, evtsbuf, evts.data, evts.len * sizeof<pollevt>); !result)
    return result;

  return cast(evts.len);
}

fn destroy(vfs::node mut *node) -> void
{
  var epoll = cast<ioring_epoll mut *>(node);

  epoll.clear();

  std::allocator::delete(epoll);
}

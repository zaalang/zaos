//
// ioring worker
//

import std.stdlib;
import std.algorithm;
import ioring : ioring_header, ioring_sqe, ioring_cqe, io_ring, result;
import cpu;
import sys;
import scheduler;
import platform;
import thread as _ : thread;
import process as _ : process;
import semaphore as _ : semaphore;

struct ring_queue
{
  std::spin_lock lock;

  io_ring mut *head;
  io_ring mut * mut *last;

  fn take(this mut &) -> (io_ring mut *, io_ring mut * mut *)
  {
    var guard = std::lock_guard(&mut cpu::irqlock, &mut this.lock);

    var result = (this.head, this.last);

    this.head = null;
    this.last = &this.head;

    return result;
  }

  fn append(this mut &, io_ring mut *ring) -> void
  {
    var guard = std::lock_guard(&mut cpu::irqlock, &mut this.lock);

    *this.last = ring;
    this.last = &ring.next;
  }

  fn append(this mut &, (io_ring mut *, io_ring mut * mut *) mut &entries) -> void
  {
    var guard = std::lock_guard(&mut cpu::irqlock, &mut this.lock);

    *this.last = entries.0;
    this.last = entries.1;
  }

  ring_queue() = default;
  ring_queue(#ring_queue&) = default;
  ~ring_queue() = default;
}

pub fn dump(ring_queue &this) -> void
{
  std::print("[ring queue]");

  for (var rq = this.head; rq; rq = rq.next)
  {
    std::print("  ", rq.type, " ", rq.position, " ", rq.length);
  }
}

struct worker
{
  semaphore doorbell;
  thread mut *kworkd;

  worker() = default;
  worker(#worker&) = default;
  ~worker() = default;
}

struct work_manager
{
  ring_queue rings;

  worker[1] workers;

  u32 activity;

  pub fn instance() -> work_manager mut &
  {
    static instance = #work_manager();

    return &instance;
  }

  work_manager() = default;
  work_manager(#work_manager&) = default;
  ~work_manager() = default;
}

pub fn workman() -> work_manager mut &
{
  return &work_manager::instance;
}

pub fn enqueue(work_manager mut &workman, io_ring mut *ring) -> void
{
  workman.rings.append(ring);
}

pub fn trigger(work_manager mut &workman) -> void
{
  std::atomic_add(&workman.activity, 1);

  var mut &worker = workman.workers[cast<usize>(cpu::current) % workman.workers.len];

  worker.doorbell.release();
}

pub fn wake_from_stall() -> void
{
  workman.trigger();
}

fn kworkd(worker mut *worker) -> void
{
  for (;;)
  {
    var now = cpu::system_time;
    var activity = std::atomic_load(&workman.activity);

    var entries = workman.rings.take();

    for (var entry = &entries.0; *entry; )
    {
      var ring = *entry;

      if (ring.lock.try_lock)
      {
        for (var mut &ctx : ring.pending)
        {
          var j = ctx.entries.begin;

          if (j == ctx.entries.end)
            continue;

          if (ctx.status != result::should_block)
          {
            if (var result = ring.retire(*j, ctx.status); !result)
              continue;

            ++j;
          }

          if (ctx.status == result::should_block)
          {
            if (ctx.wake_time != 0 && ctx.wake_time <= now)
              ctx.blockers.clear();

            if (!ctx.blockers.empty && std::all_of(ctx.blockers, fn (var &k) { return !k.ready; }))
              continue;

            ctx.wake_time = 0;
            ctx.blockers.clear();

            ctx.status = result::ok;
          }

          while (j != ctx.entries.end)
          {
            if (ring.execute(&mut ctx, *j) == result::should_block)
              break;

            ++j;
          }

          ctx.entries.erase(ctx.entries.begin, j);
        }

        ring.pending.erase(std::remove_if(ring.pending.begin, ring.pending.end - 1, fn (var &k) {
          return k.entries.empty;
        }), ring.pending.end - 1);

        if (ring.pending.len == 1 && ring.pending.back.entries.empty)
        {
          *entry = entry.next;

          if (!*entry)
            entries.1 = entry;

          ring.next = null;
        }
        else
        {
          entry = &entry.next;
        }

        ring.lock.unlock();
      }
      else
      {
        entry = &entry.next;
      }
    }

    var waketime = ~0;

    if (entries.0)
    {
      for (var ring = entries.0; ring; ring = ring.next)
      {
        if (ring.lock.try_lock)
        {
          for (var mut &ctx : ring.pending)
          {
            if (ctx.wake_time != 0)
              waketime = std::min(waketime, ctx.wake_time);
          }

          ring.lock.unlock();
        }
        else
        {
          waketime = std::min(waketime, cpu::system_time + 1_000);
        }
      }

      workman.rings.append(&mut entries);
    }

    if (workman.activity != activity)
      continue;

    worker.doorbell.wait_until(waketime);
  }
}

pub fn initialise() -> void
{
  workman.rings.last = &workman.rings.head;

  for (var mut &worker : workman.workers)
  {
    worker.kworkd = create_thread(process::current, &cast<(worker mut *) -> void>(kworkd), &worker);
  }

  platform::disable_interrupts();

  for (var cpu = 0; cpu < sys::cpu_count; ++cpu)
  {
    workman.workers[cpu % workman.workers.len].kworkd.pinned = &sys::runqueue(cast(cpu));
  }

  platform::enable_interrupts();

  for (var mut &worker : workman.workers)
  {
    scheduler::enqueue(worker.kworkd);
  }
}

//
// chr dev
//

import std.atomic;
import chr.result;
import io;
import vm;
import vfs : fd;
import process as _ : process;
import support.rc : Rc;

pub enum query
{
  device_path,
}

pub struct chrdev
{
  pub fn create<T>(var && ...args) -> Rc<T>
  {
    var dev = std::allocator::new<T>(&&args...);

    dev.destroy = fn (chrdev mut *dev) { std::allocator::delete(cast<T mut *>(dev)); };

    return Rc(dev);
  }

  pub fn query(this &, chr::query query) -> std::string
  {
    var result = std::string();

    this.ops.query(this, query, &mut result);

    return result;
  }

  pub fn open(this mut &, fd mut &fd, process mut *process, u64 flags, u32 mode) -> chr::result
  {
    return this.ops.open(&mut this, &mut fd, process, flags, mode);
  }

  pub fn ioctl(this mut &, u32 op, vm::iovec &iovec) -> chr::result
  {
    return this.ops.ioctl(&mut this, op, iovec);
  }

  pub fn poll(this mut &, Rc<io::iocb> mut &readable, Rc<io::iocb> mut &writeable) -> chr::result
  {
    return this.ops.poll(&mut this, &mut readable, &mut writeable);
  }

  pub fn read(this mut &, vm::iovec &iovec, usize offset, usize length) -> chr::result
  {
    return this.ops.read(&mut this, iovec, offset, length);
  }

  pub fn write(this mut &, vm::iovec &iovec, usize offset, usize length) -> chr::result
  {
    return this.ops.write(&mut this, iovec, offset, length);
  }

  pub fn mmap(this mut &, vm::virtrange range, u64 offset, vm::protection prot, vm::usage use) -> chr::result
  {
    return this.ops.mmap(&mut this, range, offset, prot, use);
  }

  pub chrdev(device_operations &ops)
    : ops(&ops)
  {
  }

  pub fn ref(this mut &) -> void
  {
    std::atomic_add(&this.refcnt, 1);
  }

  pub fn unref(this mut &) -> void
  {
    if (std::atomic_sub(&this.refcnt, 1) == 1)
      destroy(&this);
  }

  pub ~chrdev() = default;

  i32 refcnt;
  device_operations &ops;
  fn (*destroy)(chrdev mut *) -> void;
}

pub vtable device_operations
{
  pub fn query(this &, chr::query query, std::string mut &result) -> chr::result;

  pub fn open(this mut &, fd mut &fd, process mut *process, u64 flags, u32 mode) -> chr::result;

  pub fn ioctl(this mut &, u32 op, vm::iovec &iovec) -> chr::result;

  pub fn poll(this mut &, Rc<io::iocb> mut &readable, Rc<io::iocb> mut &writeable) -> chr::result;

  pub fn read(this mut &, vm::iovec &iovec, usize offset, usize length) -> chr::result;
  pub fn write(this mut &, vm::iovec &iovec, usize offset, usize length) -> chr::result;

  pub fn mmap(this mut &, vm::virtrange range, u64 offset, vm::protection prot, vm::usage use) -> chr::result;
}

fn destroy(chrdev mut *device) -> void
{
  if (device.destroy)
    device.destroy(device);
}

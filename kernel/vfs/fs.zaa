//
// fs
//

import std.stdio;
import std.string;
import vfs.node;
import support.rc : Rc;

pub enum query
{
  fs_type,
  fs_source,
}

pub struct statfs
{
  pub u64 bsize;
  pub u64 blocks;
  pub u64 free_blocks;

  pub statfs() = default;
  pub statfs(statfs &) = default;
  pub fn =(statfs mut &, statfs &) -> statfs mut & = default;
  pub ~statfs() = default;
}

pub struct file_system
{
  pub file_system_operations &ops;

  pub fn query(this &, vfs::query query) -> std::string
  {
    var result = std::string();

    this.ops.query(&this, query, &mut result);

    return result;
  }

  pub fn statfs(this mut &, vfs::statfs mut &statfs, u64 mask) -> vfs::result
  {
    return this.ops.statfs(&this, &mut statfs, mask);
  }

  pub file_system(file_system_operations &ops)
    : ops(&ops)
  {
  }

  pub ~file_system() = default;
}

pub struct file_system_context
{
  pub std::string source;

  pub file_system_context() = default;
  pub ~file_system_context() = default;
}

pub vtable file_system_type
{
  pub fn name() -> std::string_view;
  pub fn create(file_system_context &ctx) -> file_system mut *;
}

pub vtable file_system_operations
{
  pub fn query(this *fs, vfs::query query, std::string mut &result) -> vfs::result;

  pub fn mount(this mut *fs, Rc<vfs::node> mut &dentry) -> vfs::result;
  pub fn statfs(this mut *fs, vfs::statfs mut &statfs, u64 mask) -> vfs::result;
}

//
// file_descriptor
//

import std.alloc;
import vfs.node;
import slab : slab_allocator;
import support.rc : Rc;

pub struct file_descriptor
{
  vfs::node_ptr node;

  pub u64 readcursor;
  pub u64 writecursor;

  u8[24] reserved;

  pub fn bool(this &) -> bool
  {
    return !!this.node;
  }

  pub fn node(this&) -> vfs::node_ptr &
  {
    return &this.node;
  }

  fn allocator()
  {
    static allocator = #slab_allocator<file_descriptor>();

    return &allocator;
  }

  pub fn create(vfs::node_ptr node) -> fd
  {
    var descriptor = allocator.allocate();

    descriptor.node = &move node;
    descriptor.readcursor = 0;
    descriptor.writecursor = 0;

    return fd(descriptor);
  }

  pub fn clone(file_descriptor &old) -> fd
  {
    var descriptor = allocator.allocate();

    descriptor.node = old.node;
    descriptor.readcursor = old.readcursor;
    descriptor.writecursor = old.writecursor;

    return fd(descriptor);
  }

  pub fn ref(this mut &) -> void
  {
    std::atomic_add(&this.refcnt, 1);
  }

  pub fn unref(this mut &) -> void
  {
    if (std::atomic_sub(&this.refcnt, 1) == 1)
      destroy(&this);
  }

  pub file_descriptor() = default;
  pub ~file_descriptor() = default;

  i32 refcnt;
}

pub struct fd : pub Rc<file_descriptor>
{
  pub fd(file_descriptor mut *inner)
    : super(inner)
  {
  }

  pub fd() = default;
  pub fd(fd &&other) = default;
  pub fn =(fd mut &lhs, fd &&rhs) -> fd mut & = default;
  pub ~fd() = default;
}

fn destroy(file_descriptor mut *fd) -> void
{
  fd.node = vfs::node_ptr();

  file_descriptor::allocator.free(fd);
}

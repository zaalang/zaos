//
// acpi dump
//

import std.stdio;
import efi : EFI_HANDLE, EFI_SYSTEM_TABLE;
import acpi.madt;
import acpi.mcfg;
import acpi.fadt;
import acpi.parser;

fn thread_getid(acpi::namespace mut &ns, u32 mut &id) -> acpi::result
{
  return ok;
}

fn clock_gettime(acpi::namespace mut &ns, u64 mut &clock) -> acpi::result
{
  return ok;
}

fn region_read(acpi::namespace mut &ns, acpi::opregion *opregion, u64 offset, usize width, u64 mut &data) -> acpi::result
{
  return ok;
}

fn region_write(acpi::namespace mut &ns, acpi::opregion *opregion, u64 offset, usize width, u64 &data) -> acpi::result
{
  return ok;
}

fn region_close(acpi::namespace mut &ns, acpi::opregion *opregion) -> acpi::result
{
  return ok;
}

fn mutex_create(acpi::namespace mut &namespace, void * mut &handle) -> acpi::result
{
  return ok;
}

fn mutex_destroy(acpi::namespace mut &namespace, void *handle) -> acpi::result
{
  return ok;
}

fn mutex_acquire(acpi::namespace mut &namespace, void *handle, u16 timeout) -> acpi::result
{
  return ok;
}

fn mutex_release(acpi::namespace mut &namespace, void *handle) -> acpi::result
{
  return ok;
}

fn notify(acpi::namespace mut &ns, acpi::node *node, acpi::value &value) -> acpi::result
{
  return ok;
}

fn sleep(acpi::namespace mut &ns, u64 period) -> acpi::result
{
  return ok;
}

extern fn main(EFI_HANDLE Image, EFI_SYSTEM_TABLE *SystemTable) -> i32
{
  std::print("acpi dump");
  std::print("---------");

  var acpi_root = 0;

  for (var i = 0; i < SystemTable.NumberOfTableEntries; ++i)
  {
    var entry = SystemTable.ConfigurationTable + i;

    if (entry.VendorGuid != efi::ACPI_20_TABLE_GUID)
      continue;

    acpi_root = entry.VendorTable;
  }

  if (!acpi::validate_rsdp(acpi_root))
    std::panic("invalid rdsp table");

  var madt = acpi::find_madt(0, acpi_root);

  if (!acpi::validate_madt(madt))
    std::panic("invalid madt table");

  std::printf("acpi root address: {:#08x}\n", acpi_root);
  std::printf("\n");

  std::printf("local apic address: {:#08x}\n", madt.local_apic_address);

  for (var apic : madt.entries)
  {
    switch (apic.type)
    {
      case local_apic:

        var local_apic = cast<acpi::local_apic*>(apic);

        std::printf("  local apic: id {}, flags {}\n", local_apic.apic_id, local_apic.flags);

      case io_apic:

        var io_apic = cast<acpi::io_apic*>(apic);

        std::printf("  io apic: addr {:#08x}, irq {}\n", io_apic.apic_address, io_apic.interrupt_base);
    }
  }

  std::printf("\n");

  var mcfg = acpi::find_mcfg(0, acpi_root);

  if (!acpi::validate_mcfg(mcfg))
    std::panic("invalid mcfg table");

  std::printf("pci bus enumeration\n");

  for (var config : mcfg.entries)
  {
    for (var bus = config.bus_start; bus != config.bus_end; ++bus)
    {
      struct pci_header
      {
        u16 vendor_id;
        u16 device_id;
        u16 command;
        u16 status;
        u8 revision_id;
        u8[3] class_code;
        u8 cache_line_size;
        u8 primary_latency_timer;
        u8 header_type;
        u8 bist;
      }

      var busentry = cast<pci_header*>(cast<uintptr>(config.base_address) + cast<uintptr>(bus) << 20);

      if (busentry.device_id == 0 || busentry.device_id == 0xffff)
        continue;

      for (var dev = 0; dev < 32; ++dev)
      {
        var deventry = cast<pci_header*>(cast<uintptr>(busentry) + cast<uintptr>(dev) << 15);

        if (deventry.device_id == 0 || deventry.device_id == 0xffff)
          continue;

        for (var func = 0; func < 8; ++func)
        {
          var entry = cast<pci_header*>(cast<uintptr>(deventry) + cast<uintptr>(func) << 12);

          if (entry.device_id == 0 || entry.device_id == 0xffff)
            continue;

          std::printf("  {}:{}.{} {:04x} {:04x} {}\n", bus, dev, func, entry.vendor_id, entry.device_id, entry.class_code);
        }
      }
    }
  }

  std::printf("\n");

  var fadt = acpi::find_fadt(0, acpi_root);

  if (!acpi::validate_fadt(fadt))
    std::panic("invalid fadt table");

  var dsdt = cast<acpi::sdt*>(fadt.dsdt_address);

  std::printf("dsdt address: {:#08x}\n", dsdt);

  for (var sdt : acpi::tables(0, acpi_root))
  {
    if (sdt.signature == std::span("SSDT"))
      std::printf("ssdt address: {:#08x}\n", sdt);
  }

  try
  {
    var fout = std::file::create("\\EFI\\Boot\\dsdt");

    fout.write(cast<u8*>(dsdt), cast<usize>(dsdt.length));
  }
  catch (std::error e)
  {
    std::print("dsdt write error - ", e);
  }

  var ns = acpi::namespace();

  acpi::initialise(&mut ns, acpi::interface());

  if (var rc = acpi::parse(&mut ns, dsdt.payload); !rc)
    std::panic("acpi dsdt parse error - ", rc);

  for (var sdt : acpi::tables(0, acpi_root))
  {
    if (sdt.signature == std::span("SSDT"))
    {
      if (var rc = acpi::parse(&mut ns, sdt.payload); !rc)
        std::panic("acpi ssdt parse error - ", rc);
    }
  }

  //ns.dump();

  std::print("ok");

  return 0;
}

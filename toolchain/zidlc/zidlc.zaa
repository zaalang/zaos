//
// zidl compiler
//

import std.stdio;
import std.vector;
import std.string : String;
import std.hash;
import std.box;
import std.env;
import zidl.types;
import zidl.parser;
import diag;

struct builtin_type
{
  std::string_literal name;
  usize size;
  usize align;

  builtin_type(std::string_literal name, usize size, usize align)
    : name(name), size(size), align(align)
  {
  }

  builtin_type(builtin_type&&) = default;
  ~builtin_type() = default;
}

struct array_type
{
  std::string name;

  type *type;
  usize size;

  array_type(String &&name, type *type, usize size)
    : name(&&name), type(type), size(size)
  {
  }

  array_type(array_type&&) = default;
  ~array_type() = default;
}

struct tag_type
{
  std::string name;
  std::vector<type*> fields;

  tag_type(String &&name, std::vector<type*> &&fields)
    : name(&&name), fields(&&fields)
  {
  }

  tag_type(tag_type&&) = default;
  ~tag_type() = default;
}

union type
{
  builtin(builtin_type),
  array(array_type),
  tag(tag_type),
  string,
  channel,
  buffer,

  type() = default;
  type(type&&) = default;
  ~type() = default;
}

struct context
{
  std::file fout;
  diag::diag mut *diag;

  type *i32type;

  std::vector<std::box<type>> typetable;

  fn initialise(context mut &ctx, diag::diag mut *diag) -> void
  {
    ctx.diag = diag;

    ctx.add_type(type::builtin("i8", sizeof<i8>, alignof<i8>));
    ctx.add_type(type::builtin("i16", sizeof<i16>, alignof<i16>));
    ctx.add_type(type::builtin("i32", sizeof<i32>, alignof<i32>));
    ctx.add_type(type::builtin("i64", sizeof<i64>, alignof<i64>));
    ctx.add_type(type::builtin("u8", sizeof<u8>, alignof<u8>));
    ctx.add_type(type::builtin("u16", sizeof<u16>, alignof<u16>));
    ctx.add_type(type::builtin("u32", sizeof<u32>, alignof<u32>));
    ctx.add_type(type::builtin("u64", sizeof<u64>, alignof<u64>));
    ctx.add_type(type::builtin("f32", sizeof<f32>, alignof<f32>));
    ctx.add_type(type::builtin("f64", sizeof<f64>, alignof<f64>));
    ctx.add_type(type::builtin("bool", sizeof<bool>, alignof<bool>));
    ctx.add_type(type::builtin("char", sizeof<char>, alignof<char>));
    ctx.add_type(type::string());
    ctx.add_type(type::channel());
    ctx.add_type(type::buffer());

    ctx.i32type = ctx.resolve_type("i32");
  }

  context() = default;
  ~context() = default;
}

fn add_type(context mut &ctx, type &&type) -> type *
{
  return &*ctx.typetable.push_back(&&type);
}

fn resolve_type(context mut &ctx, std::string_view name) -> type *
{
  for (var &type : ctx.typetable)
  {
    switch (*type)
    {
      case builtin[builtin]:
        if (name == builtin.name)
          return &*type;

      case array[array]:
        if (name == array.name)
          return &*type;

      case tag[tag]:
        if (name == tag.name)
          return &*type;

      case string[string]:
        if (name == "string")
          return &*type;

      case channel:
        if (name == "channel")
          return &*type;

      case buffer:
        if (name == "buffer")
          return &*type;
    }
  }

  if (var j = name.find_first('['); j != name.end)
  {
    if (var type = resolve_type(&mut ctx, name[name.begin .. j]))
    {
      var size = usize(0);
      std::sscan(name[j + 1 .. name.end - 1], &mut size);

      return &*ctx.typetable.emplace(ctx.typetable.end, type::array(name, type, size));
    }
  }

  ctx.diag.error("unknown type");

  return null;
}

fn resolve_type(context mut &ctx, String &name) -> type *
{
  return resolve_type(&mut ctx, std::string_view(name));
}

fn sizeof_tag_type(tag_type *tagtype) -> usize
{
  var size = 0;
  var align = 1;

  for (var field : tagtype.fields)
  {
    var alignment = alignof_type(field);

    size = std::align_up(size, alignment) + sizeof_type(field);

    align = std::max(align, alignment);
  }

  return std::align_up(size, align);
}

fn sizeof_type(type *type) -> usize
{
  switch (*type)
  {
    case builtin[builtin]:
      return builtin.size;

    case string:
      return sizeof<zidl::string_view>;

    case array[array]:
      return sizeof_type(array.type) * array.size;

    case tag[tag]:
      return sizeof_tag_type(&tag);

    case channel:
      return sizeof<zidl::channel>;

    case buffer:
      return sizeof<zidl::buffer>;
  }

  std::panic("unknown sizeof type");
}

fn alignof_tag_type(tag_type *tagtype) -> usize
{
  var align = 1;

  for (var field : tagtype.fields)
  {
    align = std::max(align, alignof_type(field));
  }

  return align;
}

fn alignof_type(type *type) -> usize
{
  switch (*type)
  {
    case builtin[builtin]:
      return builtin.align;

    case array[array]:
      return alignof_type(array.type);

    case tag[tag]:
      return alignof_tag_type(&tag);

    case string:
      return alignof<zidl::string_view>;

    case channel:
      return alignof<zidl::channel>;

    case buffer:
      return alignof<zidl::buffer>;
  }

  std::panic("unknown alignof type");
}

fn zidl_typename(type *type) -> std::string_view
{
  switch (*type)
  {
    case builtin[builtin]:
      return builtin.name;

    case array[array]:
      return array.name;

    case tag[tag]:
      return tag.name;

    case string:
      return "zidl::string_view";

    case channel:
      return "zidl::channel";

    case buffer:
      return "zidl::buffer";
  }

  std::panic("unknown zidl type");
}

fn max_message_size(context mut &ctx, std::vector<zidl::decl> &variables) -> usize
{
  var size = 0;
  var data = 0;

  size += std::align_up(sizeof<zidl::zidl_header_t>, 8);

  for (var &variable : variables)
  {
    switch (variable)
    {
      case variable[variable]:

        if (var type = resolve_type(&mut ctx, variable.type))
          size = std::align_up(size, alignof_type(type)) + sizeof_type(type);

        data += std::align_up(std::max(variable.constraint, 64), 8);

      else:
        std::panic("unhandled variable decl");
    }
  }

  size = std::align_up(size, 8);

  return size + data;
}

fn max_request_size(context mut &ctx, std::vector<zidl::decl> &methods) -> usize
{
  var size = 0;

  for (var &method : methods)
  {
    switch (method)
    {
      case method[method]:

        size += max_message_size(&mut ctx, method.parameters);

      else:
        std::panic("unhandled method decl");
    }
  }

  return size;
}

fn max_response_size(context mut &ctx, std::vector<zidl::decl> &methods) -> usize
{
  var size = 0;

  for (var &method : methods)
  {
    switch (method)
    {
      case method[method]:

        size += max_message_size(&mut ctx, method.returns);

      else:
        std::panic("unhandled method decl");
    }
  }

  return size;
}

fn codegen_fields(context mut &ctx, std::vector<zidl::decl> &variables) throws -> void
{
  for (var &variable : variables)
  {
    switch (variable)
    {
      case variable[variable]:

        if (var type = resolve_type(&mut ctx, variable.type))
          std::fprintf(&mut ctx.fout, "      pub {} {};\n", zidl_typename(type), variable.name);

      else:
        std::panic("unhandled parameter decl");
    }
  }

  std::fprintf(&mut ctx.fout, "\n");
}

fn codegen_constructor(context mut &ctx, std::vector<zidl::decl> &variables) throws -> void
{
  std::fprintf(&mut ctx.fout, "      pub this(");

  for (var &variable : variables)
  {
    if (&variable != &variables.front)
      std::fprintf(&mut ctx.fout, ", ");

    switch (variable)
    {
      case variable[variable]:

        if (var type = resolve_type(&mut ctx, variable.type))
        {
          switch (*type)
          {
            case builtin:
              std::fprintf(&mut ctx.fout, "{} {}", zidl_typename(type), variable.name);

            case array:
              std::fprintf(&mut ctx.fout, "{} &&{}", zidl_typename(type), variable.name);

            case tag:
              std::fprintf(&mut ctx.fout, "{} &&{}", zidl_typename(type), variable.name);

            case string:
            case channel:
            case buffer:
              std::fprintf(&mut ctx.fout, "{} {}", zidl_typename(type), variable.name);
          }
        }

      else:
        std::panic("unhandled parameter decl");
    }
  }

  std::fprintf(&mut ctx.fout, ")\n");

  if (!variables.empty)
  {
    std::fprintf(&mut ctx.fout, "        : ");

    for (var &variable : variables)
    {
      if (&variable != &variables.front)
        std::fprintf(&mut ctx.fout, ", ");

      switch (variable)
      {
        case variable[variable]:

          if (var type = resolve_type(&mut ctx, variable.type))
          {
            switch (*type)
            {
              case builtin:
                std::fprintf(&mut ctx.fout, "{}({})", variable.name, variable.name);

              case array:
                std::fprintf(&mut ctx.fout, "{}(&&{})", variable.name, variable.name);

              case tag:
                std::fprintf(&mut ctx.fout, "{}(&&{})", variable.name, variable.name);

              case string:
                std::fprintf(&mut ctx.fout, "{}({})", variable.name, variable.name);

              case channel:
              case buffer:
                std::fprintf(&mut ctx.fout, "{}(&move {})", variable.name, variable.name);
            }
          }

        else:
          std::panic("unhandled parameter decl");
      }
    }

    std::fprintf(&mut ctx.fout, "\n");
  }

  std::fprintf(&mut ctx.fout, "      {{\n");
  std::fprintf(&mut ctx.fout, "      }}\n");
  std::fprintf(&mut ctx.fout, "      \n");
}

fn codegen_encode(context mut &ctx, std::vector<zidl::decl> &variables) throws -> void
{
  std::fprintf(&mut ctx.fout, "      pub fn encode(zidl::encoder mut &encoder, typeof(this) &value) -> void\n");
  std::fprintf(&mut ctx.fout, "      {{\n");

  for (var &variable : variables)
  {
    switch (variable)
    {
      case variable[variable]:

        if (var type = resolve_type(&mut ctx, variable.type))
        {
          switch (*type)
          {
            case string:
            case channel:
            case buffer:
              std::fprintf(&mut ctx.fout, "        zidl::encode(&mut encoder, value.{});\n", variable.name);
          }
        }

      else:
        std::panic("unhandled parameter decl");
    }
  }

  std::fprintf(&mut ctx.fout, "      }}\n");
  std::fprintf(&mut ctx.fout, "      \n");
}

fn codegen_decode(context mut &ctx, std::vector<zidl::decl> &variables) throws -> void
{
  std::fprintf(&mut ctx.fout, "      pub fn decode(zidl::decoder mut &decoder, typeof(this) mut &value) -> void\n");
  std::fprintf(&mut ctx.fout, "      {{\n");

  for (var &variable : variables)
  {
    switch (variable)
    {
      case variable[variable]:

        if (var type = resolve_type(&mut ctx, variable.type))
        {
          switch (*type)
          {
            case string:
            case channel:
            case buffer:
              std::fprintf(&mut ctx.fout, "        zidl::decode(&mut decoder, &mut value.{});\n", variable.name);
          }
        }

      else:
        std::panic("unhandled parameter decl");
    }
  }

  std::fprintf(&mut ctx.fout, "      }}\n");
  std::fprintf(&mut ctx.fout, "      \n");
}

fn codegen_method(context mut &ctx, zidl::method &method) throws -> void
{
  if (method.type == zidl::method::type::oneway || method.type == zidl::method::type::twoway)
  {
    std::fprintf(&mut ctx.fout, "    pub struct {}_request\n", method.name);
    std::fprintf(&mut ctx.fout, "    {{\n");
    std::fprintf(&mut ctx.fout, "      pub const ordinal = {:#x};\n", std::hash().combine(method.ordinal, 0x10101010) & 0x7ffffff);
    std::fprintf(&mut ctx.fout, "      pub const max_message_size = {};\n", max_message_size(&mut ctx, method.parameters));
    std::fprintf(&mut ctx.fout, "      \n");

    codegen_fields(&mut ctx, method.parameters);
    codegen_constructor(&mut ctx, method.parameters);
    codegen_encode(&mut ctx, method.parameters);
    codegen_decode(&mut ctx, method.parameters);

    std::fprintf(&mut ctx.fout, "      pub ~this() = default;\n");
    std::fprintf(&mut ctx.fout, "    }}\n");
    std::fprintf(&mut ctx.fout, "\n");
  }

  if (method.type == zidl::method::type::twoway || method.type == zidl::method::type::event)
  {
    std::fprintf(&mut ctx.fout, "    pub struct {}_response\n", method.name);
    std::fprintf(&mut ctx.fout, "    {{\n");
    std::fprintf(&mut ctx.fout, "      pub const ordinal = {:#x};\n", std::hash().combine(method.ordinal, 0x92be81) & 0x7ffffff);
    std::fprintf(&mut ctx.fout, "      pub const max_message_size = {};\n", max_message_size(&mut ctx, method.returns));
    std::fprintf(&mut ctx.fout, "      \n");

    codegen_fields(&mut ctx, method.returns);
    codegen_constructor(&mut ctx, method.returns);
    codegen_encode(&mut ctx, method.returns);
    codegen_decode(&mut ctx, method.returns);

    std::fprintf(&mut ctx.fout, "      pub ~this() = default;\n");
    std::fprintf(&mut ctx.fout, "    }}\n");
    std::fprintf(&mut ctx.fout, "\n");
  }
}

fn codegen_dispatch(context mut &ctx, zidl::protocol &protocol) throws -> void
{
  std::fprintf(&mut ctx.fout, "    pub union dispatch_t\n");
  std::fprintf(&mut ctx.fout, "    {{\n");

  for (var &method : protocol.methods)
  {
    switch (method)
    {
      case method[method]:

        if (method.type == zidl::method::type::oneway || method.type == zidl::method::type::twoway)
          std::fprintf(&mut ctx.fout, "      pub {}({}_request mut &),\n", method.name, method.name);

        if (method.type == zidl::method::type::event)
          std::fprintf(&mut ctx.fout, "      pub {}({}_response mut &),\n", method.name, method.name);

      else:
        std::panic("unhandled protocol decl");
    }
  }

  std::fprintf(&mut ctx.fout, "      \n");
  std::fprintf(&mut ctx.fout, "      pub ~this() = default;\n");
  std::fprintf(&mut ctx.fout, "    }}\n");
  std::fprintf(&mut ctx.fout, "\n");
}

fn codegen_messages(context mut &ctx, zidl::protocol &protocol) throws -> void
{
  for (var &method : protocol.methods)
  {
    switch (method)
    {
      case method[method]:
        codegen_method(&mut ctx, method);

      else:
        std::panic("unhandled protocol decl");
    }
  }

  std::fprintf(&mut ctx.fout, "\n");
}

fn codegen_protocol(context mut &ctx, zidl::protocol &protocol) throws -> void
{
  std::fprintf(&mut ctx.fout, "  pub struct {}\n", protocol.name);
  std::fprintf(&mut ctx.fout, "  {{\n");
  std::fprintf(&mut ctx.fout, "    pub const max_request_size = {};\n", max_request_size(&mut ctx, protocol.methods));
  std::fprintf(&mut ctx.fout, "    pub const max_response_size = {};\n", max_response_size(&mut ctx, protocol.methods));
  std::fprintf(&mut ctx.fout, "    \n");

  codegen_dispatch(&mut ctx, protocol);
  codegen_messages(&mut ctx, protocol);

  std::fprintf(&mut ctx.fout, "  }}\n");
  std::fprintf(&mut ctx.fout, "\n");
}

fn codegen_constant(context mut &ctx, zidl::constant &constant) throws -> void
{
  std::fprintf(&mut ctx.fout, "  pub const {} = {};\n\n", constant.name, constant.value);
}

fn codegen_bits(context mut &ctx, zidl::bits &bits) throws -> void
{
  std::fprintf(&mut ctx.fout, "  pub enum {} : u32\n", bits.name);
  std::fprintf(&mut ctx.fout, "  {{\n");

  for (var &constant : bits.constants)
  {
    switch (constant)
    {
      case constant[constant]:
        std::fprintf(&mut ctx.fout, "    {} = {},\n", constant.name, constant.value);

      else:
        std::panic("unhandled bits decl");
    }
  }

  std::fprintf(&mut ctx.fout, "    \n");
  std::fprintf(&mut ctx.fout, "    pub const fn bool({} lhs) -> bool {{ return cast<u32>(lhs) != 0; }}\n", bits.name);
  std::fprintf(&mut ctx.fout, "    \n");
  std::fprintf(&mut ctx.fout, "    pub const fn ~({} lhs) -> {} {{ return cast(~cast<u32>(lhs)); }}\n", bits.name, bits.name);
  std::fprintf(&mut ctx.fout, "    pub const fn &({} lhs, {} rhs) -> {} {{ return cast(cast<u32>(lhs) & cast<u32>(rhs)); }}\n", bits.name, bits.name, bits.name);
  std::fprintf(&mut ctx.fout, "    pub const fn |({} lhs, {} rhs) -> {} {{ return cast(cast<u32>(lhs) | cast<u32>(rhs)); }}\n", bits.name, bits.name, bits.name);
  std::fprintf(&mut ctx.fout, "    pub const fn ^({} lhs, {} rhs) -> {} {{ return cast(cast<u32>(lhs) ^ cast<u32>(rhs)); }}\n", bits.name, bits.name, bits.name);

  std::fprintf(&mut ctx.fout, "  }}\n");
  std::fprintf(&mut ctx.fout, "\n");

  ctx.typetable.push_back(type::tag(bits.name, std::vector::from([ctx.i32type])));
}

fn codegen_enumerator(context mut &ctx, zidl::enumerator &enumerator) throws -> void
{
  std::fprintf(&mut ctx.fout, "  pub enum {} : i32\n", enumerator.name);
  std::fprintf(&mut ctx.fout, "  {{\n");

  for (var &constant : enumerator.constants)
  {
    switch (constant)
    {
      case constant[constant]:
        std::fprintf(&mut ctx.fout, "    {} = {},\n", constant.name, constant.value);

      else:
        std::panic("unhandled enum decl");
    }
  }

  std::fprintf(&mut ctx.fout, "  }}\n");
  std::fprintf(&mut ctx.fout, "\n");

  ctx.typetable.push_back(type::tag(enumerator.name, std::vector::from([ctx.i32type])));
}

fn codegen_structure(context mut &ctx, zidl::structure &structure) throws -> void
{
  std::fprintf(&mut ctx.fout, "  pub struct {}\n", structure.name);
  std::fprintf(&mut ctx.fout, "  {{\n");

  for (var &field : structure.fields)
  {
    switch (field)
    {
      case variable[field]:
        std::fprintf(&mut ctx.fout, "    pub {} {};\n", field.type, field.name);

      else:
        std::panic("unhandled struct decl");
    }
  }

  std::fprintf(&mut ctx.fout, "    \n");
  std::fprintf(&mut ctx.fout, "    pub {}() = default;\n", structure.name);
  std::fprintf(&mut ctx.fout, "    pub {}({}&&) = default;\n", structure.name, structure.name);
  std::fprintf(&mut ctx.fout, "    pub fn =({} mut &, {} &&) -> {} mut & = default;\n", structure.name, structure.name, structure.name);
  std::fprintf(&mut ctx.fout, "    pub fn ==({} &, {} &) -> bool = default;\n", structure.name, structure.name);
  std::fprintf(&mut ctx.fout, "    pub ~{}() = default;\n", structure.name);
  std::fprintf(&mut ctx.fout, "  }}\n");
  std::fprintf(&mut ctx.fout, "\n");

  var fields = std::vector<type*>();

  for (var &field : structure.fields)
  {
    switch (field)
    {
      case variable[field]:
        if (var type = resolve_type(&mut ctx, field.type))
          fields.push_back(type);

      else:
        std::panic("unhandled struct decl");
    }
  }

  ctx.add_type(type::tag(structure.name, fields));
}

fn codegen(zidl::ast &ast, std::string_view outfile, diag::diag mut &diag) throws -> void
{
  var ctx = context();
  ctx.initialise(&diag);

  ctx.fout = std::file::create(outfile);

  std::fprintf(&mut ctx.fout, "//\n// auto generated - do not modify\n//\n\n");
  std::fprintf(&mut ctx.fout, "import zidl.types;\n");
  std::fprintf(&mut ctx.fout, "import zidl.protocol;\n");
  std::fprintf(&mut ctx.fout, "\n");

  std::fprintf(&mut ctx.fout, "pub struct {}\n", ast.name.gsub(".", "_"));
  std::fprintf(&mut ctx.fout, "{{\n");

  for (var &decl : ast.decls)
  {
    switch (decl)
    {
      case constant[constant]:
        codegen_constant(&mut ctx, constant);

      case bits[bits]:
        codegen_bits(&mut ctx, bits);

      case enumerator[enumerator]:
        codegen_enumerator(&mut ctx, enumerator);

      case structure[structure]:
        codegen_structure(&mut ctx, structure);

      case protocol[protocol]:
        codegen_protocol(&mut ctx, protocol);

      else:
        std::panic("unhandled ast decl");
    }
  }

  std::fprintf(&mut ctx.fout, "}}\n");
}

fn main
{
  var diag = diag::diag("zidlc");

  if (std::env::args.len != 4 || std::env::args[1] != "-o")
  {
    std::fprint(std::stderr, "useage: zidlc -o <output> <input>");

    std::exit(1);
  }

  var input = std::env::args[3];
  var outfile = std::env::args[2];

  try
  {
    var ast = zidl::parse(input, &mut diag);

    if (diag.has_errored)
    {
      std::fprintf(std::stderr, "{}", diag);

      std::exit(1);
    }

    codegen(ast, outfile, &mut diag);

    std::fprintf(std::stderr, "{}", diag);
  }
  catch(std::error e)
  {
    std::panic("compiler error - ", e);
  }
}
